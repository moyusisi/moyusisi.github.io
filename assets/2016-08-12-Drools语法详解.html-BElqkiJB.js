import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o,c as s,d as a}from"./app-DQnd5bNn.js";const n={},l=a(`<p>本文仅包含<code>Drools</code>的语法介绍, 不涉及如何使用,规则引擎介绍,算法介绍等方面.</p><h2 id="语法全貌概览" tabindex="-1"><a class="header-anchor" href="#语法全貌概览"><span>语法全貌概览</span></a></h2><p>规则文件一般都是<code>.drl</code>文件, 也可以是<code>xml</code>文件. 我们默认都是用<code>.drl</code>文件. 一个规则文件大致会有这样的结构:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#6A737D;">   /* 包名, 必须, 逻辑上的管理, 不对应物理位置 */</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#6A737D;">    /* 导入类或方法, 与java中的import类似 */</span></span>
<span class="line"><span style="color:#E1E4E8;">global    </span><span style="color:#6A737D;">/* 全局变量 */</span></span>
<span class="line"><span style="color:#E1E4E8;">function  </span><span style="color:#6A737D;">/* 定义函数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">query     </span><span style="color:#6A737D;">/* 查询 */</span></span>
<span class="line"><span style="color:#E1E4E8;">rule      </span><span style="color:#6A737D;">/* 规则, 可以由多个; 这是规则文件的主要部分 */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来个具体的规则文件的例子:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.test.drools;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> void</span><span style="color:#B392F0;"> showName</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">String</span><span style="color:#FFAB70;"> name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;我是&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> name);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#9ECBFF;">&quot;rule1&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    when</span></span>
<span class="line"><span style="color:#B392F0;">        eval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    then</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello drools&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">        showName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="package" tabindex="-1"><a class="header-anchor" href="#package"><span>package</span></a></h3><p><code>package</code>有以下几点</p><ul><li><code>package</code>是必须的, 且必须放在规则文件第一行;</li><li><code>package</code>的名字是随意的, 不必对应物理路径;</li><li>跟<code>java</code>中<code>package</code>的概念不同,这里只是逻辑上的一种区分,同样的<code>package</code>下定义的<code>function</code>和<code>query</code>等可以直接使用。</li></ul><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>import</span></a></h3><p><code>import</code>跟<code>java</code>中类似, 可以导入类, 也可以直接导入静态方法</p><h3 id="global" tabindex="-1"><a class="header-anchor" href="#global"><span>global</span></a></h3><p>定义全局变量,通常用于返回数据和提供服务; 全局变量与fact不通,引擎不能知道全局变量的改变,必须在插入fact之前,设置global变量</p><h3 id="functon" tabindex="-1"><a class="header-anchor" href="#functon"><span>functon</span></a></h3><p>定义函数, 为了提高代码复用, 使用<code>java</code>语法书写</p><h2 id="rule" tabindex="-1"><a class="header-anchor" href="#rule"><span>rule</span></a></h2><p>定义一个规则, 格式大致为:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#9ECBFF;">&quot;规则名&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">属性</span><span style="color:#E1E4E8;">&gt;&lt;</span><span style="color:#79B8FF;">值</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    when</span></span>
<span class="line"><span style="color:#E1E4E8;">        条件 (也叫 Left Hand Side, 简称 LHS)</span></span>
<span class="line"><span style="color:#E1E4E8;">    then</span></span>
<span class="line"><span style="color:#E1E4E8;">        结果 (也叫 Right Hand Side, 简称 RHS)</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要包含三部分:</p><ul><li>属性部分: 定义当前规则执行的一些属性等,比如是否可被重复执行、过期时间、生效时间等</li><li>条件部分: 即<code>LHS</code>, 定义当前规则的条件; 如 <code>when Message();</code> 判断当前<code>workingMemory</code>中是否存在<code>Message</code>对象</li><li>结果部分: 即<code>RHS</code>, 即当前规则条件满足后执行的操作,可以直接调用<code>Fact</code>对象的方法来操作应用,可写java代码</li></ul><h2 id="规则属性" tabindex="-1"><a class="header-anchor" href="#规则属性"><span>规则属性</span></a></h2><p>属性有这些内容: <code>activation-group</code>, <code>agenda-group</code>, <code>auto-focus</code>, <code>date-effective</code>, <code>date-expires</code>, <code>dialect</code>, <code>duration</code>, <code>duration-value</code>, <code>enabled</code>, <code>lock-on-active</code>, <code>no-loop</code>, <code>ruleflow-group</code>, <code>salience</code></p><p>下面挨个解释:</p><ul><li><p><code>salience</code>: 优先级, 属性值是一个数字, 数值越大越先执行, 可以是负数, 默认为<code>0</code>. 这个可以控制规则的执行顺序</p></li><li><p><code>date-effective</code>: 设置规则的生效时间, <code>当前系统时间&gt;=date-effective</code>时才会触发执行, 值是一个日期格式的字符串, 推荐用法是手动在java代码中设置当前系统的时间格式, 然后按照格式指定时间. 比如: <code>date-expires &quot;2016-01-31 23:59:59&quot;</code></p></li><li><p><code>date-expires</code>: 设置规则的过期时间, 跟上面正好相反.</p></li><li><p><code>enabled</code>: 表示该规则是否可用, 值为布尔类型, 默认是<code>true</code>, 设置成<code>false</code>则该规则就不会被执行了</p></li><li><p><code>dialect</code>: 设置语言类型, 值为字符串, 一般有两种语言,<code>mvel</code>和<code>java</code>, 默认为<code>java</code></p></li><li><p><code>duration</code>: 规则定时, 值为长整型, 单位为毫秒, 如 <code>duration 3000</code>, 表示规则在3秒后执行(另外的线程中执行)</p></li><li><p><code>no-loop</code>: 是否允许规则多次执行, 值为布尔类型, 默认是<code>false</code>, 即当前的规则只要满足条件, 可以无限次执行; 对当前传入<code>workingMemory</code>中的<code>Fact</code>对象进行修改或者个数的增减时, 就会触发规则重新匹配执行; 设置属性<code>no-loop true</code>, 表示当前规则只执行一次, 即使<code>RHS</code>中更新了当前<code>Fact</code>对象也不会再次执行该规则了. 不过当其他规则里更新了<code>Fact</code>对象时, 即使有<code>no-loop true</code>也会触发, 即<code>no-loop true</code>仅表示本规的<code>RHS</code>中有更新时不重复执行.</p></li><li><p><code>lock-on-active</code>: 是<code>no-loop</code>的增强版, 与其他属性配合使用;规则的重复执行不一定是本身触发的, 也可能是其他规则触发的, 当在规则上使用<code>ruleflow-group</code>属性或<code>agenda-group</code>属性时, 将<code>lock-on-active</code>属性值设置为<code>true</code>，可避免因某些<code>Fact</code>对象被修改而使已经执行过的规则再次被激活执行.</p></li><li><p><code>activation-group</code>: 作用是将规则分组, 值为字符串表示组名,这样在执行的时候,具有相同<code>activation-group</code>属性的规则中只要有一个会被执行,其它的规则都将不再执行。即在具有相同<code>activation-group</code>属性的规则当中,只有一个规则会被执行,其它规则都将不会被执行.相同<code>activation-group</code>属性的规则中哪一个会先执行,则可以用<code>salience</code>之类的属性来实现</p></li><li><p><code>agenda-group</code>: 将规则分成若干个<code>Agenda Group</code>, 默认情况下, 引擎在调用这些设置了<code>agenda-group</code>属性的规则时需要显示的指定某个<code>Agenda Group</code>得到<code>Focus(焦点)</code>,这样位于该<code>Agenda Group</code>中的规则才会触发执行,否则将不执行</p></li><li><p><code>ruleflow-group</code>: 使用规则流的时候会用到该属性, 作用是将规则分组，然后在规则流当中通过使用<code>ruleflow-group</code>属性的值，从而使用对应的规则</p></li></ul><h2 id="when" tabindex="-1"><a class="header-anchor" href="#when"><span>when</span></a></h2><p>条件部分(Conditions/LHS)用于匹配条件, 也叫匹配模式(Pattern)</p><p>条件可以是单个, 也可以有多个, 下面是一些例子</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">when</span></span>
<span class="line"><span style="color:#B392F0;">    eval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)            </span><span style="color:#6A737D;">// 是一个默认的api, 类似于 while(true)</span></span>
<span class="line"><span style="color:#B392F0;">    Person</span><span style="color:#E1E4E8;">()              </span><span style="color:#6A737D;">// 当前的 workingMemory 中存在 Pserson 类型的 Fact 对象</span></span>
<span class="line"><span style="color:#B392F0;">    $person</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">()      </span><span style="color:#6A737D;">// 同上, $person 是给对象起的名字</span></span>
<span class="line"><span style="color:#B392F0;">    $bob</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;"> &quot;bob&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 字段绑定, 存在 Person 类型且属性 name 值为bob的对象</span></span>
<span class="line"><span style="color:#B392F0;">    Person</span><span style="color:#E1E4E8;">($name:name </span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;"> &quot;bob&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 与上面类似, 只是把名字放到了 $name 变量里</span></span>
<span class="line"><span style="color:#B392F0;">    Person</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> $name) </span><span style="color:#6A737D;">// 与上面类似, 只是把名字放到了 $name 变量里</span></span>
<span class="line"><span style="color:#B392F0;">    $tom</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(name </span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;"> &quot;tom&quot;</span><span style="color:#F97583;"> ||</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">==</span><span style="color:#9ECBFF;"> &quot;Tom&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 条件组合</span></span>
<span class="line"><span style="color:#E1E4E8;">then</span></span>
<span class="line"><span style="color:#F97583;">    ...</span><span style="color:#6A737D;">  // 上面起的变量这里可以直接使用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><ul><li>上例中的<code>$person</code>, <code>$bob</code>等代表着符合条件的变量的引用, 在后面的条件部分和<code>RHS</code>部分中可直接使用</li><li>条件可以有组合, 如<code>Person(age == 18 &amp;&amp; (name == &quot;tom&quot; || name == &quot;Tom&quot;))</code>, 若条件全是<code>&amp;&amp;</code>关系, 可以使用<code>,</code>代替, 但两者不能混用.</li><li><code>Fact</code>对象(即输入的数据,类似于java bean)的private属性, 在<code>LHS</code>中必须用<code>.</code>引用, 如<code>($person.name == &quot;tom&quot;)</code>, 而<code>RHS</code>中必须使用 <code>getter</code> 和 <code>setter</code> 方法</li></ul><p>另外<code>drools</code>提供了十二种比较操作符, 有:<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>contains</code>, <code>not contains</code>, <code>memberOf</code>, <code>not memberOf</code>, <code>matches</code>, <code>not matches</code></p><ul><li><code>contains</code>: 是否包含, 被比较对象可以是一个复杂对象也可以是一个简单的值</li><li><code>memberOf</code>: 是否在某个集合中, 与<code>contains</code>不同的是他被比较的对象是一个集合, 而<code>contains</code>被比较的对象是单个值或者对象</li><li><code>matches</code>: 正则表达式匹配</li></ul><h2 id="then" tabindex="-1"><a class="header-anchor" href="#then"><span>then</span></a></h2><p>RHS, 这部分是普通的<code>java</code>代码, 记得加<code>;</code>.<br> 另外<code>drools</code>提供了几个方法:</p><ul><li><code>insert</code>: 往当前<code>workingMemory</code>中插入一个新的<code>Fact</code>对象, 会触发规则的再次执行,除非使用no-loop限定</li><li><code>update</code>: 更新</li><li><code>modify</code>: 修改, 与<code>update</code>语法不同, 效果一样, 结果都是更新操作</li><li><code>retract</code>: 删除</li></ul>`,35),c=[l];function p(d,t){return o(),s("div",null,c)}const u=e(n,[["render",p],["__file","2016-08-12-Drools语法详解.html.vue"]]),E=JSON.parse('{"path":"/program/spring/2016-08-12-Drools%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3.html","title":"Drools语法详解","lang":"zh-CN","frontmatter":{"title":"Drools语法详解","date":"2016-08-12T00:00:00.000Z","category":"Java","tag":["Drools"],"order":-20160812,"description":"本文仅包含Drools的语法介绍, 不涉及如何使用,规则引擎介绍,算法介绍等方面. 语法全貌概览 规则文件一般都是.drl文件, 也可以是xml文件. 我们默认都是用.drl文件. 一个规则文件大致会有这样的结构: 来个具体的规则文件的例子: package package有以下几点 package是必须的, 且必须放在规则文件第一行; package...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/spring/2016-08-12-Drools%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Drools语法详解"}],["meta",{"property":"og:description","content":"本文仅包含Drools的语法介绍, 不涉及如何使用,规则引擎介绍,算法介绍等方面. 语法全貌概览 规则文件一般都是.drl文件, 也可以是xml文件. 我们默认都是用.drl文件. 一个规则文件大致会有这样的结构: 来个具体的规则文件的例子: package package有以下几点 package是必须的, 且必须放在规则文件第一行; package..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T09:40:25.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Drools"}],["meta",{"property":"article:published_time","content":"2016-08-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T09:40:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Drools语法详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-08-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T09:40:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"语法全貌概览","slug":"语法全貌概览","link":"#语法全貌概览","children":[{"level":3,"title":"package","slug":"package","link":"#package","children":[]},{"level":3,"title":"import","slug":"import","link":"#import","children":[]},{"level":3,"title":"global","slug":"global","link":"#global","children":[]},{"level":3,"title":"functon","slug":"functon","link":"#functon","children":[]}]},{"level":2,"title":"rule","slug":"rule","link":"#rule","children":[]},{"level":2,"title":"规则属性","slug":"规则属性","link":"#规则属性","children":[]},{"level":2,"title":"when","slug":"when","link":"#when","children":[]},{"level":2,"title":"then","slug":"then","link":"#then","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1725874825000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/spring/2016-08-12-Drools语法详解.md","localizedDate":"2016年8月12日","excerpt":"","autoDesc":true}');export{u as comp,E as data};
