import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as l}from"./app-DA1JdGe8.js";const e={},o=l(`<p><code>java.lang.Class.forName(…)</code>和<code>java.lang.ClassNotFoundExcetpion</code>是我们经常遇到的， 藏在他们身后的，是Java的类加载器。</p><h2 id="jvm预定义的三种类加载器" tabindex="-1"><a class="header-anchor" href="#jvm预定义的三种类加载器"><span>JVM预定义的三种类加载器</span></a></h2><p>JVM预定义的三种类加载器有：启动(Bootstrap)类加载器、标准扩展(Extension)类加载器和系统(System)类加载器，当一个JVM启动的时候，Java缺省开始使用这些类装入器。<br> 除了以上三种类加载器，还有一种比较特殊的类型就是线程上下文类加载器，这个暂不介绍。</p><h3 id="启动-bootstrap-类加载器" tabindex="-1"><a class="header-anchor" href="#启动-bootstrap-类加载器"><span>启动(Bootstrap)类加载器</span></a></h3><p>启动类加载器是通过<code>java.lang.ClassLoader</code>中的<code>private native final Class findLoadedClass0(String name);</code>这一本地方法实现的类装入器，它负责将<code>&lt;Java_Runtime_Home&gt;/lib</code>下面的类库加载到内存中。</p><h3 id="标准扩展-extension-类加载器" tabindex="-1"><a class="header-anchor" href="#标准扩展-extension-类加载器"><span>标准扩展(Extension)类加载器</span></a></h3><p>扩展类加载器是由Sun的<code>ExtClassLoader(sun.misc.Launcher$ExtClassLoader)</code>实现，它负责将<code>&lt;Java_Runtime_Home &gt;/lib/ext</code>或者由系统变量 <code>java.ext.dir</code>指定位置中的类库加载到内存中。</p><h3 id="系统-system-类加载器" tabindex="-1"><a class="header-anchor" href="#系统-system-类加载器"><span>系统(System)类加载器</span></a></h3><p>系统类加载器是由Sun的<code>AppClassLoader(sun.misc.Launcher$AppClassLoader)</code>实现，它负责将系统类路径<code>CLASSPATH</code>中指定的类库加载到内存中。</p><p>上面三种类型的类加载器中，启动(Bootstrap)类加载器是通过本地方法实现的，无法直接获取到启动类加载器的引用；而标准扩展(Extension)类加载器和系统(System)类加载器均为<code>sun.misc.Launcher</code>的内部类，分别对应<code>ExtClassLoader</code>和<code>AppClassLoader</code>，这两个内部类均继承自<code>URLClassLoader</code>，其继承关系为：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">java.net.URLClassLoader </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> java.security.SecureClassLoader </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> java.lang.ClassLoader</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>所以<code>ExtClassLoader</code>和<code>AppClassLoader</code>这两个内部类间接继承自<code>ClassLoader</code></p><hr><h2 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制"><span>双亲委派机制</span></a></h2><p>JVM在加载类时默认采用的是双亲委派机制，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给双亲加载器，依次递归，如果双亲加载器可以完成类加载任务，就成功返回；只有双亲类加载器无法完成此加载任务时，才自己去加载。<br> 注意这里的双亲并不是继承上的关系，而是指的<code>ClassLoader</code>中的一个字段。在源码中更容易描述双亲委派机制：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//java.lang.ClassLoader.java</span></span>
<span class="line"><span style="color:#6A737D;">    // 双亲的定义</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> ClassLoader parent;</span></span>
<span class="line"><span style="color:#6A737D;">    // 加载方法</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#B392F0;"> loadClass</span><span style="color:#E1E4E8;">(String name) throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#B392F0;"> loadClass</span><span style="color:#E1E4E8;">(name, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#E1E4E8;"> Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#B392F0;"> loadClass</span><span style="color:#E1E4E8;">(String name, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> resolve) throws ClassNotFoundException {</span></span>
<span class="line"><span style="color:#F97583;">        synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">getClassLoadingLock</span><span style="color:#E1E4E8;">(name)) {</span></span>
<span class="line"><span style="color:#6A737D;">            // First, check if the class has already been loaded</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> findLoadedClass</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#6A737D;">            //如果没有加载过，则进行加载</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                long</span><span style="color:#E1E4E8;"> t0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">                try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                    // 先检查双亲</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 如果有双亲，则委派给双亲去加载</span></span>
<span class="line"><span style="color:#E1E4E8;">                        c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent.</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(name, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 没有双亲才使用Bootstrap类加载器加载</span></span>
<span class="line"><span style="color:#E1E4E8;">                        c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> findBootstrapClassOrNull</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ClassNotFoundException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // ClassNotFoundException thrown if class not found</span></span>
<span class="line"><span style="color:#6A737D;">                    // from the non-null parent class loader</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#6A737D;">                // 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></span>
<span class="line"><span style="color:#F97583;">                if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // If still not found, then invoke findClass in order</span></span>
<span class="line"><span style="color:#6A737D;">                    // to find the class.</span></span>
<span class="line"><span style="color:#F97583;">                    long</span><span style="color:#E1E4E8;"> t1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">nanoTime</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    c </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> findClass</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#6A737D;">                    // this is the defining class loader; record the stats</span></span>
<span class="line"><span style="color:#E1E4E8;">                    sun.misc.PerfCounter.</span><span style="color:#B392F0;">getParentDelegationTime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addTime</span><span style="color:#E1E4E8;">(t1 </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> t0);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    sun.misc.PerfCounter.</span><span style="color:#B392F0;">getFindClassTime</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addElapsedTimeFrom</span><span style="color:#E1E4E8;">(t1);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    sun.misc.PerfCounter.</span><span style="color:#B392F0;">getFindClasses</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (resolve) {</span></span>
<span class="line"><span style="color:#B392F0;">                resolveClass</span><span style="color:#E1E4E8;">(c);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> c;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码中可以看出，双亲为<code>null</code>时才会调用<code>Bootstrap</code>启动类加载器，所以启动类加载器可以当成是最后一个双亲。<br><code>ExtClassLoader</code>和<code>AppClassLoader</code>这两个内部类继承自<code>URLClassLoader</code>，而<code>URLClassLoader</code>和<code>SecureClassLoader</code>中仅做了一些检查，双亲委派机制在各个类加载器中是一直有效的。</p><p>另外<code>parent</code>被<code>private final</code>修饰，并且定义的时候没有赋初值，这就必须在构造方法中进行赋值。<br> 我们从源码中分析下各个类加载器的<code>parent</code>到底被赋值为什么。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// java.loang.ClassLoader.java</span></span>
<span class="line"><span style="color:#6A737D;">    // 三个构造方法</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#B392F0;"> ClassLoader</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkCreateClassLoader</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#B392F0;"> ClassLoader</span><span style="color:#E1E4E8;">(ClassLoader parent) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">checkCreateClassLoader</span><span style="color:#E1E4E8;">(), parent);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#B392F0;"> ClassLoader</span><span style="color:#E1E4E8;">(Void unused, ClassLoader parent) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.parent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parent;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 不指定parent时，默认的parent为系统(System)类加载器，即AppClassLoader</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> ClassLoader </span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 通过java.lang.ClassLoader.getSystemClassLoader()可以直接获取到系统类加载器，后面会通过代码进行测试</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">==========================================================================================================</span></span>
<span class="line"><span style="color:#6A737D;">// sun.misc.Launcher.java</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> ClassLoader loader;</span></span>
<span class="line"><span style="color:#6A737D;">    // Launcher 的构造方法</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> Launcher</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // Create the extension class loader</span></span>
<span class="line"><span style="color:#E1E4E8;">        ClassLoader extcl;  </span><span style="color:#6A737D;">// 这里定义了 extcl</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            extcl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExtClassLoader.</span><span style="color:#B392F0;">getExtClassLoader</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 调用了内部类ExtClassLoader的方法，生成了ExtClassLoader</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">            throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> InternalError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Could not create extension class loader&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // Now create the class loader to use to launch the application</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">           loader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AppClassLoader.</span><span style="color:#B392F0;">getAppClassLoader</span><span style="color:#E1E4E8;">(extcl);  </span><span style="color:#6A737D;">// 调用了内部类的getAppClassLoader方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">            throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> InternalError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Could not create application class loader&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 内部类 AppClassLoader</span></span>
<span class="line"><span style="color:#F97583;">    static</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> AppClassLoader</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> URLClassLoader</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // AppClassLoader 的构造方法，所以生成AppClassLoader时必须指定parent</span></span>
<span class="line"><span style="color:#B392F0;">        AppClassLoader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">URL</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">urls</span><span style="color:#E1E4E8;">, ClassLoader </span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 在此设置了 AppClassLoader 的 parent</span></span>
<span class="line"><span style="color:#79B8FF;">            super</span><span style="color:#E1E4E8;">(urls, parent, factory);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 内部类的方法</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> ClassLoader </span><span style="color:#B392F0;">getAppClassLoader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ClassLoader </span><span style="color:#FFAB70;">extcl</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#F97583;">            final</span><span style="color:#E1E4E8;"> String s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.class.path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">            final</span><span style="color:#F97583;"> File</span><span style="color:#E1E4E8;">[] path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#F97583;"> new</span><span style="color:#F97583;"> File</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> getClassPath</span><span style="color:#E1E4E8;">(s);</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> PrivilegedAction&lt;</span><span style="color:#F97583;">AppClassLoader</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#F97583;">                    public</span><span style="color:#E1E4E8;"> AppClassLoader </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">                    URL</span><span style="color:#E1E4E8;">[] urls </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (s </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#F97583;"> new</span><span style="color:#F97583;"> URL</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> pathToURLs</span><span style="color:#E1E4E8;">(path);</span></span>
<span class="line"><span style="color:#6A737D;">                    // 这里指定了 AppClassLoader 的parent为extcl</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AppClassLoader</span><span style="color:#E1E4E8;">(urls, extcl);  </span><span style="color:#6A737D;">// 生成了AppClassLoader并且设置其parent为extcl</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 内部类 ExtClassLoader</span></span>
<span class="line"><span style="color:#F97583;">    static</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ExtClassLoader</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> URLClassLoader</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // ExtClassLoader 的构造方法</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#B392F0;"> ExtClassLoader</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">File</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">dirs</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#6A737D;">            // 调用URLClassLoader的构造方法 URLClassLoader(URL[] urls, ClassLoader parent, URLStreamHandlerFactory factory)</span></span>
<span class="line"><span style="color:#6A737D;">            // 直接把 ExtClassLoader 的 parent 设置为null</span></span>
<span class="line"><span style="color:#79B8FF;">            super</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getExtURLs</span><span style="color:#E1E4E8;">(dirs), </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, factory);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上的源码分析可知，在<code>sun.misc.Launcher.java</code>中做了如下工作</p><ol><li>将Launcher默认的类加载器<code>loader</code>设置为<code>AppClassLoader</code></li><li>将<code>AppClassLoader</code>的<code>parent</code>设置为<code>ExtClassLoader</code></li><li>将<code>ExtClassLoader</code>的<code>parent</code>设置为<code>null</code></li></ol><h2 id="程序验证" tabindex="-1"><a class="header-anchor" href="#程序验证"><span>程序验证</span></a></h2><h3 id="验证一-parent的验证" tabindex="-1"><a class="header-anchor" href="#验证一-parent的验证"><span>验证一: parent的验证</span></a></h3><p>程序源码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestClassLoader</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParent</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getParent</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>sun.misc.Launcher$AppClassLoader@30a4effe</span></span>
<span class="line"><span>sun.misc.Launcher$ExtClassLoader@1c8825a5</span></span>
<span class="line"><span>null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这说明<code>AppClassLoader</code>的双亲为<code>ExtClassLoader</code>，<code>ExtClassLoader</code>的双亲为<code>null</code>，这跟分析源码得出的结论一致。</p><h3 id="验证二-默认的类加载器" tabindex="-1"><a class="header-anchor" href="#验证二-默认的类加载器"><span>验证二: 默认的类加载器</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestClassLoader</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">            // 通过Class.forName加载类</span></span>
<span class="line"><span style="color:#E1E4E8;">            Class loadedClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.test.classloader.TestClassLoader&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">            // 查看被加载的类是被那个类加载器加载的</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(loadedClass.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            e.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>sun.misc.Launcher$AppClassLoader@30a4effe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这说明系统默认的类加载器为<code>AppClassLoader</code>。</p><h3 id="验证三-双亲委派以及类加载器的加载位置" tabindex="-1"><a class="header-anchor" href="#验证三-双亲委派以及类加载器的加载位置"><span>验证三: 双亲委派以及类加载器的加载位置</span></a></h3><p>将上面编译好的class文件打包成<code>classloader.jar</code>(最好使用集成工具进行打包)，将<code>classloader.jar</code>放到<code>&lt;Java_Runtime_Home &gt;/lib/ext</code>目录下，再次运行，结果成了</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>sun.misc.Launcher$ExtClassLoader@2e5f8245</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这说明通过双亲委派机制，<code>ExtClassLoader</code>抢先加载了类<br> 将<code>classloader.jar</code>拷贝一份到<code>&lt;Java_Runtime_Home &gt;/lib</code>目录下，再次运行，结果仍为<code>sun.misc.Launcher$ExtClassLoader@2e5f8245</code><br> 这说明放到<code>&lt;Java_Runtime_Home &gt;/lib</code>目录下的文件并没有被加载，这跟双亲委派机制并不矛盾。 <strong>虚拟机出于安全等因素考虑，不会加载<code>&lt;Java_Runtime_Home&gt;/lib</code>存在的陌生类，开发者通过将要加载的非JDK自身的类放置到此目录下期待启动类加载器加载是不可能的。</strong><br> 做个进一步验证，删除<code>&lt;Java_Runtime_Home&gt;/lib/ext</code>目录下的<code>classloader.jar</code>和工程输出目录下对应的class文件，然后再运行测试代码，则将会有<code>ClassNotFoundException</code>异常抛出。</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h2><ol><li>在JVM中一个类用其全名和一个加载类<code>ClassLoader</code>的实例作为唯一标识，不同类加载器加载的类将被置于不同的命名空间， 所以<strong>不同类加载器加载的相同类，其类型也是不一样的</strong>。</li><li>编写自定义类加载器时，不要覆写已有的<code>loadClass(...)</code>方法。</li><li>用户自定义类加载器不指定父类加载器，可以加载<code>&lt;Java_Runtime_Home&gt;/lib</code>下的类， 但不能加载<code>&lt;Java_Runtime_Home&gt;/lib/ext</code>目录下的类。</li></ol>`,39),p=[o];function c(r,t){return n(),a("div",null,p)}const E=s(e,[["render",c],["__file","2015-02-21-java类加载器.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2015-02-21-java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","title":"Java类加载器","lang":"zh-CN","frontmatter":{"title":"Java类加载器","date":"2015-02-21T00:00:00.000Z","category":"Java","tag":"Java","order":-20150221,"description":"java.lang.Class.forName(…)和java.lang.ClassNotFoundExcetpion是我们经常遇到的， 藏在他们身后的，是Java的类加载器。 JVM预定义的三种类加载器 JVM预定义的三种类加载器有：启动(Bootstrap)类加载器、标准扩展(Extension)类加载器和系统(System)类加载器，当一个JVM...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-02-21-java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Java类加载器"}],["meta",{"property":"og:description","content":"java.lang.Class.forName(…)和java.lang.ClassNotFoundExcetpion是我们经常遇到的， 藏在他们身后的，是Java的类加载器。 JVM预定义的三种类加载器 JVM预定义的三种类加载器有：启动(Bootstrap)类加载器、标准扩展(Extension)类加载器和系统(System)类加载器，当一个JVM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2015-02-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java类加载器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-02-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"JVM预定义的三种类加载器","slug":"jvm预定义的三种类加载器","link":"#jvm预定义的三种类加载器","children":[{"level":3,"title":"启动(Bootstrap)类加载器","slug":"启动-bootstrap-类加载器","link":"#启动-bootstrap-类加载器","children":[]},{"level":3,"title":"标准扩展(Extension)类加载器","slug":"标准扩展-extension-类加载器","link":"#标准扩展-extension-类加载器","children":[]},{"level":3,"title":"系统(System)类加载器","slug":"系统-system-类加载器","link":"#系统-system-类加载器","children":[]}]},{"level":2,"title":"双亲委派机制","slug":"双亲委派机制","link":"#双亲委派机制","children":[]},{"level":2,"title":"程序验证","slug":"程序验证","link":"#程序验证","children":[{"level":3,"title":"验证一: parent的验证","slug":"验证一-parent的验证","link":"#验证一-parent的验证","children":[]},{"level":3,"title":"验证二: 默认的类加载器","slug":"验证二-默认的类加载器","link":"#验证二-默认的类加载器","children":[]},{"level":3,"title":"验证三: 双亲委派以及类加载器的加载位置","slug":"验证三-双亲委派以及类加载器的加载位置","link":"#验证三-双亲委派以及类加载器的加载位置","children":[]}]},{"level":2,"title":"注意","slug":"注意","link":"#注意","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-02-21-java类加载器.md","localizedDate":"2015年2月21日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
