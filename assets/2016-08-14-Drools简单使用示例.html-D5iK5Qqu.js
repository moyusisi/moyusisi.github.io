import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,d as l}from"./app-DustJyov.js";const a="/assets/kie-ChueM9mG.png",o={},p=l(`<p>本文不涉及<code>Drools</code>的原理和介绍, 仅通过简单例子演示怎么使用<code>Drools</code>.<br> 另外, 各版本的文档可查看<a href="http://docs.jboss.org/drools/release/" target="_blank" rel="noopener noreferrer">官方资料</a></p><h2 id="包依赖和目录结构" tabindex="-1"><a class="header-anchor" href="#包依赖和目录结构"><span>包依赖和目录结构</span></a></h2><p><code>Drools</code>也提供了一个<code>bom</code>文件进行相关的包管理, 在maven项目中, <code>pom</code>文件可以这样写:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.drools&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;drools-bom&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">&gt;pom&lt;/</span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;import&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.kie&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;kie-api&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.drools&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;drools-compiler&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;runtime&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目的目录结构是下面这样子的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>    src</span></span>
<span class="line"><span>    |--com.test.drools</span></span>
<span class="line"><span>    |  |--DroolsTest.java</span></span>
<span class="line"><span>    resources</span></span>
<span class="line"><span>    |--META-INF</span></span>
<span class="line"><span>    |  |--kmodule.xml</span></span>
<span class="line"><span>    |--rules</span></span>
<span class="line"><span>    |  |--test.drl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Drools</code>默认会加载<code>classpath</code>路径下的<code>META-INF/kmodule.xml</code>文件(稍后详述)</li><li><code>resources</code>下面的<code>rules/test.drl</code>是规则文件, 也支持<code>Excel</code>即<code>xsl</code>文件</li></ul><h2 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例"><span>简单示例</span></a></h2><p>下面是一个简单的例子</p><p><code>DroolsTest.java</code>内容如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DroolsTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取 drools 实现的 KieServices 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieServices kieServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> KieServices.Factory.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // kieServices 默认加载 classpath:META-INF/kmodule.xml 得到 KieContainer</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieContainer kContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">getKieClasspathContainer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 通过 kContainer 获取 kmodule.xml 中定义的 ksession</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieSession kieSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kContainer.</span><span style="color:#B392F0;">newKieSession</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ksession-rules&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 向 workingMemory 中加入一个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        kieSession.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 通知规则引擎执行规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        kieSession.</span><span style="color:#B392F0;">fireAllRules</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>META-INF/kmodule.xml</code>内容如下:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">kmodule</span><span style="color:#B392F0;"> xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://jboss.org/kie/6.0.0/kmodule&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">kbase</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;kbase-rules&quot;</span><span style="color:#B392F0;"> packages</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;rules&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">ksession</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ksession-rules&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">kbase</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">kbase</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;kbase-process&quot;</span><span style="color:#B392F0;"> packages</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;process&quot;</span><span style="color:#E1E4E8;">&gt;  </span><span style="color:#6A737D;">&lt;!-- 这个没用到 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">ksession</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ksession-process&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">kbase</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">kmodule</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>rules/test.drl</code>内容如下:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> com.test.drools</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">rule </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    when</span></span>
<span class="line"><span style="color:#B392F0;">        $name</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    then</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> $name);</span></span>
<span class="line"><span style="color:#E1E4E8;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子运行的结果为在控制台输入:<code>hello Tom</code></p><h2 id="kmodule-xml" tabindex="-1"><a class="header-anchor" href="#kmodule-xml"><span>kmodule.xml</span></a></h2><p>这个<code>kmodule.xml</code>的文件的定义非常简单, 下面解释下里面的内容</p><ul><li><code>kmodule</code>: 里面可以包含多个<code>kbase</code>, 例子中只包含了2个</li><li><code>kbase</code>: 有个<code>name</code>属性, 全局不能重名; <code>packages</code>指定规则所在的包,对应<code>resources</code>下面的文件夹名. 多个包可以用逗号分开;</li><li><code>kbase</code>下面可以有多个<code>ksession</code>子节点</li><li><code>ksession</code>: 有个<code>name</code>属性, 全局不能重名</li><li><code>kbase</code>和<code>ksession</code>还有其他属性, 不太常用</li></ul><p>文件体现了<code>kmodule</code>, <code>kbase</code>和<code>ksession</code>的定义和从上到下的包含关系. 项目会根据<code>kmodule.xml</code>的定义将其解析成<code>KieModuleModel</code>, <code>KieBaseModel</code>, <code>KieSessionModel</code>对象, 在运行时<code>KieContainer</code>会根据<code>XXModel</code>来创建<code>KieModule</code>, <code>KieBase</code>, <code>KieSession</code>对象, 其中<code>KieModule</code>和<code>KieBase</code>只会创建一次, 而<code>KieSession</code>则有可能创建多次, 因为<code>KieSession</code>的创建成本很低, 同时<code>KieSession</code>包含了运行时的数据, 所以可以销毁、创建若干次.</p><p>我们可以通过<code>kmodule.xml</code>文件来定义<code>KieModule</code>, 项目会自动解析<code>classpath</code>下面的所有<code>META-INF/kmodule.xml</code>文件，然后解析成<code>KieModule</code>对象供<code>Drools</code>引擎使用; 我们也可以不定义<code>kmodule.xml</code>, 直接通过编码的方式来创建<code>KieModule</code>等对象, 后面将会介绍.</p><h2 id="kie" tabindex="-1"><a class="header-anchor" href="#kie"><span>KIE</span></a></h2><p>我们发现在<code>Drools</code>中经常接触到<code>KIE</code>, 这个<code>KIE</code>是<code>JBoss</code>里面一些相关项目的统称, 可以理解为, <code>JBoss</code>有很多项目, 使用方式比较统一, 都可以通过<code>KIE API</code>来使用. 这些通用的API一般都会使用<code>Kie</code>作为前缀, 比如<code>KieServices</code>, <code>KieContainer</code>, <code>KieSession</code>等这些类都是KIE的公共API.</p><p>比较熟悉的<code>JBoss</code>项目<code>jBPM</code>和<code>Drools</code>等, 通过<code>KIE</code>统一了他们的使用方式, 在<code>Drools</code>中这么用, 在<code>jBPM</code>也这么用. 下面是来自官网的一张关于KIE的图:</p><figure><img src="`+a+`" alt="KIE API" tabindex="0" loading="lazy"><figcaption>KIE API</figcaption></figure><p>KIE API有一些常用的类, 比如上例中, 我们通过<code>KieServices</code>对象得到一个<code>KieContainer</code>, 然后<code>KieContainer</code>根据<code>session name</code>来新建一个<code>KieSession</code>, 最后通过<code>KieSession</code>来运行规则</p><ul><li><code>KieSession</code>: 该接口提供了很多方法, 可以通过这些方法访问KIE关于构建和运行的相关对象, 比如可以获取<code>KieContainer</code>, 利用<code>KieContainer</code>来访问<code>KBase</code>和<code>KSession</code>等信息; 可以获取<code>KieRepository</code>对象, 利用<code>KieRepository</code>来管理<code>KieModule</code>等. <code>KieServices</code>就是一个中心, 通过它来获取的各种对象来完成规则构建、管理和执行等操作</li><li><code>KieContainer</code>: 就是一个<code>KieBase</code>的容器</li><li><code>KieBase</code>: 一个知识仓库, 包含了若干的规则、流程、方法等, 在<code>Drools</code>中主要就是规则和方法, <code>KieBase</code>不包含运行时的数据, 如果需要执行规则<code>KieBase</code>中的规则, 就需要根据<code>KieBase</code>创建<code>KieSession</code>. 一般创建<code>KieBase</code>成本较高, 只会创建一次</li><li><code>KieSession</code>: 一个跟<code>Drools</code>引擎交互的会话, 基于<code>KieBase</code>创建, 它会包含运行时数据(事实<code>Fact</code>). 我们通过<code>KieContainer</code>创建<code>KieSession</code>是一种较为方便的做法, 其实他本质上是从<code>KieBase</code>中创建出来的</li><li><code>KieRepository</code>: 一个单例对象, 它是一个存放<code>KieModule</code>的仓库, <code>KieModule</code>可以由<code>kmodule.xml</code>文件定义</li><li><code>KieProject</code>: <code>KieContainer</code>通过<code>KieProject</code>来创建<code>KieModule</code>, 并将<code>KieModule</code>放到<code>KieRepository</code>中, 然后<code>KieContainer</code>可以通过<code>KieProject</code>来查找<code>KieModule</code>定义的信息, 并根据这些信息构造<code>KieBase</code>和<code>KieSession</code></li><li><code>ClasspathKieProject</code>: 它实现了<code>KieProject</code>接口, 它提供了根据类路径中的<code>META-INF/kmodule.xml</code>文件构造<code>KieModule</code>的能力, 也就是我们能够基于Maven构造Drools组件的基本保障之一</li></ul><p>另外, KIE也提供了一种策略, 能够让应用程序在运行时, 动态监测<code>Maven</code>仓库中<code>Drools</code>项目<code>jar</code>组件的版本更新情况, 然后可以根据配置动态更新<code>Drools</code>发布包, 实现热插拔功能, 这个是通过<code>KieScanner API</code>实现的</p><h2 id="编码方式实现kmodule定义" tabindex="-1"><a class="header-anchor" href="#编码方式实现kmodule定义"><span>编码方式实现kmodule定义</span></a></h2><p>前面的例子都是默认读取<code>classpath</code>下的<code>META-INF/kmodule.xml</code>文件的, 接下来我们通过<code>KieFileSystem</code>定义<code>KieModule</code>, 这样就不需要<code>META-INF/kmodule.xml</code>配置文件了.</p><p>还是类似的例子, 目录结构将变为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>    src</span></span>
<span class="line"><span>    |--com.test.drools</span></span>
<span class="line"><span>    |  |--KieFileSystemTest.java</span></span>
<span class="line"><span>    resources</span></span>
<span class="line"><span>    |--rules</span></span>
<span class="line"><span>    |  |--test.drl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>KKieFileSystemTest.java</code>内容为:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> KieFileSystemTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取 drools 实现的 KieServices 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieServices kieServices </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> KieServices.Factory.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 创建一个 KieFileSystem</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieFileSystem fileSystem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">newKieFileSystem</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 创建一个 KieResources 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieResources resources </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 1. 先创建 KieModuleModel, 类似于xml中的 kmodule 节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieModuleModel kieModuleModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">newKieModuleModel</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 2. 再创建 KieBaseModel, 类似于xml中的 kbase节点, name=kbase-rules, package=rules</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieBaseModel baseModel </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieModuleModel.</span><span style="color:#B392F0;">newKieBaseModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;kbase-rules&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addPackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rules&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 3. 再创建 KieSessionModel, 类似于xml中的 ksession 节点, name=ksession-rules</span></span>
<span class="line"><span style="color:#E1E4E8;">        baseModel.</span><span style="color:#B392F0;">newKieSessionModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ksession-rules&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 4. 生产一个xml文件，就是kmodule.xml文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        String xml </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieModuleModel.</span><span style="color:#B392F0;">toXML</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(xml); </span><span style="color:#6A737D;">// 打印出来看看内容</span></span>
<span class="line"><span style="color:#6A737D;">        // 5. 将这个xml文件写入到KieFileSystem中</span></span>
<span class="line"><span style="color:#E1E4E8;">        fileSystem.</span><span style="color:#B392F0;">writeKModuleXML</span><span style="color:#E1E4E8;">(xml);</span></span>
<span class="line"><span style="color:#6A737D;">        // 6. 然后将规则文件等写入到 KieFileSystem 中</span></span>
<span class="line"><span style="color:#6A737D;">        // fileSystem.write(&quot;src/main/resources/rules/test.drl&quot;, resources.newClassPathResource(&quot;rules/test.drl&quot;));</span></span>
<span class="line"><span style="color:#E1E4E8;">        fileSystem.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(resources.</span><span style="color:#B392F0;">newClassPathResource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rules/test.drl&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 跟上面等效</span></span>
<span class="line"><span style="color:#6A737D;">        // 7. 最后通过 KieBuilder 进行构建就将该 kmodule 加入到 KieRepository 中, 这样就将自定义的kmodule加入到引擎中了</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieBuilder kb </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">newKieBuilder</span><span style="color:#E1E4E8;">(fileSystem);</span></span>
<span class="line"><span style="color:#E1E4E8;">        kb.</span><span style="color:#B392F0;">buildAll</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 编译</span></span>
<span class="line"><span style="color:#6A737D;">        // 下面就可以向原来一样使用了</span></span>
<span class="line"><span style="color:#6A737D;">        // 得到 KieContainer</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieContainer kieContainer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieServices.</span><span style="color:#B392F0;">newKieContainer</span><span style="color:#E1E4E8;">(kieServices.</span><span style="color:#B392F0;">getRepository</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDefaultReleaseId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">        // 通过 kContainer 获取 kmodule.xml 中定义的 ksession</span></span>
<span class="line"><span style="color:#E1E4E8;">        KieSession kieSession </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kieContainer.</span><span style="color:#B392F0;">newKieSession</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ksession-rules&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 向 workingMemory 中加入一个对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        kieSession.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 通知规则引擎执行规则</span></span>
<span class="line"><span style="color:#E1E4E8;">        kieSession.</span><span style="color:#B392F0;">fireAllRules</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),c=[p];function i(r,t){return e(),n("div",null,c)}const y=s(o,[["render",i],["__file","2016-08-14-Drools简单使用示例.html.vue"]]),u=JSON.parse('{"path":"/program/backend/2016-08-14-Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html","title":"Drools简单使用示例","lang":"zh-CN","frontmatter":{"title":"Drools简单使用示例","date":"2016-08-14T00:00:00.000Z","category":"Java","tag":["Drools"],"order":-20160814,"description":"本文不涉及Drools的原理和介绍, 仅通过简单例子演示怎么使用Drools. 另外, 各版本的文档可查看官方资料 包依赖和目录结构 Drools也提供了一个bom文件进行相关的包管理, 在maven项目中, pom文件可以这样写: 项目的目录结构是下面这样子的 Drools默认会加载classpath路径下的META-INF/kmodule.xml文...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-08-14-Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Drools简单使用示例"}],["meta",{"property":"og:description","content":"本文不涉及Drools的原理和介绍, 仅通过简单例子演示怎么使用Drools. 另外, 各版本的文档可查看官方资料 包依赖和目录结构 Drools也提供了一个bom文件进行相关的包管理, 在maven项目中, pom文件可以这样写: 项目的目录结构是下面这样子的 Drools默认会加载classpath路径下的META-INF/kmodule.xml文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T00:43:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Drools"}],["meta",{"property":"article:published_time","content":"2016-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T00:43:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Drools简单使用示例\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T00:43:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"包依赖和目录结构","slug":"包依赖和目录结构","link":"#包依赖和目录结构","children":[]},{"level":2,"title":"简单示例","slug":"简单示例","link":"#简单示例","children":[]},{"level":2,"title":"kmodule.xml","slug":"kmodule-xml","link":"#kmodule-xml","children":[]},{"level":2,"title":"KIE","slug":"kie","link":"#kie","children":[]},{"level":2,"title":"编码方式实现kmodule定义","slug":"编码方式实现kmodule定义","link":"#编码方式实现kmodule定义","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1719189814000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":3}]},"filePathRelative":"program/backend/2016-08-14-Drools简单使用示例.md","localizedDate":"2016年8月14日","excerpt":"","autoDesc":true}');export{y as comp,u as data};
