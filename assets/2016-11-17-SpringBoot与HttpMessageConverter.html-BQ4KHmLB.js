import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,d as a}from"./app-DQnd5bNn.js";const l={},o=a(`<h2 id="默认的httpmessageconverter" tabindex="-1"><a class="header-anchor" href="#默认的httpmessageconverter"><span>默认的HttpMessageConverter</span></a></h2><p>在构建<code>RESTful</code>服务时, 我们常常会把一个对象直接转换成<code>json</code>对象, 就像下面这样:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HomeController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">home</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;中文&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;age&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> map;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Spring</code>提供了多种<code>HttpMessageConverter</code>让我们对结果进行转换, 像上面那样, 把对象转换成<code>json</code>格式输出, <code>Spring boot</code>默认使用<code>MappingJackson2HttpMessageConverter</code>进行转换. 如果我们想要使用另一个工具进行<code>json</code>转换, 或者想添加自己的<code>HttpMessageConverter</code>, <code>Spring boot</code>提供了多种不通的方式来实现.</p><h2 id="自定义httpmessageconverter" tabindex="-1"><a class="header-anchor" href="#自定义httpmessageconverter"><span>自定义HttpMessageConverter</span></a></h2><p>我们以<code>GsonHttpMessageConverter</code>为例, 除了主配置类之外, 我们添加另一个配置类, 从这个类中添加自己的<code>Converter</code></p><h3 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一"><span>方式一</span></a></h3><p>直接添加一个<code>Bean</code>, 它将添加到<code>Converter</code>列表的最前面</p><ul><li>优点: 简单, 无需继承其他类</li><li>缺点: 不容易直观地看出, 有一个<code>Converter</code>列表</li></ul><p>代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> WebMvcConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> GsonHttpMessageConverter </span><span style="color:#B392F0;">gsonHttpMessageConverter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Gson gson </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">serializeNulls</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">// null 也序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        GsonHttpMessageConverter converter </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonHttpMessageConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        converter.</span><span style="color:#B392F0;">setGson</span><span style="color:#E1E4E8;">(gson);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> converter;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二"><span>方式二</span></a></h3><p>继承<code>WebMvcConfigurerAdapter</code>, 覆盖<code>configureMessageConverters</code>方法</p><ul><li>优点: 直观看到有个<code>List</code>, 断点调试会发现, 这是向列表中添加的第一个<code>Converter</code></li><li>缺点: 要是有多个配置也以同样的方式添加了其他<code>Converter</code>, 就无法保证以固定的顺序添加到列表中了</li></ul><p>代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> WebMvcConfig</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> WebMvcConfigurerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> configureMessageConverters</span><span style="color:#E1E4E8;">(List&lt;HttpMessageConverter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">converters</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Gson gson </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">serializeNulls</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">// null 也序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        GsonHttpMessageConverter converter </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonHttpMessageConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        converter.</span><span style="color:#B392F0;">setGson</span><span style="color:#E1E4E8;">(gson);</span></span>
<span class="line"><span style="color:#E1E4E8;">        converters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(converter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式三" tabindex="-1"><a class="header-anchor" href="#方式三"><span>方式三</span></a></h3><p>继承<code>WebMvcConfigurerAdapter</code>, 覆盖<code>extendMessageConverters</code>方法</p><ul><li>优点: 这个方法在其他<code>Converter</code>加入列表之后执行, 可以进行精确控制, 如顺序等</li><li>缺点: 同样有可能, 别的配置里也以相同方式重写了这个方法</li></ul><p>代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> WebMvcConfig</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> WebMvcConfigurerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> configureMessageConverters</span><span style="color:#E1E4E8;">(List&lt;HttpMessageConverter&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#FFAB70;">converters</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        converters.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 把其他 converter 清除掉</span></span>
<span class="line"><span style="color:#E1E4E8;">        Gson gson </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonBuilder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">serializeNulls</span><span style="color:#E1E4E8;">()    </span><span style="color:#6A737D;">// null 也序列化</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">setDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="color:#E1E4E8;">)     </span><span style="color:#6A737D;">// 时间转化为特定格式 yyyy-MM-dd HH:mm:ss</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        GsonHttpMessageConverter converter </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> GsonHttpMessageConverter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        converter.</span><span style="color:#B392F0;">setGson</span><span style="color:#E1E4E8;">(gson);</span></span>
<span class="line"><span style="color:#E1E4E8;">        converters.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(converter);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),p=[o];function t(r,c){return n(),e("div",null,p)}const d=s(l,[["render",t],["__file","2016-11-17-SpringBoot与HttpMessageConverter.html.vue"]]),y=JSON.parse('{"path":"/program/spring/2016-11-17-SpringBoot%E4%B8%8EHttpMessageConverter.html","title":"SpringBoot与HttpMessageConverter","lang":"zh-CN","frontmatter":{"title":"SpringBoot与HttpMessageConverter","date":"2016-11-17T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20161117,"description":"默认的HttpMessageConverter 在构建RESTful服务时, 我们常常会把一个对象直接转换成json对象, 就像下面这样: Spring提供了多种HttpMessageConverter让我们对结果进行转换, 像上面那样, 把对象转换成json格式输出, Spring boot默认使用MappingJackson2HttpMessage...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/spring/2016-11-17-SpringBoot%E4%B8%8EHttpMessageConverter.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot与HttpMessageConverter"}],["meta",{"property":"og:description","content":"默认的HttpMessageConverter 在构建RESTful服务时, 我们常常会把一个对象直接转换成json对象, 就像下面这样: Spring提供了多种HttpMessageConverter让我们对结果进行转换, 像上面那样, 把对象转换成json格式输出, Spring boot默认使用MappingJackson2HttpMessage..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T09:40:25.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2016-11-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T09:40:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot与HttpMessageConverter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T09:40:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"默认的HttpMessageConverter","slug":"默认的httpmessageconverter","link":"#默认的httpmessageconverter","children":[]},{"level":2,"title":"自定义HttpMessageConverter","slug":"自定义httpmessageconverter","link":"#自定义httpmessageconverter","children":[{"level":3,"title":"方式一","slug":"方式一","link":"#方式一","children":[]},{"level":3,"title":"方式二","slug":"方式二","link":"#方式二","children":[]},{"level":3,"title":"方式三","slug":"方式三","link":"#方式三","children":[]}]}],"git":{"createdTime":1719160919000,"updatedTime":1725874825000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/spring/2016-11-17-SpringBoot与HttpMessageConverter.md","localizedDate":"2016年11月17日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
