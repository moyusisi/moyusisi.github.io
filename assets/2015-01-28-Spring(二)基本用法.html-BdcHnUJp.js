import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as n,d as l}from"./app-DustJyov.js";const o={},a=l(`<h2 id="spring容器" tabindex="-1"><a class="header-anchor" href="#spring容器"><span>Spring容器</span></a></h2><p>Spring容器是Spring的核心，是生成<code>Bean</code>的工厂。Spring有两个核心接口：<code>BeanFactory</code>和<code>ApplicationContext</code>，后者是前者的子接口，二者都可以代表Spring容器。<br><code>ApplictionContext</code>的实现类有：</p><ul><li><code>FileSystemXmlApplicationContext</code>: 基于文件系统的XML配置文件创建<code>ApplicationContext</code></li><li><code>ClassPathXmlApplicationContext</code>: 基于类加载路径下的xml配置文件创建<code>ApplicationContext</code></li></ul><p>所以一般可以这样创建Spring容器：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">ApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:spring.xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">//或者</span></span>
<span class="line"><span style="color:#E1E4E8;">ApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FileSystemXmlApplicationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;file:绝对路径/spring.xml&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的方式"><span>依赖注入的方式</span></a></h2><p>依赖注入的方式主要有2种：</p><ul><li>通过<code>Bean</code>属性的<code>setter</code>方法注入(前提是有setter方法)</li><li>通过<code>Bean</code>的构造方法注入(前提是有构造方法)</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    &lt;!-- 通过 setter 方法注入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.service.impl.HelloServiceImpl&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">/&gt;  </span><span style="color:#6A737D;">&lt;!-- 若参数不是自定义类型，则使用value=&quot;**&quot;的方式 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 通过构造方法注入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.service.impl.HelloServiceImpl&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 下面着四种注入方式，只要一种就可以，最好通过name或者index来注入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> /&gt;  </span><span style="color:#6A737D;">&lt;!-- 当构造方法有多个参数时，这样会有问题 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 通过参数名称注入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> /&gt;    </span><span style="color:#6A737D;">&lt;!-- 通过参数索引注入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.dao.Hello&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 通过参数类型注入 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 通过参数类型注入的其他例子 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!--&lt;constructor-arg type=&quot;java.lang.Double&quot; value=&quot;100.00&quot; /&gt;--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="bean的scope属性" tabindex="-1"><a class="header-anchor" href="#bean的scope属性"><span>Bean的scope属性</span></a></h2><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.dao.impl.HelloImpl&quot;</span><span style="color:#B392F0;"> scope</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;singleton&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>bean</code>元素的<code>scope</code>属性主要是用来指定如何创建<code>bean</code>对象的，系统已经实现的主要有五中类型，分别是：<code>singleton</code>、<code>prototype</code>、<code>request</code>、<code>session</code>和<code>globalSession</code>。 其中<code>request</code>、<code>session</code>和<code>globalSession</code>只能在web环境中使用，当在非web环境中使用它们时，系统会抛出<code>IllegalStateException</code>异常。</p><ul><li><code>singleton</code>: 默认值，单例模式。在整个Spring IoC容器中只会创建一个对象，该对象创建以后是保存在<code>singleton beans</code>的缓存中的，每次都取得同一个<code>bean</code>对象。</li><li><code>prototype</code>: 原型模式。每次通过容器的<code>getBean</code>方法获取<code>prototype</code>定义的<code>Bean</code>时，都将产生一个新实例。</li><li><code>request</code>: 对每次<code>HTTP request</code>都将产生一个新实例。</li><li><code>session</code>: 对每个处于活跃状态的<code>HttpSession</code>都将创建一个对象。</li><li><code>globalSession</code>: 一个全局的<code>HttpSession</code>下会拥有一个单独的实例，通常用于Portlet环境下。</li></ul><p><strong>注意</strong>:</p><ul><li>当一个<code>singleton</code>的<code>bean A</code>依赖于一个<code>prototype</code>的<code>bean B</code>时，A拥有的B就只会在A初始化时初始化一次，每次在A使用B的时候都是用的同一个对象B，这与B为<code>prototype</code>有点违背，不是我们想要的结果，其解决办法是，使<code>bean A</code>实现一个<code>ApplicationContextAware</code>接口，在每次A需要使用B的时候都从<code>ApplicationContext</code>里面取一个B对象，这个时候取的B对象每次都会是不一样的。</li><li>当需要把一个<code>http</code>级别的<code>scope</code>的对象注入到其他<code>bean</code>中时，需要在声明的<code>http</code>级别的<code>scope</code>的对象中加入<code>&lt;aop:scoped-proxy/&gt;</code>如下面的userPreferences对象</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userPreferences&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.foo.UserPreferences&quot;</span><span style="color:#B392F0;"> scope</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;session&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- &lt;aop:scoped-proxy/&gt; --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">aop:scoped-proxy</span><span style="color:#B392F0;"> proxy-target-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">/&gt;</span><span style="color:#6A737D;">&lt;!-- 为true则为开启对CGLIB的支持  --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.foo.SimpleUserService&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userPreferences&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userPreferences&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做的<strong>原因</strong>就像在<code>singleton</code>的<code>Bean</code>中引用了<code>prototype</code>的<code>Bean</code>一样，而使用<code>&lt;aop:scoped-proxy/&gt;</code>就会在实际调用的时候每次使用代理去代理<code>userPreferences</code>调用其对应的方法，代理访问的是对应的<code>session</code>中的对象，这样就可以实现每个<code>session</code>对应一个对象。而在代理的时候有两种方式，一种是基于JDK的interface的，一种是CGLIB形式的，如果要代理的类是面向对象的，就可以直接使用JDK的代理，否则就需要开启对CGLIB代理的支持，同时要引入CGLIB的jar包。</p><ul><li><code>request</code>、<code>session</code>和<code>globalSession</code>只在Web环境中， 并且在Web应用中增加了额外的配置（将HTTP请求对象绑定到为该请求提供服务的线程上）才会生效。具体做法是：</li><li>若使用支持<code>servlet2.4+</code>的容器，则需要在<code>web.xml</code>中加入一个<code>RequestContextListener</code>监听器</li><li>若使用只支持<code>servlet2.4</code>之前规范的容器，则该容器不支持<code>Listener</code>规范，故无法使用这种配置， 需要在<code>web.xml</code>中加入一个<code>RequestContextFilter</code></li><li>若Web应用直接使用<code>Spring MVC</code>作为MVC框架，则无需这些额外的配置，因为<code>SpringDispatchServlet</code>或<code>DispatchPortlet</code> 已经处理了所有和请求有关的状态处理。</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">web-app</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 支持servlet2.4及以上 RequestContextListener --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">listener</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">listener-class</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            org.springframework.web.context.request.RequestContextListener  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">listener-class</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">listener</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 仅支持servlet2.4之前 RequestContextFilter --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">filter-name</span><span style="color:#E1E4E8;">&gt;requestContextFilter&lt;/</span><span style="color:#85E89D;">filter-name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">filter-class</span><span style="color:#E1E4E8;">&gt;org.springframework.web.filter.RequestContextFilter&lt;/</span><span style="color:#85E89D;">filter-class</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">filter-mapping</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">filter-name</span><span style="color:#E1E4E8;">&gt;requestContextFilter&lt;/</span><span style="color:#85E89D;">filter-name</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">url-pattern</span><span style="color:#E1E4E8;">&gt;/*&lt;/</span><span style="color:#85E89D;">url-pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">filter-mapping</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">web-app</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,22),t=[a];function p(c,r){return e(),n("div",null,t)}const d=s(o,[["render",p],["__file","2015-01-28-Spring(二)基本用法.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2015-01-28-Spring(%E4%BA%8C)%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html","title":"Spring(二): 基本用法","lang":"zh-CN","frontmatter":{"title":"Spring(二): 基本用法","date":"2015-01-28T00:00:00.000Z","category":"Spring","tag":"Spring","order":-20150128,"description":"Spring容器 Spring容器是Spring的核心，是生成Bean的工厂。Spring有两个核心接口：BeanFactory和ApplicationContext，后者是前者的子接口，二者都可以代表Spring容器。 ApplictionContext的实现类有： FileSystemXmlApplicationContext: 基于文件系统的XM...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-01-28-Spring(%E4%BA%8C)%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring(二): 基本用法"}],["meta",{"property":"og:description","content":"Spring容器 Spring容器是Spring的核心，是生成Bean的工厂。Spring有两个核心接口：BeanFactory和ApplicationContext，后者是前者的子接口，二者都可以代表Spring容器。 ApplictionContext的实现类有： FileSystemXmlApplicationContext: 基于文件系统的XM..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2015-01-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring(二): 基本用法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Spring容器","slug":"spring容器","link":"#spring容器","children":[]},{"level":2,"title":"依赖注入的方式","slug":"依赖注入的方式","link":"#依赖注入的方式","children":[]},{"level":2,"title":"Bean的scope属性","slug":"bean的scope属性","link":"#bean的scope属性","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-01-28-Spring(二)基本用法.md","localizedDate":"2015年1月28日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
