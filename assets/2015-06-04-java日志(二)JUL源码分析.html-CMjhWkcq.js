import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as l}from"./app-J8acWEVP.js";const e={},o=l(`<p>jdk自带的log工具<code>java.util.logging</code>的简单分析</p><h2 id="加载过程" tabindex="-1"><a class="header-anchor" href="#加载过程"><span>加载过程</span></a></h2><p>Logger.getLogger(&quot;className&quot;)加载整个日志的过程简单概括如下</p><h3 id="_1-生成logmanager" tabindex="-1"><a class="header-anchor" href="#_1-生成logmanager"><span>1. 生成LogManager</span></a></h3><ul><li><p>LogManager静态初始化</p><ul><li>先读取系统属性&quot;java.util.logging.manager&quot;初始化LogManager</li><li>若无此属性，则默认通过构造方法初始化LogManager</li></ul></li><li><p>通过getLogManager方法获取LogManager(读取longging配置的过程)</p><ul><li>加载系统属性&quot;java.util.logging.config.class&quot;，有就直接返回</li><li>加载系统属性&quot;java.util.logging.config.file&quot;，有就加载这个配置</li><li>若无则默认加载java.home下 &quot;lib/logging.properties&quot;配置文件</li><li>返回LogManager</li></ul></li></ul><h3 id="_2-通过logmanager的demandlogger方法返回logger" tabindex="-1"><a class="header-anchor" href="#_2-通过logmanager的demandlogger方法返回logger"><span>2. 通过LogManager的demandLogger方法返回Logger</span></a></h3><ul><li>若已创建该logger，直接返回该logger</li><li>若未创建过，则创建，并添加到LogManager中，返回该logger</li></ul><h2 id="源码解析" tabindex="-1"><a class="header-anchor" href="#源码解析"><span>源码解析</span></a></h2><p>先上入口</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.logging.Logger;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> JULTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Logger.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(JULTest.class.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// 从这里开始</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(log.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从<code>Logger.getLogger(XXX.class.getName())</code>开始,进入<code>java.util.logging.Logger</code>源码中可以看到</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Logger </span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(String name) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 直接调用了另一个方法</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#B392F0;"> demandLogger</span><span style="color:#E1E4E8;">(name, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, Reflection.</span><span style="color:#B392F0;">getCallerClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Logger </span><span style="color:#B392F0;">demandLogger</span><span style="color:#E1E4E8;">(String name, String resourceBundleName, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> caller) {</span></span>
<span class="line"><span style="color:#E1E4E8;">       LogManager manager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogManager.</span><span style="color:#B392F0;">getLogManager</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 第一步就是生成LogManager</span></span>
<span class="line"><span style="color:#E1E4E8;">       SecurityManager sm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getSecurityManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">       if</span><span style="color:#E1E4E8;"> (sm </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">LoggerHelper.disableCallerCheck) {</span></span>
<span class="line"><span style="color:#F97583;">           if</span><span style="color:#E1E4E8;"> (caller.</span><span style="color:#B392F0;">getClassLoader</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">               return</span><span style="color:#E1E4E8;"> manager.</span><span style="color:#B392F0;">demandSystemLogger</span><span style="color:#E1E4E8;">(name, resourceBundleName);</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }</span></span>
<span class="line"><span style="color:#F97583;">       return</span><span style="color:#E1E4E8;"> manager.</span><span style="color:#B392F0;">demandLogger</span><span style="color:#E1E4E8;">(name, resourceBundleName, caller); </span><span style="color:#6A737D;">// 最后通过这个方法返回Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来看看<code>LogManager.getLogManager()</code>，不过在此之前，首先要注意，<code>LogManager</code>有一个静态初始化方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">    static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // AccessController.doPrivileged()方法表示执行一些特权内容，跟Linux中的登陆有点类似。</span></span>
<span class="line"><span style="color:#6A737D;">        // Linux中的login程序必须访问password文件从而获得用户授权信息，但是用户不能随意的访问password文件。</span></span>
<span class="line"><span style="color:#6A737D;">        // 所以，login程序比较特殊，它不管被哪个用户所调用，都具有root的权限，而不是要登陆的用户权限。</span></span>
<span class="line"><span style="color:#E1E4E8;">        AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> PrivilegedAction&lt;</span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#F97583;">                public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    String cname </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">                    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        cname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.util.logging.manager&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">                        // 没有设置过，cname得到的为null</span></span>
<span class="line"><span style="color:#F97583;">                        if</span><span style="color:#E1E4E8;"> (cname </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 这里就不执行了</span></span>
<span class="line"><span style="color:#6A737D;">                            // 如果设置过，则会加载设置的LogManager</span></span>
<span class="line"><span style="color:#F97583;">                            try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                                Class clz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(cname);</span></span>
<span class="line"><span style="color:#E1E4E8;">                                manager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (LogManager) clz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ClassNotFoundException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                                Class clz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(cname);</span></span>
<span class="line"><span style="color:#E1E4E8;">                                manager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (LogManager) clz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                            }</span></span>
<span class="line"><span style="color:#E1E4E8;">                        }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Could not load Logmanager </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> cname </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ex.</span><span style="color:#B392F0;">printStackTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (manager </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">                        // 在这里才真正创建了Logmanager, 并赋值给LogManager的类成员manager</span></span>
<span class="line"><span style="color:#E1E4E8;">                        manager </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> LogManager</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#6A737D;">                    // 生成一个根Logger，添加到manager里</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.rootLogger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> manager.</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> RootLogger</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.</span><span style="color:#B392F0;">addLogger</span><span style="color:#E1E4E8;">(manager.rootLogger);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.systemContext.</span><span style="color:#B392F0;">addLocalLogger</span><span style="color:#E1E4E8;">(manager.rootLogger, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.userContext.</span><span style="color:#B392F0;">addLocalLogger</span><span style="color:#E1E4E8;">(manager.rootLogger, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Logger.global.</span><span style="color:#B392F0;">setLogManager</span><span style="color:#E1E4E8;">(manager);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.</span><span style="color:#B392F0;">addLogger</span><span style="color:#E1E4E8;">(Logger.global);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.systemContext.</span><span style="color:#B392F0;">addLocalLogger</span><span style="color:#E1E4E8;">(Logger.global, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    manager.userContext.</span><span style="color:#B392F0;">addLocalLogger</span><span style="color:#E1E4E8;">(Logger.global, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LogManager</code>初始化方法执行完了之后，再来看<code>LogManager.getLogManager()</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> LogManager </span><span style="color:#B392F0;">getLogManager</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (manager </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {   </span><span style="color:#6A737D;">// manager为类变量，只有一份。已经初始化了，不会为空</span></span>
<span class="line"><span style="color:#E1E4E8;">            manager.</span><span style="color:#B392F0;">readPrimordialConfiguration</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 读取原始配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> manager;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 下面主要是加载logging的属性</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> readPrimordialConfiguration</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">readPrimordialConfiguration) { </span><span style="color:#6A737D;">// LogManager的私有变量，刚开始为false</span></span>
<span class="line"><span style="color:#F97583;">            synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">readPrimordialConfiguration) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // 如果 System.in/out/err 为 null, 说明我们还在启动阶段</span></span>
<span class="line"><span style="color:#F97583;">                    if</span><span style="color:#E1E4E8;"> (System.out </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                        return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                    readPrimordialConfiguration </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 设置为已读取过配置文件</span></span>
<span class="line"><span style="color:#F97583;">                    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">                        // 又是特权函数</span></span>
<span class="line"><span style="color:#E1E4E8;">                        AccessController.</span><span style="color:#B392F0;">doPrivileged</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> PrivilegedExceptionAction&lt;</span><span style="color:#F97583;">Void</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#F97583;">                                public</span><span style="color:#E1E4E8;"> Void </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#B392F0;">                                    readConfiguration</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 读取配置</span></span>
<span class="line"><span style="color:#6A737D;">                                    // Platform loggers 开始代理 java.util.logging.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">                                    sun.util.logging.PlatformLogger.</span><span style="color:#B392F0;">redirectPlatformLoggers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">                                    return</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                                }</span></span>
<span class="line"><span style="color:#E1E4E8;">                            });</span></span>
<span class="line"><span style="color:#E1E4E8;">                    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 重新初始化 logging properties，重新读取 logging 的配置</span></span>
<span class="line"><span style="color:#6A737D;">    // 先依此尝试加载系统属性&quot;ava.util.logging.config.file&quot;和&quot;&quot;java.util.logging.config.class&quot;</span></span>
<span class="line"><span style="color:#6A737D;">    // 若找不到则加载(即默认加载) java_home 下面的 &quot;lib/logging.properties&quot;配置文件(可以在 jre/lib 目录下面查看其内容)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> readConfiguration</span><span style="color:#E1E4E8;">() throws IOException, SecurityException {</span></span>
<span class="line"><span style="color:#B392F0;">        checkPermission</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String cname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.util.logging.config.class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (cname </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">            try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">                try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Class clz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(cname);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    clz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ClassNotFoundException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Class clz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Thread.</span><span style="color:#B392F0;">currentThread</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getContextClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(cname);</span></span>
<span class="line"><span style="color:#E1E4E8;">                    clz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">                    return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Logging configuration class </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> cname </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> failed&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        String fname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.util.logging.config.file&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (fname </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            fname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;java.home&quot;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">// 这个必须有</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (fname </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t find java.home ??&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            File f </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> File</span><span style="color:#E1E4E8;">(fname, </span><span style="color:#9ECBFF;">&quot;lib&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            f </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> File</span><span style="color:#E1E4E8;">(f, </span><span style="color:#9ECBFF;">&quot;logging.properties&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            fname </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f.</span><span style="color:#B392F0;">getCanonicalPath</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        InputStream in </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FileInputStream</span><span style="color:#E1E4E8;">(fname);</span></span>
<span class="line"><span style="color:#E1E4E8;">        BufferedInputStream bin </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> BufferedInputStream</span><span style="color:#E1E4E8;">(in);</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            readConfiguration</span><span style="color:#E1E4E8;">(bin);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (in </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                in.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> readConfiguration</span><span style="color:#E1E4E8;">(InputStream ins) throws IOException, SecurityException {</span></span>
<span class="line"><span style="color:#B392F0;">        checkPermission</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">        reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        props.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(ins);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String names[] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> parseClassNames</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> names.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String word </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> names[i];</span></span>
<span class="line"><span style="color:#F97583;">            try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                Class clz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ClassLoader.</span><span style="color:#B392F0;">getSystemClassLoader</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">loadClass</span><span style="color:#E1E4E8;">(word);</span></span>
<span class="line"><span style="color:#E1E4E8;">                clz.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Can&#39;t load config class </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> word </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.err.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> ex);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置logManager中已有logger的级别</span></span>
<span class="line"><span style="color:#B392F0;">        setLevelsOnExistingLoggers</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 使用 PropertyChangeSupport 的 firePropertyChange 方法对属性文件的变动来做处理</span></span>
<span class="line"><span style="color:#E1E4E8;">        changes.</span><span style="color:#B392F0;">firePropertyChange</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        synchronized</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            initializedGlobalHandlers </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LogManager.getLogManager</code>分析完了，再看看mananer是怎么返回Logger的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Logger </span><span style="color:#B392F0;">demandLogger</span><span style="color:#E1E4E8;">(String name, String resourceBundleName, Class</span><span style="color:#F97583;">&lt;?&gt;</span><span style="color:#E1E4E8;"> caller) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果给定name的logger已经创建过了，则返回原来创建的，保证同name的logger只有一个</span></span>
<span class="line"><span style="color:#E1E4E8;">    Logger result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getLogger</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 只有之前没创建过的logger才会被新创建，然后添加到logManager中。</span></span>
<span class="line"><span style="color:#E1E4E8;">        Logger newLogger </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Logger</span><span style="color:#E1E4E8;">(name, resourceBundleName, caller, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">addLogger</span><span style="color:#E1E4E8;">(newLogger)) { </span><span style="color:#6A737D;">// 在这里才真正加载一个新创建的logger</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#E1E4E8;"> newLogger;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getLogger</span><span style="color:#E1E4E8;">(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="特殊说明" tabindex="-1"><a class="header-anchor" href="#特殊说明"><span>特殊说明</span></a></h2><p>凡是有加载系统属性的地方，就提供了用户自定义的接口，比如上面的&quot;java.util.logging.manager&quot;、 &quot;java.util.logging.config.class&quot;、&quot;java.util.logging.config.file&quot;，用户可以自己设置这些系统属性来进行自定义。</p><p>比如在tomcat的启动文件<code>catalina.sh</code>中,就有这样的配置</p><ul><li>修改属性&quot;java.util.logging.manager&quot;,自定义<code>LogManager</code>，使用自己的<code>ClassLoaderLogManager</code>:</li></ul><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># -z 表示判断指定的变量是否存在值</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-z</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;">$LOGGING_MANAGER</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">  LOGGING_MANAGER</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager&quot;</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>修改属性&quot;java.util.logging.config.file”,自定义配置文件， 使用自己的<code>%CATALINA_BASE%\\conf\\logging.properties</code>文件:</li></ul><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-z</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;">$LOGGING_CONFIG</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> [ </span><span style="color:#F97583;">-r</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;">$CATALINA_BASE</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">/conf/logging.properties ]; </span><span style="color:#F97583;">then</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOGGING_CONFIG</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;-Djava.util.logging.config.file=</span><span style="color:#E1E4E8;">$CATALINA_BASE</span><span style="color:#9ECBFF;">/conf/logging.properties&quot;</span></span>
<span class="line"><span style="color:#F97583;">  else</span></span>
<span class="line"><span style="color:#E1E4E8;">    LOGGING_CONFIG</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;-Dnop&quot;</span></span>
<span class="line"><span style="color:#F97583;">  fi</span></span>
<span class="line"><span style="color:#F97583;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),p=[o];function r(c,t){return n(),a("div",null,p)}const y=s(e,[["render",r],["__file","2015-06-04-java日志(二)JUL源码分析.html.vue"]]),d=JSON.parse('{"path":"/program/spring/2015-06-04-java%E6%97%A5%E5%BF%97(%E4%BA%8C)JUL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"java日志(二):JUL源码分析","lang":"zh-CN","frontmatter":{"title":"java日志(二):JUL源码分析","date":"2015-06-04T00:00:00.000Z","category":"Java","tag":["Log"],"order":-20150604,"description":"jdk自带的log工具java.util.logging的简单分析 加载过程 Logger.getLogger(\\"className\\")加载整个日志的过程简单概括如下 1. 生成LogManager LogManager静态初始化 先读取系统属性\\"java.util.logging.manager\\"初始化LogManager 若无此属性，则默认通过构造...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/spring/2015-06-04-java%E6%97%A5%E5%BF%97(%E4%BA%8C)JUL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"java日志(二):JUL源码分析"}],["meta",{"property":"og:description","content":"jdk自带的log工具java.util.logging的简单分析 加载过程 Logger.getLogger(\\"className\\")加载整个日志的过程简单概括如下 1. 生成LogManager LogManager静态初始化 先读取系统属性\\"java.util.logging.manager\\"初始化LogManager 若无此属性，则默认通过构造..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T09:40:25.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Log"}],["meta",{"property":"article:published_time","content":"2015-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T09:40:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java日志(二):JUL源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T09:40:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"加载过程","slug":"加载过程","link":"#加载过程","children":[{"level":3,"title":"1. 生成LogManager","slug":"_1-生成logmanager","link":"#_1-生成logmanager","children":[]},{"level":3,"title":"2. 通过LogManager的demandLogger方法返回Logger","slug":"_2-通过logmanager的demandlogger方法返回logger","link":"#_2-通过logmanager的demandlogger方法返回logger","children":[]}]},{"level":2,"title":"源码解析","slug":"源码解析","link":"#源码解析","children":[]},{"level":2,"title":"特殊说明","slug":"特殊说明","link":"#特殊说明","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1725874825000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/spring/2015-06-04-java日志(二)JUL源码分析.md","localizedDate":"2015年6月4日","excerpt":"","autoDesc":true}');export{y as comp,d as data};
