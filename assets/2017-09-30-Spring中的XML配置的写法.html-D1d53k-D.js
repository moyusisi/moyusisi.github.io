import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as n,d as a}from"./app-Ww47VjS3.js";const e={},o=a(`<p>现在的Spring项目提倡无<code>xml</code>配置, 但是在一些老的项目中难免会遇见一些通过<code>xml</code>进行配置的地方, 这篇文章总结下通过<code>xml</code>来配置<code>Bean</code>的各种写法</p><h2 id="构造器创建实例" tabindex="-1"><a class="header-anchor" href="#构造器创建实例"><span>构造器创建实例</span></a></h2><p>构造器注入可以注入值, 也可以注入其他<code>Bean</code>的引用, 我们有两种配置方式可供选择, <code>&lt;constructor-arg&gt;元素</code> 和 <code>c-命名空间</code></p><h3 id="constructor-arg-元素注入" tabindex="-1"><a class="header-anchor" href="#constructor-arg-元素注入"><span><code>&lt;constructor-arg&gt;元素</code>注入</span></a></h3><p><code>&lt;constructor-arg&gt;</code>元素的写法有多种形式</p><ul><li>按顺序注入, 如:</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;第一个参数&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;第二个参数&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定顺序注入, 参数是从0开始的. 如:</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.qunar.finance.demo.service.BeanService&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;第0个参数的值&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;第1个参数的值&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按参数名称注入, 如:</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;name的值&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title的值&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注入的不是值, 而是另一个<code>Bean</code>的引用, 只需要把<code>value</code>换成<code>ref</code>即可, 如:</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">constructor-arg</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBean&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-命名空间注入" tabindex="-1"><a class="header-anchor" href="#c-命名空间注入"><span><code>c-命名空间</code>注入</span></a></h3><p><code>c-命名空间</code>是在Spring 3.0中引入的, 要使用这个空间需要在<code>XML</code>顶部生命其模式:<code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code>, 但是一般集成开发环境都会有自动导入功能.</p><p>先看几个例子:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#B392F0;"> c:name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#B392F0;"> c:title</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;TestTitle&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#B392F0;"> c:_0</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#B392F0;"> c:_1</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;TestTitle&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#B392F0;"> c:otherBean-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#B392F0;"> c:_0-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与之前类似, 注入引用只是比注入值多了一个<code>-ref</code>, 但由于变量名不能以数字开头, 所以会在数字前面加一个下划线<code>_</code>, 如<code>c:_0</code>表示第0个参数</p><h2 id="工厂方法创建实例" tabindex="-1"><a class="header-anchor" href="#工厂方法创建实例"><span>工厂方法创建实例</span></a></h2><p>有的类提供了一个静态工厂方法来产生实例(往往这种方法可以使用<code>initialization on demand holder</code>技术进行延时加载, 不论是静态内部类还是非静态内部类都是在第一次使用时才会被加载)。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Singleton</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#B392F0;"> Singleton</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> SingletonHolder</span><span style="color:#E1E4E8;"> {  </span><span style="color:#6A737D;">// 延迟加载实例</span></span>
<span class="line"><span style="color:#F97583;">        static</span><span style="color:#E1E4E8;"> Singleton instance </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Singleton</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Singleton </span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> SingletonHolder.instance;  </span><span style="color:#6A737D;">// 返回实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用<code>factory-method</code>属性来创建实例:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.Singleton&quot;</span><span style="color:#B392F0;"> factory-method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;getInstance&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="装配属性" tabindex="-1"><a class="header-anchor" href="#装配属性"><span>装配属性</span></a></h2><p>属性装配是以<code>setter</code>方法为基础的, 如果属性没有<code>setter</code>方法, 是无法通过这种方式进行属性注入的.</p><p>与构造注入类似, 属性注入也有两种方式: <code>&lt;property&gt;</code>和<code>p-命名空间</code>, 如:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    &lt;!-- property方式, name属性是必须的 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#B392F0;">  value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBean&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- p命名空间 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.BeanService&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p:name</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Tom&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p:otherBean-ref</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanId&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装配集合" tabindex="-1"><a class="header-anchor" href="#装配集合"><span>装配集合</span></a></h2><p>集合可以作为属性或者构造函数参数的值. Spring 提供了4中集合元素</p><ul><li><code>&lt;list&gt;</code>: 装备list类型的值, 允许重复</li><li><code>&lt;set&gt;</code>: 装备set类型的值, 不允许重复</li><li><code>&lt;map&gt;</code>: 装备map类型的值, 名称和值可以是任意类型</li><li><code>&lt;props&gt;</code>: 装备properties类型的值, 名称和值必须是<code>String</code>型</li></ul><p>实际上, <code>&lt;list&gt;</code>和<code>&lt;set&gt;</code>可以装备任意<code>java.util.Collection</code>甚至是数组, 两者唯一的区别就是<code>&lt;set&gt;</code>中重复元素会被过滤掉; <code>&lt;map&gt;</code>和<code>&lt;props&gt;</code>元素分别对应<code>java.util.Map</code>和<code>java.util.Properties</code>, <code>&lt;props&gt;</code>要求键和值都必须是<code>String</code>类型.</p><h3 id="装配list、set和array" tabindex="-1"><a class="header-anchor" href="#装配list、set和array"><span>装配List、Set和Array</span></a></h3><p>属性为数组或<code>List</code>或者<code>Set</code>都可以这样装配:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    &lt;!-- 注入值 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;nameList&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">list</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Tom&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Tom&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Michael&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">list</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 注入bean的引用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;otherBeanList&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">list</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">ref</span><span style="color:#B392F0;"> bean</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">ref</span><span style="color:#B392F0;"> bean</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">ref</span><span style="color:#B392F0;"> bean</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;beanId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">list</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装配map" tabindex="-1"><a class="header-anchor" href="#装配map"><span>装配Map</span></a></h3><p><code>&lt;map&gt;</code>元素包含多个<code>&lt;entry&gt;</code>元素, <code>&lt;entry&gt;</code>元素由有个键和一个值组成</p><ul><li><code>key</code>: 指定<code>map</code>中<code>entry</code>的键为<code>String</code></li><li><code>key-ref</code>: 指定<code>map</code>中<code>entry</code>的键其他Bean的引用</li><li><code>value</code>: 指定<code>map</code>中<code>entry</code>的值为<code>String</code></li><li><code>value-ref</code>: 指定<code>map</code>中<code>entry</code>的值为其他Bean的引用</li></ul><p>比如:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;map&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">map</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">entry</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#B392F0;"> value-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">entry</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#B392F0;"> value-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">entry</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#B392F0;"> value-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">map</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="装配properties" tabindex="-1"><a class="header-anchor" href="#装配properties"><span>装配Properties</span></a></h3><p><code>Properties</code>类提供了和<code>Map</code>大致相同的功能, 只是它的键和值都必须是<code>String</code>类型</p><p><code>&lt;props&gt;</code>元素包含多个<code>&lt;prop&gt;</code>元素, <code>&lt;prop&gt;</code>元素有个<code>key</code>属性. 比如:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">props</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">&gt;Tom&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">&gt;Jim&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">&gt;Michael&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">props</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-命名空间" tabindex="-1"><a class="header-anchor" href="#util-命名空间"><span><code>util-命名空间</code></span></a></h3><p><code>util-命名空间</code>可以用来装配集合, 它有如下元素:</p><ul><li><code>util:list</code>: 创建一个<code>java.util.List</code>类型的<code>bean</code>, 其中包含值或引用</li><li><code>util:set</code>: 创建一个<code>java.util.Set</code>类型的<code>bean</code>, 其中包含值或引用</li><li><code>util:map</code>: 创建一个<code>java.util.Map</code>类型的<code>bean</code>, 其中包含值或引用</li><li><code>util:properties</code>: 创建一个<code>java.util.Properties</code>类型的<code>bean</code></li><li><code>util:property-path</code>: 引用一个<code>bean</code>的属性(或内嵌属性)，并将其暴露为<code>bean</code>(不太常用)</li><li><code>&lt;util:constant&gt;</code>: 引用某个类的<code>public static</code>域, 并将其暴露为<code>bean</code>(不太常用)</li></ul><p>例如:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">util:list</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;listBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Tom&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Michael&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">util:list</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">util:set</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;setBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Tom&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;Michael&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">util:set</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">util:map</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">entry</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;value1&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">entry</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;value2&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">util:map</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">util:properties</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;propertiesBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">&gt;value1&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">prop</span><span style="color:#B392F0;"> key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">&gt;value2&lt;/</span><span style="color:#85E89D;">prop</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">util:properties</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">util:properties</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#B392F0;"> location</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;classpath:config.properties&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),p=[o];function t(c,r){return l(),n("div",null,p)}const d=s(e,[["render",t],["__file","2017-09-30-Spring中的XML配置的写法.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2017-09-30-Spring%E4%B8%AD%E7%9A%84XML%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%99%E6%B3%95.html","title":"Spring中的XML配置的写法","lang":"zh-CN","frontmatter":{"title":"Spring中的XML配置的写法","date":"2017-09-30T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20170930,"description":"现在的Spring项目提倡无xml配置, 但是在一些老的项目中难免会遇见一些通过xml进行配置的地方, 这篇文章总结下通过xml来配置Bean的各种写法 构造器创建实例 构造器注入可以注入值, 也可以注入其他Bean的引用, 我们有两种配置方式可供选择, <constructor-arg>元素 和 c-命名空间 <constructor-arg>元素注...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2017-09-30-Spring%E4%B8%AD%E7%9A%84XML%E9%85%8D%E7%BD%AE%E7%9A%84%E5%86%99%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring中的XML配置的写法"}],["meta",{"property":"og:description","content":"现在的Spring项目提倡无xml配置, 但是在一些老的项目中难免会遇见一些通过xml进行配置的地方, 这篇文章总结下通过xml来配置Bean的各种写法 构造器创建实例 构造器注入可以注入值, 也可以注入其他Bean的引用, 我们有两种配置方式可供选择, <constructor-arg>元素 和 c-命名空间 <constructor-arg>元素注..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2017-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring中的XML配置的写法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"构造器创建实例","slug":"构造器创建实例","link":"#构造器创建实例","children":[{"level":3,"title":"<constructor-arg>元素注入","slug":"constructor-arg-元素注入","link":"#constructor-arg-元素注入","children":[]},{"level":3,"title":"c-命名空间注入","slug":"c-命名空间注入","link":"#c-命名空间注入","children":[]}]},{"level":2,"title":"工厂方法创建实例","slug":"工厂方法创建实例","link":"#工厂方法创建实例","children":[]},{"level":2,"title":"装配属性","slug":"装配属性","link":"#装配属性","children":[]},{"level":2,"title":"装配集合","slug":"装配集合","link":"#装配集合","children":[{"level":3,"title":"装配List、Set和Array","slug":"装配list、set和array","link":"#装配list、set和array","children":[]},{"level":3,"title":"装配Map","slug":"装配map","link":"#装配map","children":[]},{"level":3,"title":"装配Properties","slug":"装配properties","link":"#装配properties","children":[]},{"level":3,"title":"util-命名空间","slug":"util-命名空间","link":"#util-命名空间","children":[]}]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2017-09-30-Spring中的XML配置的写法.md","localizedDate":"2017年9月30日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
