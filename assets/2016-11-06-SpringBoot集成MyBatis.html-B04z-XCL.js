import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as l}from"./app-BZq5veQF.js";const e={},o=l(`<p>本文先介绍<code>Spring Boot</code>的数据源的配置, 然后介绍如何集成<code>MyBatis</code>(有两种方式)</p><h2 id="配置数据源" tabindex="-1"><a class="header-anchor" href="#配置数据源"><span>配置数据源</span></a></h2><p>Java的<code>javax.sql.DataSource</code>接口提供了标准的使用数据库连接的方法. 建立数据库连接只需要提供<code>URL</code>等相关参数, <code>Spring Boot</code>就可以创建数据源. 当然我们必须提供相应的包:<code>spring-boot-starter-data-jpa</code>, 这个包已经把<code>spring-boot-starter-jdbc</code>包含进来了.</p><p><code>Spring</code>提供了内嵌数据库的支持(包括<code>H2, HSQL, Derby</code>), 当我们使用内嵌数据库的时候, 连<code>URL</code>等这些配置都不需要了, 直接导入相应的数据库依赖包就可以, 比如使用<code>HSQL</code>, 只需添加pom依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.hsqldb&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;hsqldb&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;runtime&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不用内嵌数据库, 而是用<code>Mysql</code>的话, 就需要<code>URL</code>等配置, 然后在把<code>Mysql</code>相关的包依赖添加进来:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;mysql&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mysql-connector-java&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;runtime&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接池" tabindex="-1"><a class="header-anchor" href="#连接池"><span>连接池</span></a></h3><p>线上使用数据库通常都会通过数据库连接池, <code>Spring Boot</code>会按照下面的策略选取一个:</p><ul><li>Tomcat 连接池性能较高, <code>tomcat-jdbc</code>可用时优先选择(<code>spring-boot-starter-jdbc</code>里已经包含了<code>tomcat-jdbc</code>包)</li><li>如果<code>HikariCP</code>可用则选择它</li><li>如果<code>Commons DBCP</code>可用则使用它, 但不推荐</li><li>最后, 如果<code>Commons DBCP2</code>可用, 则使用它</li></ul><p>我们可以通过在应用配置的参数<code>spring.datasource.type</code>指定一个连接池, 比如使用阿里的德鲁伊(<code>Druid</code>):<code>spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</code>, 这个需要添加依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.alibaba&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;druid&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.18&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于数据源的配置, 可在应用配置文件<code>application.properties</code>中进行配置</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">spring.datasource.url</span><span style="color:#9ECBFF;">=jdbc:mysql://localhost/</span><span style="color:#79B8FF;">test</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.username</span><span style="color:#9ECBFF;">=dbuser</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.password</span><span style="color:#9ECBFF;">=dbpass</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Drive</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于不同连接池还有一些其他参数(<code>spring.datasource.tomcat.*</code>, <code>spring.datasource.hikari.*</code>), 比如:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># Number of ms to wait before throwing an exception if no connection is available.</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.tomcat.max-wait</span><span style="color:#9ECBFF;">=10000</span></span>
<span class="line"><span style="color:#6A737D;"># Maximum number of active connections that can be allocated from this pool at the same time.</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.tomcat.max-active</span><span style="color:#9ECBFF;">=50</span></span>
<span class="line"><span style="color:#6A737D;"># Validate the connection before borrowing it from the pool.</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.tomcat.test-on-borrow</span><span style="color:#9ECBFF;">=</span><span style="color:#79B8FF;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于数据源, 我们仅需要配置一下参数, <code>Spring Boot</code>已经自动帮我们配置了, 使用的时候直接注入就可以.</p><hr><h2 id="集成mybatis" tabindex="-1"><a class="header-anchor" href="#集成mybatis"><span>集成MyBatis</span></a></h2><p>我们可以使用传统的<code>mybatis-spring</code>的方式, 引入<code>mybatis</code>和<code>mybatis-spring</code>包, 手动配置<code>MyBatis</code>, 这种方式跟原来使用<code>Spring</code>框架时比较类似, 比较灵活, 可自行配置<code>SqlSessionFactoryBean</code>. 这是我们将用的第一种方式.</p><p><code>MyBatis</code>官方也提供了一个<code>starter</code>形式的包(<a href="https://github.com/mybatis/spring-boot-starter" target="_blank" rel="noopener noreferrer">GitHub地址</a>), 这个<code>starter</code>里已经包含了<code>mybatis</code>和<code>mybatis-spring</code>. 这是第二种方式, 这种方式更简单, 只需要在应用配置<code>application.yml</code>中添加配置即可.</p><p>不管哪种方式, 包依赖和数据源的配置少不了, 因此先把数据源配置(在<code>application.yml</code>中)贴出来:</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 数据库配置</span></span>
<span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    datasource</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">        url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">jdbc:mysql://10.90.187.120:3306/test?useUnicode=true&amp;characterEncoding=UTF-8</span></span>
<span class="line"><span style="color:#85E89D;">        username</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dbname</span></span>
<span class="line"><span style="color:#85E89D;">        password</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">dbpass</span></span>
<span class="line"><span style="color:#85E89D;">        driver-class-name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">com.mysql.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包依赖(第一种方式只要包含<code>mybatis</code>和<code>mybatis-spring</code>即可):</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.0&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mybatis-spring方式" tabindex="-1"><a class="header-anchor" href="#mybatis-spring方式"><span><code>mybatis-spring</code>方式</span></a></h3><p>这种方式不再需要额外的配置, 主配置类该怎么写还是怎么写, 另外我们专门为<code>MyBatis</code>添加两个配置类:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// com.example.project.config.MyBatisConfig.java 这个类是MyBatis的配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span><span style="color:#6A737D;">  // 不要忘记加配置注解</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span><span style="color:#6A737D;">  // 事务管理</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyBatisConfig</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> TransactionManagementConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(MyBatisConfig.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataSource dataSource;  </span><span style="color:#6A737D;">// 这个数据源, Spring boot 会自动注入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;sqlSessionFactory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">sqlSessionFactoryBean</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SqlSessionFactoryBean sqlSessionFactory </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionFactoryBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlSessionFactory.</span><span style="color:#B392F0;">setDataSource</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#6A737D;">        // 自动重命名</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlSessionFactory.</span><span style="color:#B392F0;">setTypeAliasesPackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.project.entity&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置 typeHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">        sqlSessionFactory.</span><span style="color:#B392F0;">setTypeHandlersPackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.project.typeHandler&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 添加拦截器插件 (如果有的话, 分页插件, 分表插件等)</span></span>
<span class="line"><span style="color:#6A737D;">//        sqlSessionFactory.setPlugins(new Interceptor[]{pageHelper});</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置 mapper 文件</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            ResourcePatternResolver resolver </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> PathMatchingResourcePatternResolver</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            sqlSessionFactory.</span><span style="color:#B392F0;">setMapperLocations</span><span style="color:#E1E4E8;">(resolver.</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:sqlmaps/*.xml&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> sqlSessionFactory.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;初始化SqlSessionFactory失败&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#F97583;">            throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionTemplate </span><span style="color:#B392F0;">sqlSessionTemplate</span><span style="color:#E1E4E8;">(SqlSessionFactory </span><span style="color:#FFAB70;">sqlSessionFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionTemplate</span><span style="color:#E1E4E8;">(sqlSessionFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> PlatformTransactionManager </span><span style="color:#B392F0;">annotationDrivenTransactionManager</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> DataSourceTransactionManager</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// com.example.project.config.MyBatisMapperScannerConfig.java 这个类用来设置自动扫描的路径</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#6A737D;">// MapperScannerConfigurer 执行的比较早, 所以要加下面这个注释, 不然其他 bean 还没初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AutoConfigureAfter</span><span style="color:#E1E4E8;">(MyBatisConfig.class)  </span><span style="color:#6A737D;">// 确保在 MyBatisConfig 初始化之后初始化</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyBatisMapperScannerConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> MapperScannerConfigurer </span><span style="color:#B392F0;">mapperScannerConfigurer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        MapperScannerConfigurer mapperScannerConfigurer </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> MapperScannerConfigurer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置自动扫描包, 该包下的Mapper(Dao)将会被mybatis自动注册, 不用写实现类</span></span>
<span class="line"><span style="color:#E1E4E8;">        mapperScannerConfigurer.</span><span style="color:#B392F0;">setBasePackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.project.dao&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        mapperScannerConfigurer.</span><span style="color:#B392F0;">setSqlSessionFactoryBeanName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sqlSessionFactory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> mapperScannerConfigurer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式, <code>MyBatis</code>就配置完了, 剩下的就是写实体和对应的Mapper(<code>Dao</code>)了.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// com.example.project.entity.User.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> UserCreditRecord</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Long id;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String age;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// com.example.project.dao.UserDao.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repository</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> UserDao</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   @</span><span style="color:#F97583;">Select</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;select * from user where id = #{id}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    User </span><span style="color:#B392F0;">getById</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">) Long </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当实体跟数据库中字段名字一致的时候没啥问题, 但实体字段跟数据库字段不一致时(比如一个驼峰, 一个用下划线)就比较麻烦了, 这种情况我们可以不使用注解形式, 而使用<code>User.xml</code>文件, 在文件中可以<code>select user_name as userName</code>也可以通过<code>resultMap</code>来制定数据库字段名<code>column</code>与实体属性名<code>property</code>的映射关系;</p><p>还有一个第三方<code>Mapper</code>插件, 可以完美解决这个问题, 参考<a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener noreferrer">这里</a></p><h3 id="mybatis-spring-boot-starter方式" tabindex="-1"><a class="header-anchor" href="#mybatis-spring-boot-starter方式"><span><code>mybatis-spring-boot-starter</code>方式</span></a></h3><p>这种方式就更简单了, 仅仅需要在应用配置文件<code>application.yml</code>添加一些配置:</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># mybatis 配置</span></span>
<span class="line"><span style="color:#85E89D;">mybatis</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    typeAliasesPackage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">com.example.project.entity</span></span>
<span class="line"><span style="color:#85E89D;">    typeHandlersPackage</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">com.example.project.handler</span><span style="color:#6A737D;">  # 如果有 typeHandler</span></span>
<span class="line"><span style="color:#85E89D;">    mapperLocations</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">classpath:sqlmaps/*.xml</span><span style="color:#6A737D;">          # mapper 文件</span></span>
<span class="line"><span style="color:#85E89D;">    configLocation</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">classpath:mybatis-config.xml</span><span style="color:#6A737D;">      # 可以不设置</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后从 main类 上添加注解:<code>@MapperScan(&quot;com.example.project.dao&quot;)</code>, 扫描Mapper(<code>Dao</code>)的位置即可. 其他的<code>Spring Boot</code>都帮我们做了, 接下来就专注于写<code>Dao</code>和<code>entity</code>就可以了.</p><p>注意上面的mybatis的配置文件<code>classpath:mybatis-config.xml</code>, 如果没有这个文件就不要配置, 要是配置了就保证存在, 网上找了个例子:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#F97583;">DOCTYPE</span><span style="color:#79B8FF;"> configuration</span><span style="color:#E1E4E8;"> PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">settings</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 这个配置使全局的映射器启用或禁用缓存。系统默认值是true --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;cacheEnabled&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 系统默认值是true --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;lazyLoadingEnabled&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 允许或不允许多种结果集从一个单独的语句中返回(需要适合的驱动)。 系统默认值是true --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;multipleResultSetsEnabled&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!--使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动。 系统默认值是true --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;useColumnLabel&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!--允许 JDBC 支持生成的键。需要适合的驱动。如果设置为 true 则这个设置强制生成的键被使用，尽管一些驱动拒绝兼容但仍然有效（比如Derby）。 系统默认值是false --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;useGeneratedKeys&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!--配置默认的执行器。SIMPLE 执行器没有什么特别之处。REUSE 执行器重用预处理语句。BATCH 执行器重用语句和批量更新 系统默认值是SIMPLE --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;defaultExecutorType&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;SIMPLE&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!--设置超时时间，它决定驱动等待一个数据库响应的时间。 系统默认值是null --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">setting</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;defaultStatementTimeout&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;25000&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">settings</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 设置插件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">plugin</span><span style="color:#B392F0;"> interceptor</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.github.pagehelper.PageHelper&quot;</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">&lt;!-- 这是一个第三方的分页插件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;reasonable&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;offsetAsPageNum&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;rowBoundsWithCount&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;pageSizeZero&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">plugin</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">plugins</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),p=[o];function t(c,r){return n(),a("div",null,p)}const d=s(e,[["render",t],["__file","2016-11-06-SpringBoot集成MyBatis.html.vue"]]),y=JSON.parse('{"path":"/program/code/2016-11-06-SpringBoot%E9%9B%86%E6%88%90MyBatis.html","title":"SpringBoot集成MyBatis","lang":"zh-CN","frontmatter":{"title":"SpringBoot集成MyBatis","date":"2016-11-06T00:00:00.000Z","category":"Spring","tag":["SpringBoot","MyBatis"],"order":-20161103,"description":"本文先介绍Spring Boot的数据源的配置, 然后介绍如何集成MyBatis(有两种方式) 配置数据源 Java的javax.sql.DataSource接口提供了标准的使用数据库连接的方法. 建立数据库连接只需要提供URL等相关参数, Spring Boot就可以创建数据源. 当然我们必须提供相应的包:spring-boot-starter-da...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2016-11-06-SpringBoot%E9%9B%86%E6%88%90MyBatis.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot集成MyBatis"}],["meta",{"property":"og:description","content":"本文先介绍Spring Boot的数据源的配置, 然后介绍如何集成MyBatis(有两种方式) 配置数据源 Java的javax.sql.DataSource接口提供了标准的使用数据库连接的方法. 建立数据库连接只需要提供URL等相关参数, Spring Boot就可以创建数据源. 当然我们必须提供相应的包:spring-boot-starter-da..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2016-11-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot集成MyBatis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"配置数据源","slug":"配置数据源","link":"#配置数据源","children":[{"level":3,"title":"连接池","slug":"连接池","link":"#连接池","children":[]}]},{"level":2,"title":"集成MyBatis","slug":"集成mybatis","link":"#集成mybatis","children":[{"level":3,"title":"mybatis-spring方式","slug":"mybatis-spring方式","link":"#mybatis-spring方式","children":[]},{"level":3,"title":"mybatis-spring-boot-starter方式","slug":"mybatis-spring-boot-starter方式","link":"#mybatis-spring-boot-starter方式","children":[]}]}],"git":{"createdTime":1719158757000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2016-11-06-SpringBoot集成MyBatis.md","localizedDate":"2016年11月6日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
