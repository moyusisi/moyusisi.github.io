import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,c as l,a as o,b as e,e as t,w as a,d as n,o as r}from"./app-Chd1FAL-.js";const s="/assets/BST-BCDk-Ihg.png",p="/assets/AVL_LL-D6pcB_sd.png",h="/assets/AVL_RR-Cb-9L4Rt.png",g="/assets/AVL_LR-f7lje5Ep.png",B="/assets/AVL_RL-B_UtZNqa.png",u="/assets/RBT-_kHBHFbk.png",_="/assets/RBT_1-CwIkXTB0.png",b="/assets/RBT_2-2EBWxKH1.png",m={},f=n('<p>经常见到的树有: <code>BST二叉排序树</code>, <code>AVL平衡二叉树</code>, <code>B树</code>, <code>B-树</code>, <code>B+树</code>, <code>B*树</code>, <code>RBT红黑树</code></p><h2 id="bst树" tabindex="-1"><a class="header-anchor" href="#bst树"><span>BST树</span></a></h2><p>二叉排序树, 也称二叉查找树(<code>Binary Search Tree</code>), 简称<code>BST</code>.</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>二叉排序树或者是一棵空树, 或者是一棵具有下列特性的非空二叉树:</p><ul><li>若左子树非空, 则左子树上所有结点关键字值均小于根结点的关键字值</li><li>若右子树非空, 则右子树上所有结点关键字值均大于根结点的关键字值</li><li>左右子树本身也分别是一颗二叉排序树</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>下图中左右两个都是二叉排序树</p><figure><img src="'+s+'" alt="BSTTree" tabindex="0" loading="lazy"><figcaption>BSTTree</figcaption></figure><h3 id="二叉排序树的查找" tabindex="-1"><a class="header-anchor" href="#二叉排序树的查找"><span>二叉排序树的查找</span></a></h3><p>从根结点开始进行关键字比较, 若相等, 则查找成功; 若不等, 如果查找的关键字小于根结点关键字, 去左子树中查找, 否则去右子树中查找. 若最后不再有子树, 查找失败.</p><h2 id="二叉排序树的插入" tabindex="-1"><a class="header-anchor" href="#二叉排序树的插入"><span>二叉排序树的插入</span></a></h2><p>与查找过程类似, 若待插入的<code>BST</code>树为空, 则直接插入; 若关键字<code>k</code>小于根结点关键字, 则插入到左子树, 否则插入到右子树</p><h3 id="二叉排序树的删除" tabindex="-1"><a class="header-anchor" href="#二叉排序树的删除"><span>二叉排序树的删除</span></a></h3><p>删除操作可以按下面情况处理</p><ol><li>若被删结点<code>z</code>是叶子结点, 则直接删除, 不会破坏二叉排序树的性质</li><li>若<code>z</code>只有一颗子树, 则让<code>z</code>的子树成为<code>z</code>父节点的子树, 即替代<code>z</code>的位置</li><li>若<code>z</code>有左右两棵子树, 则令<code>z</code>的直接前驱(即<code>z</code>左子树中最大的那个结点)替代<code>z</code>, 再从左子树中删除这个直接前驱, 这样就转化成了第一或第二中情况(因为<code>z</code>的直接前驱, 肯定没有右子树)</li></ol><h2 id="avl平衡二叉树" tabindex="-1"><a class="header-anchor" href="#avl平衡二叉树"><span>AVL平衡二叉树</span></a></h2><p><code>平衡二叉树</code>的发明者为<code>Georgy Adelson-Velsky</code>和<code>Evgenii Landis</code>, 所以也被称作<code>AVL树</code>. 在维基百科<a href="https://en.wikipedia.org/wiki/AVL_tree" target="_blank" rel="noopener noreferrer">AVL树的定义</a>中有这么一句话: <code>In computer science, an AVL tree is a self-balancing binary search tree.</code>, 所以<code>AVL平衡二叉树</code>是<code>BST二叉搜索树</code>的子集.</p><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h3><p>平衡二叉树或者是一棵空树, 或者是一棵具有下列特性的非空二叉树:</p><ul><li>它的左右子树高度差绝对值不超过1</li><li>它的左右子树都是平衡二叉树</li></ul><p>虽然<code>AVL平衡二叉树</code>的定义中并没有体现它是一个排序树, 但它是以<code>二叉排序树</code>为前提的</p><h3 id="平衡二叉树的插入" tabindex="-1"><a class="header-anchor" href="#平衡二叉树的插入"><span>平衡二叉树的插入</span></a></h3><p><code>二叉排序树</code>插入时, 只需要保证排序的特性, <code>平衡二叉树</code>的插入同时还需要保证插入结点之后仍然平衡.<br><code>平衡二叉树</code>的插入过程前半部分与<code>二叉排序树</code>相同, 但在新结点插入后, 如果破坏了某个结点的平衡, 则需要作出相应的调整. 一般可将失去平衡后进行调整的规律归纳为下列4种情况:</p><ul><li><code>LL平衡旋转</code>(<code>右单旋转</code>)。在结点<code>A</code>的左孩子(<code>L</code>)的左子树(<code>L</code>)上插入新结点, 导致以<code>A</code>为根的子树失去平衡, 此时需要做一次向右的旋转操作。将<code>A</code>的左孩子<code>B</code>向右上旋转代替<code>A</code>成为根结点, 将<code>A</code>结点向右下旋转成为<code>B</code>的右子树的根结点, 而<code>B</code>的原右子树则成为<code>A</code>的左子树。 过程如下图:</li></ul><figure><img src="'+p+'" alt="AVL_LL" tabindex="0" loading="lazy"><figcaption>AVL_LL</figcaption></figure><ul><li><code>RR平衡旋转</code>(<code>左单旋转</code>)。在结点<code>A</code>的右孩子(<code>R</code>)的右子树(<code>R</code>)上插入新结点, 导致以<code>A</code>为根的子树失去平衡, 此时需要做一次向左的旋转操作。将<code>A</code>的右孩子<code>B</code>向左上旋转代替<code>A</code>成为根结点, 将<code>A</code>结点向左下旋转成为<code>B</code>的左子树的根结点, 而<code>B</code>的原左子树则成为<code>A</code>的右子树。 过程如下图:</li></ul><figure><img src="'+h+'" alt="AVL_RR" tabindex="0" loading="lazy"><figcaption>AVL_RR</figcaption></figure><ul><li><code>LR平衡旋转</code>(<code>先左后右双旋转</code>)。在结点<code>A</code>的左孩子(<code>L</code>)的右子树(<code>R</code>)上插入新结点, 导致以<code>A</code>为根的子树失去平衡, 此时需要做两次旋转操作, 先左旋转后右旋转。将<code>A</code>的左孩子<code>B</code>的右子树的根结点<code>C</code>向左上旋转提升到<code>B</code>结点的位置, 然后再把<code>C</code>结点向右上旋转提升到<code>A</code>结点的位置。 过程如下图:</li></ul><figure><img src="'+g+'" alt="AVL_LR" tabindex="0" loading="lazy"><figcaption>AVL_LR</figcaption></figure><ul><li><code>RL平衡旋转</code>(<code>先右后左双旋转</code>)。在结点<code>A</code>的右孩子(<code>R</code>)的左子树(<code>L</code>)上插入新结点, 导致以<code>A</code>为根的子树失去平衡, 此时需要做两次旋转操作, 先右旋转后左旋转。将<code>A</code>的右孩子<code>B</code>的左子树的根结点<code>C</code>向右上旋转提升到<code>B</code>结点的位置, 然后再把<code>C</code>结点向左上旋转提升到<code>A</code>结点的位置。 过程如下图:</li></ul><figure><img src="'+B+'" alt="AVL_RL" tabindex="0" loading="lazy"><figcaption>AVL_RL</figcaption></figure><ul><li><code>注意</code>, 在<code>LR</code>和<code>RL</code>旋转时, 究竟新结点插入在<code>C</code>的左子树还是右子树上, 不影响旋转过程。</li></ul><h3 id="平衡二叉树的删除" tabindex="-1"><a class="header-anchor" href="#平衡二叉树的删除"><span>平衡二叉树的删除</span></a></h3><p><code>AVL</code>的删除过程前半部分与<code>BST</code>相同, 但删除结点后, 如果破坏了父结点的平衡, 则需要作出相应的调整, 调整方法与插入时的调整方法一样</p><h2 id="rbt红黑树" tabindex="-1"><a class="header-anchor" href="#rbt红黑树"><span>RBT红黑树</span></a></h2><p>红黑树(<code>Red Black Tree</code>)也是一种<code>二叉查找树</code>, 但在每个结点上增加一个存储位表示结点的颜色(<code>Red</code>或<code>Black</code>), 通过对每个结点着色, 使它满足一些性质, 这些性质共同来保证红黑树是基本上平衡的.</p><p><code>AVL</code>是严格平衡树, 因此在增加或者删除节点的时候, 根据不同情况, 旋转的次数比红黑树要多;<br><code>RBT</code>是弱平衡的, 用非严格的平衡来换取增删节点时候旋转次数的降低;<br> 所以简单说, 若搜索的次数远远大于插入和删除时, 选择<code>AVL树</code>; 若搜索、插入、删除次数几乎差不多, 应该选择<code>红黑树</code></p><h3 id="rbt的性质" tabindex="-1"><a class="header-anchor" href="#rbt的性质"><span>RBT的性质</span></a></h3><p>红黑树是每个结点都带有颜色属性的<code>二叉查找树</code>。 此外, 对于任何有效的红黑树必须满足以下特点:</p><ol><li>结点是红色或黑色</li><li>根结点是黑色</li><li>每个叶结点(空结点<code>NULL</code>)是黑色的</li><li>每个红色结点的两个子结点都是黑色(从每个叶子到根的所有路径上不能有两个连续的红色结点)</li><li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点</li></ol><p>这些特点共同限制了红黑树的关键性质: 从根到叶子的最长路径不多于最短路径的两倍长。这就保证了这个树大致上是平衡的。</p><ul><li>这些性质如何保证最长路径不多于最短路径的两倍长?</li></ul><p><code>性质5</code>保证根结点到叶结点的所有路径都有相同数目的黑色结点;<br><code>性质2</code>和<code>性质3</code>保证最长路径(从根开始)两头都是黑色的;<br><code>性质4</code>保证了路径不能有两个相连的红色结点, 最短路径都是黑色结点, 最长路径有交替的红色和黑色结点;<br> 这就表明了没有路径能多于其他路径的两倍长</p><h3 id="rbt示例" tabindex="-1"><a class="header-anchor" href="#rbt示例"><span>RBT示例</span></a></h3><figure><img src="'+u+'" alt="RBT" tabindex="0" loading="lazy"><figcaption>RBT</figcaption></figure><h3 id="红黑树的插入" tabindex="-1"><a class="header-anchor" href="#红黑树的插入"><span>红黑树的插入</span></a></h3><p>在对红黑树进行插入操作时, 我们一般总是插入 <strong>红色</strong> 的结点。因为插入黑结点会增加某条路径上黑结点的数目, 从而导致整棵树黑高度的不平衡。<br> 当插入红色结点时, 如果插入的结点是根结点, 会破坏<code>性质2</code>; 如果插入结点的父结点是红色, 则会破坏<code>性质4</code>, 这时就需要对红黑树做一些调整。所有可能的情况有4种:</p><ul><li><code>情况1</code>: 插入的是根结点(<code>空树</code>)。</li></ul><p>此时违反<code>性质2</code>, 直接把新结点改成黑色即可。</p><ul><li><code>情况2</code>: 插入的结点的父结点是黑色(<code>黑父</code>)。</li></ul><p>此时不会违反任何性质, 红黑树没有被破坏。</p><ul><li><code>情况3</code>: 父结点是红色(<code>红父</code>)。</li></ul><p>若父结点为红色, 祖父结点必定为黑色, 否则就不是红黑树了。<code>红父</code>这种情况破坏了<code>性质3</code>, 需要调整, 需要根据叔父结点(祖父的另一个孩子)的颜色来决定做什么样的操作, 这又分两种情况</p><ul><li><code>3.1</code>: 叔父结点为红色(<code>红父红叔</code>) <code>红父红叔</code>这种情况, 如下图所示, 无需旋转, 只要将父和叔结点变为黑色, 将祖父结点变为红色即可。<br> 但由于祖父结点的父结点有可能为红色, 从而违反红黑树性质, 此时必须将祖父结点作为新的判定点继续向上进行平衡操作。</li></ul><figure><img src="'+_+'" alt="红父红叔" tabindex="0" loading="lazy"><figcaption>红父红叔</figcaption></figure><p><strong>注意</strong> 这种情况, 无论<code>红叔</code>是在左边还是在右边, 操作都是一样的。</p><ul><li><code>3.2</code>: 叔父结点为黑色(<code>红父黑叔</code>) <code>红父黑叔</code>这种情况, 需要进行旋转, 有<code>LL, LR, RR, RL</code>等情况, 旋转方式与<code>AVL</code>类似。如图:</li></ul><figure><img src="'+b+'" alt="红父黑叔" tabindex="0" loading="lazy"><figcaption>红父黑叔</figcaption></figure><p><strong>注意</strong> 当旋转完成后, 就已经是红黑树了, 此时不需要再向上调整; 上面四张图的<code>叔、1、2、3</code>结点有可能为黑哨兵(<code>NULL</code>)结点。</p><h3 id="红黑树的删除" tabindex="-1"><a class="header-anchor" href="#红黑树的删除"><span>红黑树的删除</span></a></h3><p>红黑树本身是一棵二叉查找树, 它的删除和二叉查找树的删除类似。根据前面<code>BST</code>的删除操作可知, 真正删除的结点要么没有子树(情况1), 要么只有一颗子树(情况2、3)。所以真正删除的结点 <strong>只有一个孩子</strong> 或 <strong>没有孩子</strong>。 再结合<code>红黑树</code>的特点, 可以得出以下两个结论:</p><ol><li>真正被删除的必定是没有孩子的结点或只有一个红色孩子的结点</li><li>如果真正删除的结点是一个红色结点, 那么它必定是一个叶子结点</li></ol><p>根据这两个重要结论, 删除操作有以下情况:(<code>旧点</code>表示真正要删除的结点, <code>新点</code>表示旧结点的孩子结点)</p><ul><li><p><code>1.</code>旧点为红色: 根据<code>结论2</code>, 若<code>旧点</code>(真正要删除的结点)为红色, 则它必是叶子结点, 这种情况直接删除即可.</p></li><li><p><code>2.</code>一红一黑: 若<code>旧点</code>为黑色, <code>新点</code>为红色时, <code>新点</code>取代<code>旧点</code>位置后, 将<code>新点</code>染黑即可</p></li><li><p><code>3.</code>双黑: 当<code>旧点</code>和<code>新点</code>都为黑色时(<code>新点</code>为<code>NULL</code>时, 也属于这种情况), 情况比较复杂, 需要根据<code>旧点</code>兄弟结点的颜色来决定进行什么样的操作, 兄弟结点又分<code>红兄</code>和<code>黑兄</code>两种情况。情况略复杂, 具体可以参考<a href="http://blog.csdn.net/very_2/article/details/5722682" target="_blank" rel="noopener noreferrer">这篇文章</a></p></li></ul><h2 id="b树-b-树-b-树" tabindex="-1"><a class="header-anchor" href="#b树-b-树-b-树"><span>B树,B-树,B+树</span></a></h2><p><code>B树</code>又称<code>多路平衡查找树</code>或<code>多路平衡查找树</code>, 英文为<code>B-Tree</code>有的翻译成<code>B树</code>, 有的翻译为<code>B-树</code>, 两者是同一个东西.</p>',67),L=o("code",null,"B树",-1),A=o("code",null,"B+树",-1);function T(R,y){const c=i("RouteLink");return r(),l("div",null,[f,o("p",null,[e("关于"),L,e("和"),A,e(", "),t(c,{to:"/algorithm/2017-05-14-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.html"},{default:a(()=>[e("查找算法")]),_:1}),e("中已有详细介绍.")])])}const E=d(m,[["render",T],["__file","2017-06-20-数据结构中常见的树.html.vue"]]),V=JSON.parse('{"path":"/algorithm/2017-06-20-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A0%91.html","title":"数据结构中常见的树","lang":"zh-CN","frontmatter":{"title":"数据结构中常见的树","date":"2017-06-20T00:00:00.000Z","category":"Algorithm","tag":["数据结构"],"order":-20170620,"description":"经常见到的树有: BST二叉排序树, AVL平衡二叉树, B树, B-树, B+树, B*树, RBT红黑树 BST树 二叉排序树, 也称二叉查找树(Binary Search Tree), 简称BST. 定义 二叉排序树或者是一棵空树, 或者是一棵具有下列特性的非空二叉树: 若左子树非空, 则左子树上所有结点关键字值均小于根结点的关键字值 若右子树非...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/algorithm/2017-06-20-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"数据结构中常见的树"}],["meta",{"property":"og:description","content":"经常见到的树有: BST二叉排序树, AVL平衡二叉树, B树, B-树, B+树, B*树, RBT红黑树 BST树 二叉排序树, 也称二叉查找树(Binary Search Tree), 简称BST. 定义 二叉排序树或者是一棵空树, 或者是一棵具有下列特性的非空二叉树: 若左子树非空, 则左子树上所有结点关键字值均小于根结点的关键字值 若右子树非..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T01:13:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2017-06-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T01:13:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构中常见的树\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-06-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T01:13:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"BST树","slug":"bst树","link":"#bst树","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"二叉排序树的查找","slug":"二叉排序树的查找","link":"#二叉排序树的查找","children":[]}]},{"level":2,"title":"二叉排序树的插入","slug":"二叉排序树的插入","link":"#二叉排序树的插入","children":[{"level":3,"title":"二叉排序树的删除","slug":"二叉排序树的删除","link":"#二叉排序树的删除","children":[]}]},{"level":2,"title":"AVL平衡二叉树","slug":"avl平衡二叉树","link":"#avl平衡二叉树","children":[{"level":3,"title":"定义","slug":"定义-1","link":"#定义-1","children":[]},{"level":3,"title":"平衡二叉树的插入","slug":"平衡二叉树的插入","link":"#平衡二叉树的插入","children":[]},{"level":3,"title":"平衡二叉树的删除","slug":"平衡二叉树的删除","link":"#平衡二叉树的删除","children":[]}]},{"level":2,"title":"RBT红黑树","slug":"rbt红黑树","link":"#rbt红黑树","children":[{"level":3,"title":"RBT的性质","slug":"rbt的性质","link":"#rbt的性质","children":[]},{"level":3,"title":"RBT示例","slug":"rbt示例","link":"#rbt示例","children":[]},{"level":3,"title":"红黑树的插入","slug":"红黑树的插入","link":"#红黑树的插入","children":[]},{"level":3,"title":"红黑树的删除","slug":"红黑树的删除","link":"#红黑树的删除","children":[]}]},{"level":2,"title":"B树,B-树,B+树","slug":"b树-b-树-b-树","link":"#b树-b-树-b-树","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719191614000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":2}]},"filePathRelative":"algorithm/2017-06-20-数据结构中常见的树.md","localizedDate":"2017年6月20日","excerpt":"","autoDesc":true}');export{E as comp,V as data};
