import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as l,d as a}from"./app-DA1JdGe8.js";const e={},o=a(`<p>MyBatis的动态SQL是基于ONGL表达式的</p><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>if</span></a></h2><p>if一般是where的一部分，如</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;findBlog&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  SELECT * FROM BLOG WHERE 1 = 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title != null&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    AND title LIKE CONCAT(CONCAT(&#39;%&#39;, #{title}), &#39;%&#39;)</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- mysql也可以这样写：AND title LIKE &quot;%&quot;#{title}&quot;%&quot; --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="where" tabindex="-1"><a class="header-anchor" href="#where"><span>where</span></a></h2><p>像上面的例子，为了拼接sql，专门写了个 WHERE 1 = 1，<code>where</code>标签就能避免这样的问题，它会自动去除不该有的<code>AND</code>或<code>OR</code></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;findBlog&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  SELECT * FROM blog</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">where</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;state != null&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">         state = #{state}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title != null&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        AND title like #{title}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author != null and author.name != null&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        AND author_name like #{author.name}</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">where</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>set</span></a></h2><p>set元素主要是用在更新操作的时候，它会智能去掉最后的逗号。如果set中一个条件都不满足，则会报错。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">update</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;updateBlog&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    UPDATE blog  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">set</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title != null&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            title = #{title},  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content != null&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            content = #{content},  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">if</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;owner != null&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            owner = #{owner}  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">if</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">set</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    where id = #{id}  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">update</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="foreach" tabindex="-1"><a class="header-anchor" href="#foreach"><span>foreach</span></a></h2><p>foreach主要用在in语句中，它可以在SQL语句中遍历一个集合。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;foreachTest&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;java.util.List&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM blog WHERE id in  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">foreach</span><span style="color:#B392F0;"> collection</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#B392F0;"> item</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#B392F0;"> open</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#B392F0;"> separator</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#B392F0;"> close</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        #{item}  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">foreach</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 批量更新或插入, 若唯一键存在则更新, 不存在则插入 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;batchInsertOrUpdate&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UserInfo&quot;</span><span style="color:#B392F0;"> useGeneratedKeys</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#B392F0;"> keyProperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    INSERT INTO tableName (name, password, age, email, gender) VALUES</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">foreach</span><span style="color:#B392F0;"> collection</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#B392F0;"> item</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user&quot;</span><span style="color:#B392F0;"> separator</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      (#{user.name}, #{user.password}, #{user.age}, #{user.email}, #{user.gender})</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">foreach</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ON DUPLICATE KEY UPDATE name = VALUES(name);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>item</code>声明可以用在元素体内的集合项，相当于集合每一个元素进行迭代时的别名</li><li><code>index</code>声明可以用在元素体内的索引变量，即元素的位置。 <ul><li>比如上例中，如果list里面的元素为&quot;[3,6,9]&quot;，则&#39;item&#39;的值会分别为&quot;3,6,9&quot;，而<code>index</code>则分别为&quot;0,1,2&quot;</li></ul></li><li><code>open separator close</code>用于指定开闭匹配的字符串以及在迭代之间放置分隔符，如 &quot;(1,2,3,4)&quot;</li><li><code>collection</code>属性比较容易出错 <ul><li>当传入参数(parameterType)是单个参数且参数类型是一个List的时候，collection属性值为list，就像上面，传入参数<code>parameterType=&quot;java.util.List&quot;</code></li><li>当传入参数(parameterType)是单个参数且参数类型是一个array数组的时候，collection的属性值为array，比如<code>parameterType=&quot;[Ljava.lang.Integer;&quot;</code></li><li>传入的参数是多个的时候，肯定要先封装成一个Map，这个时候collection属性值就是传入的map中List或array数组类型的变量的key值，比如<code>parameterType=&quot;java.util.Map&quot;</code>，传入的map中有一个key为&quot;idList&quot;的List对象，则这个时候collection的属性值就应该是idList。</li></ul></li></ul><hr><h2 id="choose-when-otherwise" tabindex="-1"><a class="header-anchor" href="#choose-when-otherwise"><span>choose (when, otherwise)</span></a></h2><p>choose元素的作用就相当于JAVA中的switch语句</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;chooseTest&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM blog WHERE 1 = 1   </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">choose</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">when</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title != null&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            and title = #{title}  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">when</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">when</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content != null&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            and content = #{content}  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">when</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">otherwise</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">            and author = &quot;Michael&quot;  </span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">otherwise</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">choose</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,22),t=[o];function p(r,c){return l(),n("div",null,t)}const y=s(e,[["render",p],["__file","2015-01-24-MyBatis(四)动态SQL.html.vue"]]),d=JSON.parse('{"path":"/program/backend/2015-01-24-MyBatis(%E5%9B%9B)%E5%8A%A8%E6%80%81SQL.html","title":"MyBatis(四): 动态SQL","lang":"zh-CN","frontmatter":{"title":"MyBatis(四): 动态SQL","date":"2015-01-24T00:00:00.000Z","category":"Spring","tag":"MyBatis","order":-20150124,"description":"MyBatis的动态SQL是基于ONGL表达式的 if if一般是where的一部分，如 where 像上面的例子，为了拼接sql，专门写了个 WHERE 1 = 1，where标签就能避免这样的问题，它会自动去除不该有的AND或OR set set元素主要是用在更新操作的时候，它会智能去掉最后的逗号。如果set中一个条件都不满足，则会报错。 fore...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-01-24-MyBatis(%E5%9B%9B)%E5%8A%A8%E6%80%81SQL.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"MyBatis(四): 动态SQL"}],["meta",{"property":"og:description","content":"MyBatis的动态SQL是基于ONGL表达式的 if if一般是where的一部分，如 where 像上面的例子，为了拼接sql，专门写了个 WHERE 1 = 1，where标签就能避免这样的问题，它会自动去除不该有的AND或OR set set元素主要是用在更新操作的时候，它会智能去掉最后的逗号。如果set中一个条件都不满足，则会报错。 fore..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2015-01-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis(四): 动态SQL\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"if","slug":"if","link":"#if","children":[]},{"level":2,"title":"where","slug":"where","link":"#where","children":[]},{"level":2,"title":"set","slug":"set","link":"#set","children":[]},{"level":2,"title":"foreach","slug":"foreach","link":"#foreach","children":[]},{"level":2,"title":"choose (when, otherwise)","slug":"choose-when-otherwise","link":"#choose-when-otherwise","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-01-24-MyBatis(四)动态SQL.md","localizedDate":"2015年1月24日","excerpt":"","autoDesc":true}');export{y as comp,d as data};
