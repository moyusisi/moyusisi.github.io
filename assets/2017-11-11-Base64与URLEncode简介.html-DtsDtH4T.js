import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as l,d as e}from"./app-DQ46ret3.js";const s="/assets/base64-VQQMLbvb.png",o={},p=e('<h2 id="base64简介" tabindex="-1"><a class="header-anchor" href="#base64简介"><span>Base64简介</span></a></h2><p><code>Base64</code>是最常见的一种基于64个可打印字符来表示二进制数据的方法.</p><h3 id="base64原理" tabindex="-1"><a class="header-anchor" href="#base64原理"><span>Base64原理</span></a></h3><ul><li>首先, <code>Base64</code>基于64个可打印字符, 这64个字符有<code>A~Z</code>, <code>a~z</code>, <code>0~9</code>, <code>+</code>, <code>/</code></li></ul><blockquote><p><code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, ... &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, ... &#39;0&#39;, &#39;1&#39;, ... &#39;+&#39;, &#39;/&#39;]</code></p></blockquote><ul><li>然后, 对二进制数据进行处理, 每3个字节一组, 一共是<code>3x8=24bit</code>, 划为4组, 每组正好6个bit:</li></ul><figure><img src="'+s+'" alt="Base64" tabindex="0" loading="lazy"><figcaption>Base64</figcaption></figure><p>这样我们得到4个数字作为索引, 然后查表, 获得相应的4个字符, 就是编码后的字符串。<br><code>Base64</code>编码会把3字节的二进制数据编码为4字节的文本数据, 长度增加33%, 好处是编码后的文本数据可以在邮件正文、网页等直接显示。</p><ul><li>另外, 如果要编码的二进制数据不是3的倍数, 最后会剩下1个或2个字节, <code>Base64</code>会先用<code>\\x00</code>在末尾补足后, 再在编码的末尾加上1个或2个<code>=</code>, 表示补了多少字节, 解码的时候, 会自动去掉。</li></ul><figure><img src="'+s+`" alt="Base64" tabindex="0" loading="lazy"><figcaption>Base64</figcaption></figure><p>由于<code>=</code>在<code>URL、Cookie</code>里面会造成歧义, 所以, 很多<code>Base64</code>编码后会把<code>=</code>去掉。因为<code>Base64</code>是把3个字节变为4个字节, 所以, <code>Base64</code>编码的长度永远是4的倍数, 因此, 加上<code>=</code>把Base64字符串的长度变为4的倍数，就可以正常解码了。</p><h3 id="url-safe的base64编码" tabindex="-1"><a class="header-anchor" href="#url-safe的base64编码"><span>URL safe的Base64编码</span></a></h3><p>由于标准的<code>Base64</code>编码后可能出现字符<code>+</code>和<code>/</code>, 在URL中就不能直接作为参数, 所以又有一种<code>url safe</code>的<code>base64</code>编码, 其实就是把字符<code>+</code>和<code>/</code>分别变成<code>-</code>和<code>_</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">        // 下面这段代码来自于JDK1.8中的 java.util.Base64</span></span>
<span class="line"><span style="color:#6A737D;">        /**</span></span>
<span class="line"><span style="color:#6A737D;">         * This array is a lookup table that translates 6-bit positive integer</span></span>
<span class="line"><span style="color:#6A737D;">         * index values into their &quot;Base64 Alphabet&quot; equivalents as specified</span></span>
<span class="line"><span style="color:#6A737D;">         * in &quot;Table 1: The Base64 Alphabet&quot; of RFC 2045 (and RFC 4648).</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#F97583;">        private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#F97583;"> char</span><span style="color:#E1E4E8;">[] toBase64 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;A&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;E&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;F&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;G&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;H&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;I&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;J&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;K&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;L&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;M&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;N&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;P&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;R&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;S&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;T&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;U&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;V&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;W&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;X&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;f&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;j&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;m&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;n&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;u&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;6&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;7&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;8&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        /**</span></span>
<span class="line"><span style="color:#6A737D;">         * It&#39;s the lookup table for &quot;URL and Filename safe Base64&quot; as specified</span></span>
<span class="line"><span style="color:#6A737D;">         * in Table 2 of the RFC 4648, with the &#39;+&#39; and &#39;/&#39; changed to &#39;-&#39; and</span></span>
<span class="line"><span style="color:#6A737D;">         * &#39;_&#39;. This table is used when BASE64_URL is specified.</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#F97583;">        private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#F97583;"> char</span><span style="color:#E1E4E8;">[] toBase64URL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;A&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;E&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;F&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;G&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;H&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;I&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;J&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;K&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;L&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;M&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;N&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;P&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;R&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;S&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;T&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;U&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;V&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;W&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;X&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;f&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;j&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;m&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;n&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;u&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">            &#39;0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;6&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;7&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;8&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;_&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="base64工具类" tabindex="-1"><a class="header-anchor" href="#base64工具类"><span>Base64工具类</span></a></h3><ul><li>在<code>Guava</code>中有<code>BaseEncoding</code>类</li><li>在<code>JDK8</code>中有专门的工具类<code>java.util.Base64</code></li><li>在<code>JDK7中</code>也有<code>sun.misc.BASE64Encoder</code>和<code>sun.misc.BASE64Decoder</code>两个类</li><li>在<code>Spring</code>中, 也提供了一个<code>Base64Utils</code>, 它自动根据反射来决定是使用<code>Java 8</code>的 <code>java.util.Base64</code>还是<code>Apache Commons Codec</code>的<code>org.apache.commons.codec.binary.Base64</code></li><li>除了<code>JDK7</code>, 其他的工具类中都有<code>url safe</code>的<code>Base64</code>编码方法, 而且<code>JDK7</code>中会产生换行符!</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    // guava 工具类的使用</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testBase64</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 原串</span></span>
<span class="line"><span style="color:#E1E4E8;">        String origin </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // encode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encodeString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BaseEncoding.</span><span style="color:#B392F0;">base64</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(origin.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">        // decode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">(BaseEncoding.</span><span style="color:#B392F0;">base64</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(encodeString));</span></span>
<span class="line"><span style="color:#6A737D;">        // result = origin</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(origin, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // Spring 工具类的使用</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testBase64</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 原串</span></span>
<span class="line"><span style="color:#E1E4E8;">        String origin </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // encode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encodeString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Base64Utils.</span><span style="color:#B392F0;">encodeToString</span><span style="color:#E1E4E8;">(origin.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">        // decode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">(Base64Utils.</span><span style="color:#B392F0;">decodeFromString</span><span style="color:#E1E4E8;">(encodeString));</span></span>
<span class="line"><span style="color:#6A737D;">        // result = origin</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(origin, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // JDK8 工具类的使用</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testBase64</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 原串</span></span>
<span class="line"><span style="color:#E1E4E8;">        String origin </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // encode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encodeString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Base64.</span><span style="color:#B392F0;">getEncoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encodeToString</span><span style="color:#E1E4E8;">(origin.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">        // decode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">(Base64.</span><span style="color:#B392F0;">getDecoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(encodeString.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#6A737D;">        // result = origin</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(origin, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // JDK7 工具类的使用(解码时会抛出 IOException)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testBase64</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 原串</span></span>
<span class="line"><span style="color:#E1E4E8;">        String origin </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;abc&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // encode, 如果原串比较长, 这个方法得到的签名会有换行符, 所以最好不要用JDK7的这个工具</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encodeString </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> BASE64Encoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encodeBuffer</span><span style="color:#E1E4E8;">(origin.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">        // decode</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> BASE64Decoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">decodeBuffer</span><span style="color:#E1E4E8;">(encodeString));</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (IOException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Base64解码失败&quot;</span><span style="color:#E1E4E8;">, e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // result = origin</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(origin, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="urlencode简介" tabindex="-1"><a class="header-anchor" href="#urlencode简介"><span>URLEncode简介</span></a></h2><p><code>URLEncoder</code>和<code>URLDecoder</code>用于完成普通字符串和<code>application/x-www-form-urlencoded</code>MIME类型的字符串之间的相互转换</p><h3 id="编码规则" tabindex="-1"><a class="header-anchor" href="#编码规则"><span>编码规则</span></a></h3><p><code>application/x-www-form-urlencoded</code>类型会按照如下规则进行字符串转换</p><ul><li>字母(<code>a-z</code>, <code>A-Z</code>), 数字(<code>0-9</code>), 点(<code>.</code>), 星号(<code>*</code>), 横线(<code>-</code>), 下划线(<code>_</code>)不变</li><li>空格(<code></code>)变为加号(<code>+</code>)</li><li>其他字符变为<code>%XY</code>形式, <code>XY</code>是两位16进制数值</li><li>在每个<code>name=value</code>对之间放置<code>&amp;</code>符号(这条规则跟编码没关系)</li></ul><h3 id="urlencode工具类" tabindex="-1"><a class="header-anchor" href="#urlencode工具类"><span>URLEncode工具类</span></a></h3><p><code>JDK</code>自带了两个工具类 <code>URLEncoder</code>和<code>URLDecoder</code>, 下面是用法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testURLEncode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;*. -_~!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);     </span><span style="color:#6A737D;">// *. -_~!</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLEncoder.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(encode);  </span><span style="color:#6A737D;">// *.+-_%7E%21</span></span>
<span class="line"><span style="color:#E1E4E8;">        encode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLEncoder.</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(encode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(encode);  </span><span style="color:#6A737D;">// *.%2B-_%257E%2521</span></span>
<span class="line"><span style="color:#6A737D;">        // 注意编码两次是不一样的</span></span>
<span class="line"><span style="color:#E1E4E8;">        String decode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLDecoder.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(encode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(decode);  </span><span style="color:#6A737D;">// *.+-_%7E%21</span></span>
<span class="line"><span style="color:#E1E4E8;">        decode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> URLDecoder.</span><span style="color:#B392F0;">decode</span><span style="color:#E1E4E8;">(decode);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(decode);  </span><span style="color:#6A737D;">// *. -_~!</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><ul><li><a href="https://www.cnblogs.com/chengmo/archive/2014/05/18/3735917.html" target="_blank" rel="noopener noreferrer">Base64算法原理</a></li><li><a href="http://blog.csdn.net/justloveyou_/article/details/57156039" target="_blank" rel="noopener noreferrer">URLEncoder编码和解码</a></li></ul>`,27),c=[p];function r(E,t){return l(),a("div",null,c)}const y=n(o,[["render",r],["__file","2017-11-11-Base64与URLEncode简介.html.vue"]]),F=JSON.parse(`{"path":"/program/backend/2017-11-11-Base64%E4%B8%8EURLEncode%E7%AE%80%E4%BB%8B.html","title":"Base64与URLEncode简介","lang":"zh-CN","frontmatter":{"title":"Base64与URLEncode简介","date":"2017-11-11T00:00:00.000Z","tag":["Base64"],"order":-20171111,"description":"Base64简介 Base64是最常见的一种基于64个可打印字符来表示二进制数据的方法. Base64原理 首先, Base64基于64个可打印字符, 这64个字符有A~Z, a~z, 0~9, +, / ['A', 'B', 'C', ... 'a', 'b', 'c', ... '0', '1', ... '+', '/'] 然后, 对二进制数据进...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2017-11-11-Base64%E4%B8%8EURLEncode%E7%AE%80%E4%BB%8B.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Base64与URLEncode简介"}],["meta",{"property":"og:description","content":"Base64简介 Base64是最常见的一种基于64个可打印字符来表示二进制数据的方法. Base64原理 首先, Base64基于64个可打印字符, 这64个字符有A~Z, a~z, 0~9, +, / ['A', 'B', 'C', ... 'a', 'b', 'c', ... '0', '1', ... '+', '/'] 然后, 对二进制数据进..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Base64"}],["meta",{"property":"article:published_time","content":"2017-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Base64与URLEncode简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Base64简介","slug":"base64简介","link":"#base64简介","children":[{"level":3,"title":"Base64原理","slug":"base64原理","link":"#base64原理","children":[]},{"level":3,"title":"URL safe的Base64编码","slug":"url-safe的base64编码","link":"#url-safe的base64编码","children":[]},{"level":3,"title":"Base64工具类","slug":"base64工具类","link":"#base64工具类","children":[]}]},{"level":2,"title":"URLEncode简介","slug":"urlencode简介","link":"#urlencode简介","children":[{"level":3,"title":"编码规则","slug":"编码规则","link":"#编码规则","children":[]},{"level":3,"title":"URLEncode工具类","slug":"urlencode工具类","link":"#urlencode工具类","children":[]}]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2017-11-11-Base64与URLEncode简介.md","localizedDate":"2017年11月11日","excerpt":"","autoDesc":true}`);export{y as comp,F as data};
