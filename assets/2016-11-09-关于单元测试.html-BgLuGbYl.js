import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,d as l}from"./app-Cd603RD0.js";const e="/assets/unit_test_01-sae66-K6.png",o={},p=l('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>测试是开发过程中必不可少的, 但是实际工作中严格按照标准, 测试用例能够覆盖大部分业务逻辑的, 估计连一半都不到.</p><p>每天的工作流程应该是这样的:</p><ol><li>从<code>git</code>上把代码更新到本地, 跑通所有单元测试, 确保代码修改前是正确的</li><li>新增代码</li><li>对新增代码进行单元测试, 保证新增代码没有问题</li><li>提交到<code>git</code></li></ol><h3 id="关于测试工具" tabindex="-1"><a class="header-anchor" href="#关于测试工具"><span>关于测试工具</span></a></h3><p>单元测试主要使用<code>Junit</code>工具, 已经是很古老的技术了, 现在的<code>Junit4</code>直接通过注解就可以实现, 特别方便.</p><p>另一个测试的必备利器就是数据模拟工具<code>Mockito</code>. 假设我们在代码中有如下的调用关系:</p><p><img src="'+e+`" alt="类调用关系" loading="lazy"> 我们要对<code>A</code>进行单元测试的时候需要整个调用树都构建出来, 即<code>BCDE</code>的示例都需要, 但是显然我们只关心<code>A</code>, 这个时候我们可以使用<code>Mockito</code>模拟<code>BC</code>的返回, 使用<code>mock对象</code>来代替<code>BC</code>.</p><h2 id="junit使用详解" tabindex="-1"><a class="header-anchor" href="#junit使用详解"><span><code>Junit</code>使用详解</span></a></h2><p><code>Junit4</code>使用方式特别简单, 只需要加一些注解就可以. 下面对一些常用的注解进行简单说明:</p><ul><li><code>@Test</code>: 标识一个普通的测试方法, <code>@Test(timeout = 1000)</code>表示测试方法执行超过1000毫秒后算超时, 测试将失败; <code>@Test(expected = Exception.class)</code>表示测试方法期望得到的异常类, 如果方法执行没有抛出指定的异常, 则测试失败</li><li><code>@Before</code>: 初始化方法, 对每一个方法都执行一次</li><li><code>@BeforeClass</code>: 在所有测试方法前执行一次</li><li><code>@After</code>: 在每个测试方法后执行一次</li><li><code>@AfterClass</code>: 在所有测试方法后执行一次</li><li><code>@Ignore(&quot;not ready yet&quot;)</code>: 表示暂时不执行该测试方法</li><li><code>@RunWith</code>: 在JUnit中有很多个<code>Runner</code>, 他们负责调用你的测试代码, 该注解用于指定一个<code>Runner</code></li><li><code>@Suite.SuiteClasses</code>: 打包测试, 需要与<code>@RunWith(Suite.class)</code>联合使用, 比如下面的例子:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(Suite.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SuiteClasses</span><span style="color:#E1E4E8;">({ATest.class, BTest.class, CTest.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ABCSuite</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 类中不需要编写代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Parameterized.Parameters</code>: 参数化测试, 这个稍微复杂一些, 一般有这么几个条件: <ul><li>该类被注解为<code>@RunWith(Parameterized.class)</code></li><li>这个类有一个构造函数, 存储测试数据</li><li>这个类有一个静态方法生成并返回测试数据, 并注明<code>@Parameters</code>注解</li><li>这个类有一个测试, 它需要注解<code>@Test</code>到方法</li></ul></li></ul><p>下面是参数化测试的一个例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(Parameterized.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ParameterTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> boolean</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 该构造方法的参数与下面@Parameters注解的方法中的Object数组中值的顺序对应</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> ParameterTest</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">boolean</span><span style="color:#FFAB70;"> result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        super</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 将对参数构建出的每个对象都执行一遍, 即本例中将会执行三遍</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(name.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;小&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 相当于通过不通参数构建出了三个对象</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Parameterized</span><span style="color:#E1E4E8;">.Parameters</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Collection&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#6A737D;">        // Object 数组中值的顺序注意要和上面的构造方法ParameterTest的参数对应</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#F97583;"> Object</span><span style="color:#E1E4E8;">[][]{</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span><span style="color:#9ECBFF;">&quot;小明2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span><span style="color:#9ECBFF;">&quot;坏&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span><span style="color:#9ECBFF;">&quot;莉莉&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外单测中还常用到一些断言方法, 比较简单, 不再介绍.</p><h2 id="mockito使用详解" tabindex="-1"><a class="header-anchor" href="#mockito使用详解"><span><code>Mockito</code>使用详解</span></a></h2><p>使用<code>Mockito</code>可以设定当调用哪个对象的哪个方法时, 返回什么数据; 还可以验证调用了某对象的某方法几次.<br> 创建mock对象不能对<code>final, Anonymous, primitive类</code>进行mock</p><p>下面是一个简单的例子及相关说明</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testMock</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 创建mock对象，参数可以是类，也可以是接口</span></span>
<span class="line"><span style="color:#E1E4E8;">        List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> mock</span><span style="color:#E1E4E8;">(List.class);</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置方法的预期返回值</span></span>
<span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 当调用 list.get(0) 时, 将返回之前设置的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // junit 测试</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assert.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 设定方法返回某异常</span></span>
<span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">thenThrow</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test excpetion&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // stubbing 形式, doXXX 返回的是一个 Stubber 对象</span></span>
<span class="line"><span style="color:#B392F0;">        doReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(list).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 效果与最上面那个when一样</span></span>
<span class="line"><span style="color:#B392F0;">        doNothing</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">doThrow</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;void exception&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">when</span><span style="color:#E1E4E8;">(list).</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回 void 的方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        /**</span></span>
<span class="line"><span style="color:#6A737D;">         * 验证方法调用, 不关心返回值, 只关心调用了几次</span></span>
<span class="line"><span style="color:#6A737D;">         */</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 验证是否调用了 list.get(0)</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 默认调用一次,times(1)可以省略</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 验证调用三次</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">times</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 一次也没调用</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">never</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);       </span><span style="color:#6A737D;">// 一次也没调用, 同上</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">atLeastOnce</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 至少一次</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">atLeast</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">// 至少两次</span></span>
<span class="line"><span style="color:#B392F0;">        verify</span><span style="color:#E1E4E8;">(list, </span><span style="color:#B392F0;">atMost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// 最多5次</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数匹配器" tabindex="-1"><a class="header-anchor" href="#参数匹配器"><span>参数匹配器</span></a></h3><ul><li><code>Mockito</code>类继承于<code>Matchers</code></li><li><code>Matchers</code>类中有许多参数匹配器用于匹配一种类型, 比如<code>anyInt, anyString, anyMap...</code></li><li>如果使用参数匹配器, 那么所有的参数都要使用参数匹配器, 不能即有<code>get(0)</code>又有<code>get(anyInt())</code></li></ul><p>如下例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">anyInt</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">anyString</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(list.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloworld&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 再这么用, 就会报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot-test" tabindex="-1"><a class="header-anchor" href="#spring-boot-test"><span>Spring Boot Test</span></a></h2><p>与单元测试不通, 在Spring中需要初始化完整的应用程序上下文, 因此这种测试常称为集成测试.<br> Spring Boot提供了一个测试相关的starter:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-test&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在之前的Spring项目中使用<code>JUnit</code>测试时, 测试类是这样写的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringJUnit4ClassRunner.class)  </span><span style="color:#6A737D;">// Spring JUnit支持</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ContextConfiguration</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">classes</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Application.class)  </span><span style="color:#6A737D;">// 指定启动类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">WebAppConfiguration</span><span style="color:#6A737D;"> // 如果是Web项目, Junit需要模拟ServletContext, 因此需要加上这个注解</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ExampleServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在<code>Spring Boot 1.4</code>已经做了优化, 变成了这样:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">classes</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> Application.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ExampleServiceTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SpringRunner</code>是<code>SpringJUnit4ClassRunner</code>的新名字, 这个名字只是让名字看起来简单些.</li><li><code>SpringBootTest</code>将使用你的<code>SpringApplication</code>来创建<code>ApplicationContext</code>, <code>classes</code>属性可以不指定,会自动发现, 另外还有一个<code>webEnvironment</code>属性用于指定web的测试环境</li><li>在<code>Spring Boot 1.3</code>中的<code>@SpringApplicationConfiguration</code>和<code>@WebIntegrationTest</code>已经被废弃掉了, 被<code>@SpringBootTest</code>替代了</li></ul><h3 id="模仿和侦查" tabindex="-1"><a class="header-anchor" href="#模仿和侦查"><span>模仿和侦查</span></a></h3><p>在Spring项目中做测试的时候会发现大部分情况下都需要模拟特定的bean, 使某个bean的特定方法返回你想要的数据. 在Spring Boot中变的特别简单, 比如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootTest</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyTests</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">MockBean</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> RemoteService remoteService;  </span><span style="color:#6A737D;">// 这个bean是被mock出来的, 会替换掉spring中的那个bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Reverser reverser;  </span><span style="color:#6A737D;">// 这个bean是spring中的</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> exampleTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // RemoteService 已经被注入到了 reverser bean里了</span></span>
<span class="line"><span style="color:#B392F0;">        when</span><span style="color:#E1E4E8;">(remoteService.</span><span style="color:#B392F0;">someCall</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">thenReturn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mock&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String reverse </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> reverser.</span><span style="color:#B392F0;">reverseSomeCall</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@MockBean</code>是把原来的bean用mock的bean整个替换掉了, 而<code>@SpyBean</code>还会执行原来bean的方法, 但是后面可以mock想要的方法</p>`,36),t=[p];function c(i,r){return a(),n("div",null,t)}const y=s(o,[["render",c],["__file","2016-11-09-关于单元测试.html.vue"]]),u=JSON.parse('{"path":"/program/backend/2016-11-09-%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","title":"关于单元测试","lang":"zh-CN","frontmatter":{"title":"关于单元测试","date":"2016-11-09T00:00:00.000Z","category":"Spring","tag":["Junit"],"order":-20161109,"description":"前言 测试是开发过程中必不可少的, 但是实际工作中严格按照标准, 测试用例能够覆盖大部分业务逻辑的, 估计连一半都不到. 每天的工作流程应该是这样的: 从git上把代码更新到本地, 跑通所有单元测试, 确保代码修改前是正确的 新增代码 对新增代码进行单元测试, 保证新增代码没有问题 提交到git 关于测试工具 单元测试主要使用Junit工具, 已经是很...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-11-09-%E5%85%B3%E4%BA%8E%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"关于单元测试"}],["meta",{"property":"og:description","content":"前言 测试是开发过程中必不可少的, 但是实际工作中严格按照标准, 测试用例能够覆盖大部分业务逻辑的, 估计连一半都不到. 每天的工作流程应该是这样的: 从git上把代码更新到本地, 跑通所有单元测试, 确保代码修改前是正确的 新增代码 对新增代码进行单元测试, 保证新增代码没有问题 提交到git 关于测试工具 单元测试主要使用Junit工具, 已经是很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Junit"}],["meta",{"property":"article:published_time","content":"2016-11-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于单元测试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"关于测试工具","slug":"关于测试工具","link":"#关于测试工具","children":[]}]},{"level":2,"title":"Junit使用详解","slug":"junit使用详解","link":"#junit使用详解","children":[]},{"level":2,"title":"Mockito使用详解","slug":"mockito使用详解","link":"#mockito使用详解","children":[{"level":3,"title":"参数匹配器","slug":"参数匹配器","link":"#参数匹配器","children":[]}]},{"level":2,"title":"Spring Boot Test","slug":"spring-boot-test","link":"#spring-boot-test","children":[{"level":3,"title":"模仿和侦查","slug":"模仿和侦查","link":"#模仿和侦查","children":[]}]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-11-09-关于单元测试.md","localizedDate":"2016年11月9日","excerpt":"","autoDesc":true}');export{y as comp,u as data};
