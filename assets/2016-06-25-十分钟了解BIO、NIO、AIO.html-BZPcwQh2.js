import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,d as t}from"./app-DQ46ret3.js";const i="/assets/BIO-Kmwn_bS8.png",a="/assets/NIO-kW9i2aOQ.png",l="/assets/Multiplexing_IO-jEvpkfwX.png",d="/assets/AIO-rogAAFcL.png",n={},p=t('<p>本文内容涉及同步与异步, 阻塞与非阻塞, BIO、NIO、AIO等概念, 这块内容本身比较复杂, 很难用三言两语说明白. 而书上的定义更不容易理解是什么意思. 下面这些内容是按照我的理解, 以我认为尽可能简单易懂的语言组织出来, 希望能够帮助理解这些概念.</p><h2 id="同步与异步" tabindex="-1"><a class="header-anchor" href="#同步与异步"><span>同步与异步</span></a></h2><p><code>同步与异步</code>的概念, 关注的是 <strong>消息通信机制</strong></p><ul><li><code>同步</code>是指发出一个请求, 在没有得到结果之前该请求就不返回结果, 请求返回时, 也就得到结果了.</li></ul><p>比如洗衣服, 把衣服放在洗衣机里, 没有洗好之前我们一直看着, 直到洗好了才拿出来晾晒.</p><ul><li><code>异步</code>是指发出一个请求后, 立刻得到了回应, 但没有返回结果. 这时我们可以再处理别的事情(发送其他请求), 所以这种方式需要我们通过状态主动查看是否有了结果, 或者可以设置一个回调来通知调用者.</li></ul><p>比如洗衣服时, 把衣服放到洗衣机里, 我们就可以去做别的事情, 过会儿来看看有没有洗好(通过状态查询);<br> 或者我们设置洗衣机洗完后响铃来通知我们洗好了(回调通知)</p><h2 id="阻塞与非阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞与非阻塞"><span>阻塞与非阻塞</span></a></h2><p><code>阻塞与非阻塞</code>很容易和<code>同步与异步</code>混淆, 但两者关注点是不一样的. <code>阻塞与非阻塞</code>关注的是 <strong>程序在等待调用结果时的状态</strong></p><ul><li><code>阻塞</code>是指请求结果返回之前, 当前线程会被挂起(被阻塞), 这时线程什么也做不了</li><li><code>非阻塞</code>是指请求结果返回之前, 当前线程没有被阻塞, 仍然可以做其他事情.</li></ul><p><code>阻塞</code>有个明显的特征就是线程通常是处于<code>BLOCKED</code>状态(BIO中的<code>read()</code>操作时, 线程阻塞是JVM配合OS完成的, 此时Java获取到线程的状态仍是<code>RUNNABLE</code>但它确实已经被阻塞了)</p><p>如果要拿<code>同步</code>来做比较的话, 同步通信方式中的线程在发送请求之后等待结果这个过程中应该处于<code>RUNNABLE</code>状态, 同步必须一步一步来完成, 就像是代码必须执行完一行才能执行下一行, 所以必须等待这个请求返回之后才可进行下一个请求, 即使等待结果的时间长, 也是在执行这个请求的过程中. 而<code>异步</code>则不用等上一条执行完, 可以先执行别的代码, 等请求有了结果再来获取结果.</p><h2 id="io模型" tabindex="-1"><a class="header-anchor" href="#io模型"><span>IO模型</span></a></h2><p>Java中的IO操作是JVM配合操作系统来完成的. 对于一个IO的读操作, 数据会先被拷贝到操作系统内核的缓冲区中, 然后从操作系统内核的缓冲区拷贝到应用程序的地址空间. 所以整个过程可分为两个阶段:</p><ol><li>等待I/O数据准备好. 这取决于IO目标返回数据的速度, 如网络IO时看网速和数据本身的大小.</li><li>数据从内核缓冲区拷贝到进程内.</li></ol><p>根据这两个阶段, 产生了常见的几种不同的IO模型: <code>BIO</code>, <code>NIO</code>, <code>IO多路复用</code>和<code>AIO</code>.</p><h3 id="bio" tabindex="-1"><a class="header-anchor" href="#bio"><span>BIO</span></a></h3><p><code>BIO</code>即<code>Blocking I/O</code>(阻塞 I/O), BIO整个过程如下图:</p><figure><img src="'+i+'" alt="BIO" tabindex="0" loading="lazy"><figcaption>BIO</figcaption></figure><p>程序发送请求给内核, 然后由内核去进行通信, 在内核准备好数据之前这个线程是被挂起的, 所以在两个阶段程序都处于挂起状态.</p><ul><li>BIO的特点就是在IO执行的两个阶段都被block了</li></ul><h3 id="nio" tabindex="-1"><a class="header-anchor" href="#nio"><span>NIO</span></a></h3><p><code>NIO</code>即<code>Non-Blocking I/O</code>(非阻塞 I/O), NIO整个过程如下图:</p><figure><img src="'+a+'" alt="NIO" tabindex="0" loading="lazy"><figcaption>NIO</figcaption></figure><p>与BIO的明显区别是, 发起第一次请求后, 线程并没有被阻塞, 它反复检查数据是否准备好, 把原来大块不能用的阻塞时间分成了许多&quot;小阻塞&quot;(检查), 所以进程不断有机会被执行. 这个检查有没有准备好数据的过程有点类似于&quot;轮询&quot;.</p><ul><li>NIO的特点就是程序需要不断的主动询问内核数据是否准备好。第一个阶段非阻塞, 第二个阶段阻塞</li></ul><h3 id="io多路复用" tabindex="-1"><a class="header-anchor" href="#io多路复用"><span>IO多路复用</span></a></h3><p>IO多路复用(<code>I/O Multiplexing</code>)有<code>select</code>, <code>poll</code>, <code>epoll</code>等不同方式, 它的优点在于单个线程可以同时处理多个网络IO.</p><p><code>NIO</code>中轮询操作是用户线程进行的, 如果把这个任务交给其他线程, 则用户线程就不用这么费劲的查询状态了. <code>IO多路复用</code>调用系统级别的<code>select</code>或<code>poll</code>模型, 由系统进行监控IO状态. select轮询可以监控许多socket的IO请求, 当有一个socket的数据准备好时就可以返回.</p><ul><li>select: 注册事件由数组管理, 数组是有长度的, 32位机上限1024, 64位机上限2048. 轮询查找时需要遍历数组.</li><li>poll: 把select的数组采用链表实现, 因此没了最大数量的限制</li><li>epoll方式: 基于事件回调机制, 回调时直接通知进程, 无须使用某种方式来查看状态.</li></ul><p>多路复用IO过程图:</p><figure><img src="'+l+'" alt="Multiplexing_IO" tabindex="0" loading="lazy"><figcaption>Multiplexing_IO</figcaption></figure><p>用户线程有一段时间是阻塞的, 从上图来看, 与<code>NIO</code>很像, 但与NIO不一样的是, select不是等到所有数据准备好才返回, 而是只要有一个准备好就返回, 它的优势在于可以同时处理多个连接. 若连接不是很多的话, 它的效率不一定高, 可能还会更差.</p><p><code>Java 1.4</code>开始支持<code>NIO(New IO)</code>, 就是采用了这种方式, 在套接字上提供<code>selector</code>选择机制, 当发起<code>select()</code>时会阻塞等待至少一个事件返回.</p><ul><li>多路复用IO的特点是用户进程能同时等待多个IO请求, 系统来监控IO状态, 其中的任意一个进入读就绪状态, select函数就可以返回.</li></ul><h3 id="aio" tabindex="-1"><a class="header-anchor" href="#aio"><span>AIO</span></a></h3><p><code>AIO</code>即<code>Asynchronous I/O</code>(异步 I/O), 这是<code>Java 1.7</code>引入的<code>NIO 2.0</code>中用到的. 整个过程中, 用户线程发起一个系统调用之后无须等待, 可以处理别的事情. 由操作系统等待接收内容, 接收后把数据拷贝到用户进程中, 最后通知用户程序已经可以使用数据了, 两个阶段都是非阻塞的. AIO整个过程如下图:</p><figure><img src="'+d+'" alt="AIO" tabindex="0" loading="lazy"><figcaption>AIO</figcaption></figure><p><code>AIO</code>属于异步模型, 用户线程可以同时处理别的事情, 我们怎么进一步加工处理结果呢? Java在这个模型中提供了两种方法:</p><ol><li>一种是基于&quot;回调&quot;, 我们可以实现<code>CompletionHandler</code>接口, 在调用时把回调函数传递给对应的API即可</li><li>另一种是返回一个<code>Future</code>. 处理完别的事情, 可以通过<code>isDone()</code>可查看是否已经准备好数据, 通过<code>get()</code>方法等待返回数据.</li></ol><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>上面这几种模式, <code>BIO</code>整个过程都等待返回, <code>NIO</code>和<code>IO多路复用</code>在第二个阶段等待返回, 因此从整个过程来看, 这三个模式都属于同步方式. <code>AIO</code>在整个过程中没有等待返回, 属于异步方式.</p>',42),r=[p];function s(O,I){return c(),o("div",null,r)}const u=e(n,[["render",s],["__file","2016-06-25-十分钟了解BIO、NIO、AIO.html.vue"]]),m=JSON.parse('{"path":"/program/backend/2016-06-25-%E5%8D%81%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3BIO%E3%80%81NIO%E3%80%81AIO.html","title":"十分钟了解BIO、NIO、AIO","lang":"zh-CN","frontmatter":{"title":"十分钟了解BIO、NIO、AIO","date":"2016-06-25T00:00:00.000Z","category":"Java","tag":["Java"],"order":-20160625,"description":"本文内容涉及同步与异步, 阻塞与非阻塞, BIO、NIO、AIO等概念, 这块内容本身比较复杂, 很难用三言两语说明白. 而书上的定义更不容易理解是什么意思. 下面这些内容是按照我的理解, 以我认为尽可能简单易懂的语言组织出来, 希望能够帮助理解这些概念. 同步与异步 同步与异步的概念, 关注的是 消息通信机制 同步是指发出一个请求, 在没有得到结果之...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-06-25-%E5%8D%81%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3BIO%E3%80%81NIO%E3%80%81AIO.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"十分钟了解BIO、NIO、AIO"}],["meta",{"property":"og:description","content":"本文内容涉及同步与异步, 阻塞与非阻塞, BIO、NIO、AIO等概念, 这块内容本身比较复杂, 很难用三言两语说明白. 而书上的定义更不容易理解是什么意思. 下面这些内容是按照我的理解, 以我认为尽可能简单易懂的语言组织出来, 希望能够帮助理解这些概念. 同步与异步 同步与异步的概念, 关注的是 消息通信机制 同步是指发出一个请求, 在没有得到结果之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:05:57.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2016-06-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十分钟了解BIO、NIO、AIO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-06-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"同步与异步","slug":"同步与异步","link":"#同步与异步","children":[]},{"level":2,"title":"阻塞与非阻塞","slug":"阻塞与非阻塞","link":"#阻塞与非阻塞","children":[]},{"level":2,"title":"IO模型","slug":"io模型","link":"#io模型","children":[{"level":3,"title":"BIO","slug":"bio","link":"#bio","children":[]},{"level":3,"title":"NIO","slug":"nio","link":"#nio","children":[]},{"level":3,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":3,"title":"AIO","slug":"aio","link":"#aio","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]}]}],"git":{"createdTime":1719158757000,"updatedTime":1719158757000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-06-25-十分钟了解BIO、NIO、AIO.md","localizedDate":"2016年6月25日","excerpt":"","autoDesc":true}');export{u as comp,m as data};
