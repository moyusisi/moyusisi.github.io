import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,d as n}from"./app-DyxHq22R.js";const l={},o=n(`<p>Aviator是一个轻量级、高性能的Java表达式执行引擎, 本文内容主要来自于官方文档</p><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Aviator是一个高性能、轻量级的 java 语言实现的表达式求值引擎, 主要用于各种表达式的动态求值。现在已经有很多开源可用的 java 表达式求值引擎,为什么还需要 Avaitor 呢?<br> Aviator的设计目标是轻量级和高性能,相比于Groovy、JRuby的笨重, Aviator非常小, 加上依赖包也才450K,不算依赖包的话只有 70K; 当然, Aviator的语法是受限的, 它不是一门完整的语言, 而只是语言的一小部分集合。<br> 其次, Aviator的实现思路与其他轻量级的求值器很不相同, 其他求值器一般都是通过解释的方式运行, 而Aviator则是直接将表达式编译成Java 字节码, 交给JVM去执行。简单来说, Aviator的定位是介于Groovy这样的重量级脚本语言和IKExpression这样的轻量级表达式引擎 之间。<br> Aviator支持大部分运算操作符, 包括算术操作符、关系运算符、逻辑操作符、位运算符、正则匹配操作符(<code>=~</code>)、三元表达式(<code>?:</code>), 并且支持操作符的优先级和括号强制优先级, 具体请看后面的操作符列表, 支持自定义函数.</p><h2 id="包依赖" tabindex="-1"><a class="header-anchor" href="#包依赖"><span>包依赖</span></a></h2><p>Aviator依赖了<code>commons-beanutils</code>, 使用Aviator可以添加下面的maven依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;com.googlecode.aviator&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;aviator&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.3.3&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用手册" tabindex="-1"><a class="header-anchor" href="#使用手册"><span>使用手册</span></a></h2><h3 id="执行表达式" tabindex="-1"><a class="header-anchor" href="#执行表达式"><span>执行表达式</span></a></h3><p>Aviator的使用都是集中通过<code>com.googlecode.aviator.AviatorEvaluator</code>这个入口类来处理, 最简单的例子, 执行一个计算<code>1+2+3</code>的表达式:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> com.googlecode.aviator.AviatorEvaluator;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Long) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1+2+3&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>细心的朋友肯定注意到结果是<code>Long</code>,而不是<code>Integer</code>。这是因为<code>Aviator</code>的数值类型仅支持<code>Long</code>和<code>Double</code>, 任何整数都将转换成<code>Long</code>, 任何浮点数都将转换为<code>Double</code>, 包括用户传入的变量数值。这个例子的打印结果将是正确答案<code>6</code>。</p><h3 id="使用变量" tabindex="-1"><a class="header-anchor" href="#使用变量"><span>使用变量</span></a></h3><p>想让Aviator对你<code>say hello</code>吗? 很简单, 传入你的名字, 让Aviator负责字符串的相加:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String yourName </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;Michael&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yourName&quot;</span><span style="color:#E1E4E8;">, yourName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39;hello &#39; + yourName &quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// hello Michael</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子演示了怎么向表达式传入变量值, 表达式中的<code>yourName</code>是一个变量, 默认为<code>null</code>, 通过传入<code>Map&lt;String,Object&gt;</code>的变量绑定环境, 将<code>yourName</code>设置为你输入的名称。 <code>env</code> 的<code>key</code>是变量名, <code>value</code>是变量的值。<br> 上面例子中的<code>&#39;hello &#39;</code>是一个<code>Aviator</code>的<code>String</code>, <code>Aviator</code>的<code>String</code>是任何用单引号或者双引号括起来的字符序列, <code>String</code>可以比较大小(基于<code>unicode</code>顺序), 可以参与正则匹配, 可以与任何对象相加, 任何对象与<code>String</code>相加结果为<code>String</code>。 <code>String</code>中也可以有转义字符,如<code>\\n、\\\\、\\&#39;</code> 等。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39;a</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">b&#39; &quot;</span><span style="color:#E1E4E8;">);           </span><span style="color:#6A737D;">// 字符串 a&quot;b</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">a</span><span style="color:#79B8FF;">\\&#39;</span><span style="color:#9ECBFF;">b</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;"> &quot;</span><span style="color:#E1E4E8;">);         </span><span style="color:#6A737D;">// 字符串 a&#39;b</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39;hello &#39; + 3 &quot;</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// 字符串 hello 3</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39;hello &#39;+ unknow &quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 字符串 hello null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec-方法" tabindex="-1"><a class="header-anchor" href="#exec-方法"><span>exec 方法</span></a></h3><p>Aviator 2.2 开始新增加一个<code>exec</code>方法, 可以更方便地传入变量并执行, 而不需要构造<code>env</code>这个<code>map</code>了:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">String name </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;dennis&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39;hello &#39; + yourName &quot;</span><span style="color:#E1E4E8;">, name); </span><span style="color:#6A737D;">// hello dennis</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>只要在<code>exec</code>中按照变量在表达式中的出现顺序传入变量值就可以执行, 不需要构建<code>Map</code>了。</p><h3 id="调用函数" tabindex="-1"><a class="header-anchor" href="#调用函数"><span>调用函数</span></a></h3><p>Aviator 支持函数调用, 函数调用的风格类似 lua, 下面的例子获取字符串的长度:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;string.length(&#39;hello&#39;)&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>string.length(&#39;hello&#39;)</code>是一个函数调用, <code>string.length</code>是一个函数, <code>&#39;hello&#39;</code>是调用的参数。<br> 再用<code>string.substring</code>来截取字符串:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;string.contains(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">test</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, string.substring(&#39;hello&#39;, 1, 2))&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过<code>string.substring(&#39;hello&#39;, 1, 2)</code>获取字符串<code>&#39;e&#39;</code>, 然后通过函数<code>string.contains</code>判断<code>e</code>是否在<code>&#39;test&#39;</code>中。可以看到, 函数可以嵌套调用。<br> Aviator 的内置函数列表请看后面。</p><h3 id="自定义函数" tabindex="-1"><a class="header-anchor" href="#自定义函数"><span>自定义函数</span></a></h3><p>Aviator 除了内置的函数之外,还允许用户自定义函数,只要实现<code>com.googlecode.aviator.runtime.type.AviatorFunction</code>接口, 并注册到<code>AviatorEvaluator</code>即可使用. <code>AviatorFunction</code>接口十分庞大, 通常来说你并不需要实现所有的方法, 只要根据你的方法的参 数个数, 继承<code>AbstractFunction</code>类并<code>override</code>相应方法即可。</p><p>可以看一个例子,我们实现一个<code>add</code>函数来做数值的相加:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        //注册函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        AviatorEvaluator.</span><span style="color:#B392F0;">addFunction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> AddFunction</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add(1, 2)&quot;</span><span style="color:#E1E4E8;">));           </span><span style="color:#6A737D;">// 3.0</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;add(add(1, 2), 100)&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// 103.0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#B392F0;"> AddFunction</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> AbstractFunction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> AviatorObject </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">, AviatorObject </span><span style="color:#FFAB70;">arg1</span><span style="color:#E1E4E8;">, AviatorObject </span><span style="color:#FFAB70;">arg2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Number left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FunctionUtils.</span><span style="color:#B392F0;">getNumberValue</span><span style="color:#E1E4E8;">(arg1, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Number right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FunctionUtils.</span><span style="color:#B392F0;">getNumberValue</span><span style="color:#E1E4E8;">(arg2, env);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AviatorDouble</span><span style="color:#E1E4E8;">(left.</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> right.</span><span style="color:#B392F0;">doubleValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;add&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册函数通过<code>AviatorEvaluator.addFunction</code>方法, 移除可以通过<code>removeFunction</code>。</p><h3 id="编译表达式" tabindex="-1"><a class="header-anchor" href="#编译表达式"><span>编译表达式</span></a></h3><p>上面提到的例子都是直接执行表达式, 事实上 Aviator 背后都帮你做了编译并执行的工作。 你可以自己先编译表达式, 返回一个编译的结果, 然后传入不同的<code>env</code>来复用编译结果, 提高性能, 这是更推荐的使用方式:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String expression </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;a-(b-c)&gt;100&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // 编译表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">        Expression compiledExp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(expression);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">100.3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">45</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">199.100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 执行表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">        Boolean result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean) compiledExp.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(env);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>compile</code>方法可以将表达式编译成<code>Expression</code>的中间对象, 当要执行表达式的时候传入<code>env</code>并调用<code>Expression</code>的<code>execute</code>方法即可。 表达式中使用了括号来强制优先级, 这个例子还使用了<code>&gt;</code>用于比较数值大小, 比较运算符<code>!=、==、&gt;、&gt;=、&lt;、&lt;=</code>不仅可以用于数值, 也可以用于<code>String、Pattern、Boolean</code>等等, 甚至是任何用户传入的两个都实现了<code>java.lang.Comparable</code>接口的对象之间。</p><p>编译后的结果你可以自己缓存, 也可以交给 Aviator 帮你缓存, <code>AviatorEvaluator</code>内部有一个全局的缓存池, 如果你决定缓存编译结果, 可以通过:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Expression </span><span style="color:#B392F0;">compile</span><span style="color:#E1E4E8;">(String expression, </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> cached)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>将<code>cached</code>设置为<code>true</code>即可, 那么下次编译同一个表达式的时候将直接返回上一次编译的结果。<br> 使缓存失效通过:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> invalidateCache</span><span style="color:#E1E4E8;">(String expression)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方法。</p><h3 id="访问数组和集合" tabindex="-1"><a class="header-anchor" href="#访问数组和集合"><span>访问数组和集合</span></a></h3><p>可以通过中括号去访问数组和<code>java.util.List</code>对象, 可以通过<code>map.key</code>访问<code>java.util.Map</code>中<code>key</code>对应的<code>value</code>, 一个例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#F97583;">    final</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">    final</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    array[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    array[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    array[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">    final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Date</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Date</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">, list);</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;array&quot;</span><span style="color:#E1E4E8;">, array);</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;mmap&quot;</span><span style="color:#E1E4E8;">, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list[0]+list[1]&quot;</span><span style="color:#E1E4E8;">, env));   </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;array[0]+array[1]+array[2]=&#39; + (array[0]+array[1]+array[2])&quot;</span><span style="color:#E1E4E8;">, env));  </span><span style="color:#6A737D;">// array[0]+array[1]+array[2]=4</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;today is &#39; + mmap.date &quot;</span><span style="color:#E1E4E8;">, env));  </span><span style="color:#6A737D;">// today is Wed Feb 24 17:31:45 CST 2016</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三元操作符" tabindex="-1"><a class="header-anchor" href="#三元操作符"><span>三元操作符</span></a></h3><p>Aviator 不提供<code>if else</code>语句, 但是提供了三元操作符<code>?:</code>用于条件判断,使用上与 java 没有什么不同:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&gt;0? &#39;yes&#39;:&#39;no&#39;&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// yes</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Aviator 的三元表达式对于两个分支的结果类型并不要求一致,可以是任何类型,这一点与 java 不同。</p><h3 id="正则表达式匹配" tabindex="-1"><a class="header-anchor" href="#正则表达式匹配"><span>正则表达式匹配</span></a></h3><p>Aviator 支持类 Ruby 和 Perl 风格的表达式匹配运算,通过<code>=~</code>操作符, 如下面这个例子匹配 email 并提取用户名返回:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String email </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;killme2008@gmail.com&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email&quot;</span><span style="color:#E1E4E8;">, email);</span></span>
<span class="line"><span style="color:#E1E4E8;">    String username </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (String) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;email=~/([</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w0-8]+)@</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+[</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">w+]+/ ? $1 : &#39;unknow&#39; &quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(username); </span><span style="color:#6A737D;">// killme2008</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>email</code>与正则表达式<code>/([\\\\w0-8]+@\\\\w+[\\\\.\\\\w+]+)/</code>通过<code>=~</code>操作符来匹配,结果为一个 <code>Boolean</code> 类 型, 因此可以用于三元表达式判断,匹配成功的时候返回<code>$1</code>,指代正则表达式的分组 1,也就是用户名,否则返回<code>unknown</code>。</p><p>Aviator 在表达式级别支持正则表达式,通过<code>//</code>括起来的字符序列构成一个正则表达式,正则表 达式可以用于匹配(作为<code>=~</code>的右操作数)、比较大小,匹配仅能与字符串进行匹配。匹配成功后, Aviator 会自动将匹配成功的分组放入<code>$num</code>的变量中,其中<code>$0</code> 指代整个匹配的字符串,而<code>$1</code>表示第一个分组,以此类推。</p><p>Aviator 的正则表达式规则跟 Java 完全一样,因为内部其实就是使用<code>java.util.regex.Pattern</code>做编译的。</p><h3 id="变量的语法糖" tabindex="-1"><a class="header-anchor" href="#变量的语法糖"><span>变量的语法糖</span></a></h3><p>Aviator 有个方便用户使用变量的语法糖, 当你要访问变量<code>a</code>中的某个属性<code>b</code>, 那么你可以通过<code>a.b</code>访问到, 更进一步, <code>a.b.c</code>将访问变量<code>a</code>的<code>b</code>属性中的<code>c</code>属性值, 推广开来也就是说 Aviator 可以将变量声明为嵌套访问的形式。<br><code>TestAviator</code>类符合<code>JavaBean</code>规范, 并且是 <code>public</code> 的，我们就可以使用语法糖:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#F97583;">    float</span><span style="color:#E1E4E8;"> f;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Date date;</span></span>
<span class="line"><span style="color:#6A737D;">    // 构造方法</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#FFAB70;"> i</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">float</span><span style="color:#FFAB70;"> f</span><span style="color:#E1E4E8;">, Date </span><span style="color:#FFAB70;">date</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.f </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> f;</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.date </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> date;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // getter and setter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TestAviator foo </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TestAviator</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3.14f</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">, foo);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;foo.i = &#39;+foo.i&quot;</span><span style="color:#E1E4E8;">, env));   </span><span style="color:#6A737D;">// foo.i = 100</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;foo.f = &#39;+foo.f&quot;</span><span style="color:#E1E4E8;">, env));   </span><span style="color:#6A737D;">// foo.f = 3.14</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&#39;foo.date.year = &#39;+(foo.date.year+1990)&quot;</span><span style="color:#E1E4E8;">, env));  </span><span style="color:#6A737D;">// foo.date.year = 2106</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nil-对象" tabindex="-1"><a class="header-anchor" href="#nil-对象"><span>nil 对象</span></a></h3><p><code>nil</code>是 Aviator 内置的常量,类似 java 中的<code>null</code>,表示空的值。<code>nil</code>跟<code>null</code>不同的在于,在 java 中<code>null</code>只能使用在<code>==、!=</code>的比较运算符,而<code>nil</code>还可以使用<code>&gt;、&gt;=、&lt;、&lt;=</code>等比较运算符。 Aviator 规定,任何对象都比<code>nil</code>大除了<code>nil</code>本身。用户传入的变量如果为<code>null</code>,将自动以<code>nil</code>替代。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nil == nil&quot;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; 3&gt; nil&quot;</span><span style="color:#E1E4E8;">);      </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; true!= nil&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &#39; &#39;&gt;nil &quot;</span><span style="color:#E1E4E8;">);    </span><span style="color:#6A737D;">//true</span></span>
<span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; a==nil &quot;</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">//true, a 是 null</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>nil</code>与<code>String</code>相加的时候,跟 java 一样显示为 <code>null</code></p><h3 id="日期比较" tabindex="-1"><a class="header-anchor" href="#日期比较"><span>日期比较</span></a></h3><p>Aviator 并不支持日期类型,如果要比较日期,你需要将日期写字符串的形式,并且要求是形如 &quot;yyyy-MM-dd HH:mm:ss:SS&quot;的字符串,否则都将报错。 字符串跟<code>java.util.Date</code>比较的时候将自动转换为<code>Date</code>对象进行比较:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#F97583;">    final</span><span style="color:#E1E4E8;"> Date date </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String dateStr </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyy-MM-dd HH:mm:ss:SS&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(date);</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">, date);</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dateStr&quot;</span><span style="color:#E1E4E8;">, dateStr);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Boolean result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date==dateStr&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date &gt; &#39;2010-12-20 00:00:00:00&#39; &quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date &lt; &#39;2200-12-20 00:00:00:00&#39; &quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Boolean) AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date==date &quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说<code>String</code>除了能跟<code>String</code>比较之外,还能跟<code>nil</code>和<code>java.util.Date</code>对象比较。</p><h3 id="大数计算和精度" tabindex="-1"><a class="header-anchor" href="#大数计算和精度"><span>大数计算和精度</span></a></h3><p>从 2.3.0 版本开始,aviator 开始支持大数字计算和特定精度的计算, 本质上就是支持<code>java.math.BigInteger</code>和<code>java.math.BigDecimal</code>两种类型, 这两种类型在 aviator 中简称 为<code>big int</code>和<code>decimal</code>类型。 类似<code>99999999999999999999999999999999</code>这样的数字在 Java 语言里是没办法编译通过 的, 因为它超过了<code>Long</code>类型的范围, 只能用<code>BigInteger</code>来封装。但是 aviator 通过包装,可 以直接支持这种大整数的计算,例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;99999999999999999999999999999999 + 99999999999999999999999999999999&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果为类型<code>big int</code>的: <code>199999999999999999999999999999998</code></p><h4 id="字面量表示" tabindex="-1"><a class="header-anchor" href="#字面量表示"><span>字面量表示</span></a></h4><p><code>big int</code>和<code>decimal</code>的表示与其他数字不同,两条规则:</p><ul><li>以大写字母<code>N</code>为后缀的整数都被认为是<code>big int</code>,如<code>1N,2N,9999999999999999999999N</code>等, 都是<code>big int</code>类型。</li><li>超过<code>long</code>范围的整数字面量都将自动转换为<code>big int</code>类型。</li><li>以大写字母<code>M</code>为后缀的数字都被认为是<code>decimal</code>, 如<code>1M,2.222M, 100000.9999M</code>等, 都是<code>decimal</code>类型。</li></ul><p>用户也可以通过变量传入这两种类型来参与计算。</p><h4 id="运算" tabindex="-1"><a class="header-anchor" href="#运算"><span>运算</span></a></h4><p><code>big int</code>和<code>decimal</code>的运算,跟其他数字类型<code>long,double</code>没有什么区别,操作符仍然是一样的。 aviator重载了基本算术操作符来支持这两种新类型:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;9223372036854775807100.356M * 2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(rt </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot; &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> rt.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 18446744073709551614200.712 class java.math.BigDecimal</span></span>
<span class="line"><span style="color:#E1E4E8;">    rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;92233720368547758074+1000&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(rt </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot; &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> rt.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 92233720368547759074 class java.math.BigInteger</span></span>
<span class="line"><span style="color:#E1E4E8;">    BigInteger a </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> BigInteger</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(Long.MAX_VALUE) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(Long.MAX_VALUE));</span></span>
<span class="line"><span style="color:#E1E4E8;">    BigDecimal b </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3.2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    BigDecimal c </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> BigDecimal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;9999.99999&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a+10000000000000000000&quot;</span><span style="color:#E1E4E8;">, a);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(rt </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot; &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> rt.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 92233720368547758089223372036854775807 class java.math.BigInteger</span></span>
<span class="line"><span style="color:#E1E4E8;">    rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b+c*2&quot;</span><span style="color:#E1E4E8;">, b, c);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(rt </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot; &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> rt.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 20003.19998 class java.math.BigDecimal</span></span>
<span class="line"><span style="color:#E1E4E8;">    rt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a*b/c&quot;</span><span style="color:#E1E4E8;">, a, b, c);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(rt </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot; &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> rt.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 2.951479054745007313280155218459508E+34 class java.math.BigDecimal</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型转换和提升" tabindex="-1"><a class="header-anchor" href="#类型转换和提升"><span>类型转换和提升</span></a></h4><p>当<code>big int</code>或者<code>decimal</code>和其他类型的数字做运算的时候,按照<code>long &lt; big int &lt; decimal &lt; double</code>的规则做提升, 也就是说运算的数字如果类型不一致, 结果的类型为两者之间更“高”的类型。例如:</p><ul><li><code>1 + 3N</code>, 结果为<code>big int</code>的<code>4N</code></li><li><code>1 + 3.1M</code>,结果为<code>decimal</code>的<code>4.1M</code></li><li><code>1N + 3.1M</code>,结果为<code>decimal</code>的 <code>4.1M</code></li><li><code>1.0 + 3N</code>,结果为<code>double</code>的<code>4.0</code></li><li><code>1.0 + 3.1M</code>,结果为<code>double</code>的<code>4.1</code></li></ul><h4 id="decimal-的计算精度" tabindex="-1"><a class="header-anchor" href="#decimal-的计算精度"><span>decimal 的计算精度</span></a></h4><p>Java 的<code>java.math.BigDecimal</code>通过<code>java.math.MathContext</code>支持特定精度的计算,任何涉及到金额的计算都应该使用<code>decimal</code>类型。</p><p>默认 Aviator 的计算精度为<code>MathContext.DECIMAL128</code>,你可以自定义精度, 通过:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">setMathContext</span><span style="color:#E1E4E8;">(MathContext.DECIMAL64);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即可设置,更多关于<code>decimal</code>的精度问题请看<code>java.math.BigDecimal</code>的 javadoc 文档。</p><h3 id="强大的-seq-库" tabindex="-1"><a class="header-anchor" href="#强大的-seq-库"><span>强大的 seq 库</span></a></h3><p>aviator 拥有强大的操作集合和数组的 <code>seq</code> 库。整个库风格类似函数式编程中的高阶函数。在 aviator 中, 数组以及<code>java.util.Collection</code>下的子类都称为<code>seq</code>,可以直接利用 <code>seq</code> 库进行遍历、过滤和聚合等操作。</p><p>例如,假设我有个 <code>list</code>:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; env </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> ArrayList&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list&quot;</span><span style="color:#E1E4E8;">, list);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count(list)&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// 3</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;reduce(list,+,0)&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// 33</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;filter(list,seq.gt(9))&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// [10, 20]</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;include(list,10)&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">    result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sort(list)&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(result);  </span><span style="color:#6A737D;">// [3, 10, 20]</span></span>
<span class="line"><span style="color:#E1E4E8;">    AviatorEvaluator.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;map(list,println)&quot;</span><span style="color:#E1E4E8;">, env);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以:</p><ul><li>求长度: <code>count(list)</code></li><li>求和: <code>reduce(list,+,0)</code>, <code>reduce</code>函数接收三个参数,第一个是<code>seq</code>,第二个是聚合的函数,如<code>+</code>等,第三个是聚合的初始值</li><li>过滤: <code>filter(list,seq.gt(9))</code>, 过滤出<code>list</code>中所有大于<code>9</code>的元素并返回集合; <code>seq.gt</code>函数用于生成一个谓词,表示大于某个值</li><li>判断元素在不在集合里: <code>include(list,10)</code></li><li>排序: <code>sort(list)</code></li><li>遍历整个集合: <code>map(list,println)</code>, <code>map</code>接受的第二个函数将作用于集合中的每个元素,这里简单地调用<code>println</code>打印每个元素</li></ul><h3 id="两种运行模式" tabindex="-1"><a class="header-anchor" href="#两种运行模式"><span>两种运行模式</span></a></h3><p>默认 <code>AviatorEvaluator</code> 以执行速度优先:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">setOptimize</span><span style="color:#E1E4E8;">(AviatorEvaluator.EVAL);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你可以修改为编译速度优先,这样不会做编译优化:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">setOptimize</span><span style="color:#E1E4E8;">(AviatorEvaluator.COMPILE);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="调试信息" tabindex="-1"><a class="header-anchor" href="#调试信息"><span>调试信息</span></a></h3><p>从 2.1.1.版本开始,Aviator允许设置输出每个表达式生成的字节码,只要设置<code>trace</code>为<code>true</code>即可:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">setTrace</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方便用户做跟踪和调试。默认是输出到标准输出,你可以改变输出指向:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">AviatorEvaluator.</span><span style="color:#B392F0;">setTraceOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> FileOutputStream</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> File</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;aviator.log&quot;</span><span style="color:#E1E4E8;">)));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="语法手册" tabindex="-1"><a class="header-anchor" href="#语法手册"><span>语法手册</span></a></h2><p>下面是 Aviator 详细的语法规则定义。</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><ul><li><code>Number</code>类型: 数字类型,支持四种类型,分别是<code>long,double,java.math.BigInteger(简称 big int)</code>和<code>java.math.BigDecimal(简 称 decimal)</code>,规则如下: <ul><li>任何以大写字母 <code>N</code> 结尾的整数都被认为是 <code>big int</code></li><li>任何以大写字母 <code>M</code> 结尾的数字都被认为是 <code>decimal</code></li><li>其他的任何整数都将被转换为 <code>Long</code></li><li>其他任何浮点数都将被转换为 <code>Double</code></li><li>超过 <code>long</code> 范围的整数字面量都将自动转换为 <code>big int</code> 类型</li></ul></li></ul><p>其中 <code>big int</code> 和 <code>decimal</code> 是 2.3.0 版本开始引入的。数字还支持十六进制(以<code>0x</code>或者<code>0X</code>开头的数字), 以及科学计数法,如<code>1e-3</code>等。 不支持其他进制。</p><ul><li><code>String</code>类型: 字符串类型,单引号或者双引号括起来的文本串,如<code>&#39;hello world&#39;</code>, 变量如果传入的是<code>String</code>或者<code>Character</code>也将转为<code>String</code>类型</li><li><code>Bool</code>类型: 常量<code>true</code>和<code>false</code>,表示真值和假值,与 java 的<code>Boolean.TRUE</code>和<code>Boolean.False</code>对应</li><li><code>Pattern</code>类型: 正则表达式, 以<code>//</code>括起来的字符串,如<code>/\\d+/</code>,内部 实现为<code>java.util.Pattern</code></li><li>变量类型: 与 Java 的变量命名规则相同,变量的值由用户传入</li><li><code>nil</code>类型: 常量<code>nil</code>,类似 java 中的<code>null</code>,但是<code>nil</code>比较特殊,<code>nil</code>不仅可以参与<code>==、!=</code>的比较, 也可以参与<code>&gt;、&gt;=、&lt;、&lt;=</code>的比较,Aviator 规定任何类型都大于<code>nil</code>除了<code>nil</code>本身,<code>nil==nil</code>返回<code>true</code>。 用户传入的变量值如果为<code>null</code>,那么也将作为<code>nil</code>处理,<code>nil</code>打印为<code>null</code></li></ul><h3 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h3><h4 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h4><p>Aviator 支持常见的算术运算符,包括<code>+ - * / %</code>五个二元运算符,和一元运算符<code>-(负)</code>。其中<code>- * / %</code>和一元的<code>-</code>仅能作用于<code>Number</code>类型。<br><code>+</code>不仅能用于<code>Number</code>类型,还可以用于<code>String</code>的相加,或者字符串与其他对象的相加。<br> Aviator 规定,任何类型与<code>String</code>相加,结果为<code>String</code>。</p><h4 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h4><p>Avaitor 的支持的逻辑运算符包括,一元否定运算符<code>!</code>,以及逻辑与的<code>&amp;&amp;</code>,逻辑或的<code>||</code>。逻辑运算符的操作数只能为<code>Boolean</code>。<br><code>&amp;&amp;</code>和<code>||</code>都执行短路规则。</p><h4 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h4><p>Aviator 支持的关系运算符包括<code>&lt;, &lt;=, &gt;, &gt;=</code>以及<code>==</code>和<code>!=</code> 。<br> 关系运算符可以作用于<code>Number</code>之间、<code>String</code>之间、<code>Pattern</code>之间、<code>Boolean</code>之间、变量之间以及其他类型与<code>nil</code>之间的关系比较, 不同类型除了<code>nil</code>之外不能相互比较。</p><h4 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h4><p>Aviator 支持所有的 Java 位运算符,包括<code>&amp;, |, ^, ~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</code>。</p><h4 id="匹配运算符" tabindex="-1"><a class="header-anchor" href="#匹配运算符"><span>匹配运算符</span></a></h4><p>匹配运算符<code>=~</code>用于<code>String</code>和<code>Pattern</code>的匹配,它的左操作数必须为<code>String</code>,右操作数必须为<code>Pattern</code>。 匹配成功后,<code>Pattern</code>的分组将存于变量<code>$num</code>,<code>num</code>为分组索引。</p><h4 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符"><span>三元运算符</span></a></h4><p>Aviator 没有提供<code>if else</code>语句,但是提供了三元运算符<code>?:</code>,形式为<code>bool ? exp1: exp2</code>。 其中<code>bool</code>必须为<code>Boolean</code>类型的表达式, 而<code>exp1</code>和<code>exp2</code>可以为任何合法的 Aviator 表达式,并且不要求<code>exp1</code>和<code>exp2</code>返回的结果类型一致。</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数"><span>内置函数</span></a></h2><table><thead><tr><th style="text-align:left;">函数名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">sysdate()</td><td style="text-align:left;">返回当前日期对象 java.util.Date</td></tr><tr><td style="text-align:left;">rand()</td><td style="text-align:left;">返回一个介于 0-1 的随机数,double 类型</td></tr><tr><td style="text-align:left;">print([out],obj)</td><td style="text-align:left;">打印对象,如果指定 out,向 out 打印, 否则输出到控制台</td></tr><tr><td style="text-align:left;">println([out],obj)</td><td style="text-align:left;">与 print 类似,但是在输出后换行</td></tr><tr><td style="text-align:left;">now()</td><td style="text-align:left;">返回 System.currentTimeMillis</td></tr><tr><td style="text-align:left;">long(v)</td><td style="text-align:left;">将值的类型转为 long</td></tr><tr><td style="text-align:left;">double(v)</td><td style="text-align:left;">将值的类型转为 double</td></tr><tr><td style="text-align:left;">str(v)</td><td style="text-align:left;">将值的类型转为 string</td></tr><tr><td style="text-align:left;">date_to_string(date,format)</td><td style="text-align:left;">将 Date 对象转化化特定格式的字符串,2.1.1 新增</td></tr><tr><td style="text-align:left;">string_to_date(source,format)</td><td style="text-align:left;">将特定格式的字符串转化为 Date 对 象,2.1.1 新增</td></tr><tr><td style="text-align:left;">string.contains(s1,s2)</td><td style="text-align:left;">判断 s1 是否包含 s2,返回 Boolean</td></tr><tr><td style="text-align:left;">string.length(s)</td><td style="text-align:left;">求字符串长度,返回 Long</td></tr><tr><td style="text-align:left;">string.startsWith(s1,s2)</td><td style="text-align:left;">s1 是否以 s2 开始,返回 Boolean</td></tr><tr><td style="text-align:left;">string.endsWith(s1,s2)</td><td style="text-align:left;">s1 是否以 s2 结尾,返回 Boolean</td></tr><tr><td style="text-align:left;">string.substring(s,begin[,end])</td><td style="text-align:left;">截取字符串 s,从 begin 到 end,如果忽略 end 的话,将从 begin 到结尾,与 java.util.String.substring 一样。</td></tr><tr><td style="text-align:left;">string.indexOf(s1,s2)</td><td style="text-align:left;">java 中的 s1.indexOf(s2),求 s2 在 s1 中 的起始索引位置,如果不存在为-1</td></tr><tr><td style="text-align:left;">string.split(target,regex,[limit])</td><td style="text-align:left;">Java 里的 String.split 方法一致,2.1.1 新增函数</td></tr><tr><td style="text-align:left;">string.join(seq,seperator)</td><td style="text-align:left;">将集合 seq 里的元素以 seperator 为间隔 连接起来形成字符串,2.1.1 新增函数</td></tr><tr><td style="text-align:left;">string.replace_first(s,regex,replacement)</td><td style="text-align:left;">Java 里的 String.replaceFirst 方法, 2.1.1 新增</td></tr><tr><td style="text-align:left;">string.replace_all(s,regex,replacement)</td><td style="text-align:left;">Java 里的 String.replaceAll 方法 , 2.1.1 新增</td></tr><tr><td style="text-align:left;">math.abs(d)</td><td style="text-align:left;">求 d 的绝对值</td></tr><tr><td style="text-align:left;">math.sqrt(d)</td><td style="text-align:left;">求 d 的平方根</td></tr><tr><td style="text-align:left;">math.pow(d1,d2)</td><td style="text-align:left;">求 d1 的 d2 次方</td></tr><tr><td style="text-align:left;">math.log(d)</td><td style="text-align:left;">求 d 的自然对数</td></tr><tr><td style="text-align:left;">math.log10(d)</td><td style="text-align:left;">求 d 以 10 为底的对数</td></tr><tr><td style="text-align:left;">math.sin(d)</td><td style="text-align:left;">正弦函数</td></tr><tr><td style="text-align:left;">math.cos(d)</td><td style="text-align:left;">余弦函数</td></tr><tr><td style="text-align:left;">math.tan(d)</td><td style="text-align:left;">正切函数</td></tr><tr><td style="text-align:left;">map(seq,fun)</td><td style="text-align:left;">将函数 fun 作用到集合 seq 每个元素上, 返回新元素组成的集合</td></tr><tr><td style="text-align:left;">filter(seq,predicate)</td><td style="text-align:left;">将谓词 predicate 作用在集合的每个元素 上,返回谓词为 true 的元素组成的集合</td></tr><tr><td style="text-align:left;">count(seq)</td><td style="text-align:left;">返回集合大小</td></tr><tr><td style="text-align:left;">include(seq,element)</td><td style="text-align:left;">判断 element 是否在集合 seq 中,返回 boolean 值</td></tr><tr><td style="text-align:left;">sort(seq)</td><td style="text-align:left;">排序集合,仅对数组和 List 有效,返回排 序后的新集合</td></tr><tr><td style="text-align:left;">reduce(seq,fun,init)</td><td style="text-align:left;">fun 接收两个参数,第一个是集合元素, 第二个是累积的函数,本函数用于将 fun 作用在集合每个元素和初始值上面,返回 最终的 init 值</td></tr><tr><td style="text-align:left;">seq.eq(value)</td><td style="text-align:left;">返回一个谓词,用来判断传入的参数是否跟 value 相等,用于 filter 函数,如filter(seq,seq.eq(3)) 过滤返回等于3 的元素组成的集合</td></tr><tr><td style="text-align:left;">seq.neq(value)</td><td style="text-align:left;">与 seq.eq 类似,返回判断不等于的谓词</td></tr><tr><td style="text-align:left;">seq.gt(value)</td><td style="text-align:left;">返回判断大于 value 的谓词</td></tr><tr><td style="text-align:left;">seq.ge(value)</td><td style="text-align:left;">返回判断大于等于 value 的谓词</td></tr><tr><td style="text-align:left;">seq.lt(value)</td><td style="text-align:left;">返回判断小于 value 的谓词</td></tr><tr><td style="text-align:left;">seq.le(value)</td><td style="text-align:left;">返回判断小于等于 value 的谓词</td></tr><tr><td style="text-align:left;">seq.nil()</td><td style="text-align:left;">返回判断是否为 nil 的谓词</td></tr><tr><td style="text-align:left;">seq.exists()</td><td style="text-align:left;">返回判断不为 nil 的谓词</td></tr></tbody></table><h2 id="相关链接" tabindex="-1"><a class="header-anchor" href="#相关链接"><span>相关链接</span></a></h2><p><a href="https://github.com/killme2008/aviator" target="_blank" rel="noopener noreferrer">GitHub上的资料</a></p>`,122),t=[o];function p(c,r){return a(),e("div",null,t)}const E=s(l,[["render",p],["__file","2016-02-24-表达式引擎aviator.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2016-02-24-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BC%95%E6%93%8Eaviator.html","title":"表达式引擎aviator","lang":"zh-CN","frontmatter":{"title":"表达式引擎aviator","date":"2016-02-24T00:00:00.000Z","category":"Java","tag":["Aviator"],"order":-20160224,"description":"Aviator是一个轻量级、高性能的Java表达式执行引擎, 本文内容主要来自于官方文档 简介 Aviator是一个高性能、轻量级的 java 语言实现的表达式求值引擎, 主要用于各种表达式的动态求值。现在已经有很多开源可用的 java 表达式求值引擎,为什么还需要 Avaitor 呢? Aviator的设计目标是轻量级和高性能,相比于Groovy、J...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-02-24-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%BC%95%E6%93%8Eaviator.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"表达式引擎aviator"}],["meta",{"property":"og:description","content":"Aviator是一个轻量级、高性能的Java表达式执行引擎, 本文内容主要来自于官方文档 简介 Aviator是一个高性能、轻量级的 java 语言实现的表达式求值引擎, 主要用于各种表达式的动态求值。现在已经有很多开源可用的 java 表达式求值引擎,为什么还需要 Avaitor 呢? Aviator的设计目标是轻量级和高性能,相比于Groovy、J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:05:57.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Aviator"}],["meta",{"property":"article:published_time","content":"2016-02-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"表达式引擎aviator\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-02-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"包依赖","slug":"包依赖","link":"#包依赖","children":[]},{"level":2,"title":"使用手册","slug":"使用手册","link":"#使用手册","children":[{"level":3,"title":"执行表达式","slug":"执行表达式","link":"#执行表达式","children":[]},{"level":3,"title":"使用变量","slug":"使用变量","link":"#使用变量","children":[]},{"level":3,"title":"exec 方法","slug":"exec-方法","link":"#exec-方法","children":[]},{"level":3,"title":"调用函数","slug":"调用函数","link":"#调用函数","children":[]},{"level":3,"title":"自定义函数","slug":"自定义函数","link":"#自定义函数","children":[]},{"level":3,"title":"编译表达式","slug":"编译表达式","link":"#编译表达式","children":[]},{"level":3,"title":"访问数组和集合","slug":"访问数组和集合","link":"#访问数组和集合","children":[]},{"level":3,"title":"三元操作符","slug":"三元操作符","link":"#三元操作符","children":[]},{"level":3,"title":"正则表达式匹配","slug":"正则表达式匹配","link":"#正则表达式匹配","children":[]},{"level":3,"title":"变量的语法糖","slug":"变量的语法糖","link":"#变量的语法糖","children":[]},{"level":3,"title":"nil 对象","slug":"nil-对象","link":"#nil-对象","children":[]},{"level":3,"title":"日期比较","slug":"日期比较","link":"#日期比较","children":[]},{"level":3,"title":"大数计算和精度","slug":"大数计算和精度","link":"#大数计算和精度","children":[]},{"level":3,"title":"强大的 seq 库","slug":"强大的-seq-库","link":"#强大的-seq-库","children":[]},{"level":3,"title":"两种运行模式","slug":"两种运行模式","link":"#两种运行模式","children":[]},{"level":3,"title":"调试信息","slug":"调试信息","link":"#调试信息","children":[]}]},{"level":2,"title":"语法手册","slug":"语法手册","link":"#语法手册","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"操作符","slug":"操作符","link":"#操作符","children":[]}]},{"level":2,"title":"内置函数","slug":"内置函数","link":"#内置函数","children":[]},{"level":2,"title":"相关链接","slug":"相关链接","link":"#相关链接","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1719158757000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-02-24-表达式引擎aviator.md","localizedDate":"2016年2月24日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
