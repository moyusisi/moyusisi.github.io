import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as t,d as o}from"./app-CN8sbHCb.js";const n={},a=o(`<p>CSRF算是比较常见的Web攻击方式了，我们来看看它到底是什么。</p><h2 id="csrf简介" tabindex="-1"><a class="header-anchor" href="#csrf简介"><span>CSRF简介</span></a></h2><p>CSRF(Cross-site request forgery)学名叫跨站请求伪造。从名字上可看出来，跨站，至少涉及两个站点。<br> CSRF的流程是这样的:</p><ol><li>用户登录正常网站A</li><li>用户的登陆凭证被保存在了本地cookie中</li><li>用户未登出的情况下，同时又浏览了网站B(恶意网站)</li><li>B站私自访问了A站的某些操作(比如删除信息等)</li><li>A站检查到用户的登陆凭证，认为用户合法(删除信息这个操作就执行了)</li></ol><h2 id="攻击原理" tabindex="-1"><a class="header-anchor" href="#攻击原理"><span>攻击原理</span></a></h2><p>浏览器访问某站时，会携带该站保存在本地的cookie去请求该站的服务器。<br> 比如访问A站，就会携带A的cookie去请求A站的服务器。访问A站时，不会携带另一个站点的cookie信息。<br> 而CSRF攻击就是利用了这点，访问B站时，B站在用户不知情的情况下悄悄访问了A，这时就携带了A站的cookie，<br> A站检查cookie中的登陆凭证，认为正确，结果恶意操作就被当成正确操作执行了。</p><p>举个例子:<br> www.A.com站在用户登录后，会将登陆凭证保存在本地cookie中，A站有个删除个人信息的操作www.A.com/user/， 但需要一个参数:type(type=delete表示删除个人信息，type=modify表示修改个人信息等)。<br> 用户登录A站之后又访问了B站(恶意网站),B站中有这样一段代码:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">form</span><span style="color:#B392F0;"> action</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">www.A.com/user/</span><span style="color:#B392F0;"> method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;delete&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt; document.forms[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(); &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户访问了B结果B站悄悄向A提交了删除信息的操作(访问A会携带A的cookie)，这样就是CSRF攻击了。</p><hr><h2 id="防范方法" tabindex="-1"><a class="header-anchor" href="#防范方法"><span>防范方法</span></a></h2><p>防范的方法有许多，Token方式是最主流的。</p><h3 id="token" tabindex="-1"><a class="header-anchor" href="#token"><span>Token</span></a></h3><p>CSRF能攻击成功，根本原因是：操作所带的参数均被攻击者猜测到了。<br> 根据这个原因，我们就可以添加一个Token参数，其值是随机的，使攻击者不知道无法猜到。<br> 通过Token方式防范CSRF，实施起来可以有两种方式吧，一是通过session，二是通过cookie。</p><ul><li>通过session的方式</li></ul><p>服务端生成token，并保存在session中，然后拍给前端，放到hiddin域里。 下次请求时就会把token提交到服务端，服务端从session中取出token和hiddin域提交过来的token对比。</p><ul><li>通过cookie的方式</li></ul><p>服务端生成token，拍给前端放到hiddin域里，然后经过加密把密文放在cookie里。 下次请求时会把hiddin域中的token和cookie里的加密token都提交给服务器，服务器得到cookie里的加密token进行解密， 然后跟hiddin域提交过来的token进行对比。</p><h3 id="验证码" tabindex="-1"><a class="header-anchor" href="#验证码"><span>验证码</span></a></h3><p>验证码不仅可用来防止暴力破解，还可以有效防止CSRF的攻击。 但问题在于，不可能在用户的所有操作上都需要输入验证码。只有一些关键的操作，才能要求输入验证码。</p><h3 id="referer字段检查" tabindex="-1"><a class="header-anchor" href="#referer字段检查"><span>Referer字段检查</span></a></h3><p>当浏览器向web服务器发出请求的时候，在HTTP的请求头(Request Headers)中一般会带上Referer，告诉服务器用户从哪个站点链接过来的。 服务器通过判断请求头中的referer，也能避免CSRF的攻击。</p>`,22),l=[a];function r(p,i){return t(),s("div",null,l)}const h=e(n,[["render",r],["__file","2015-06-24-CSRF.html.vue"]]),m=JSON.parse('{"path":"/program/backend/2015-06-24-CSRF.html","title":"CSRF","lang":"zh-CN","frontmatter":{"title":"CSRF","date":"2015-06-24T00:00:00.000Z","category":"Web","tag":["CSRF"],"order":-20150624,"description":"CSRF算是比较常见的Web攻击方式了，我们来看看它到底是什么。 CSRF简介 CSRF(Cross-site request forgery)学名叫跨站请求伪造。从名字上可看出来，跨站，至少涉及两个站点。 CSRF的流程是这样的: 用户登录正常网站A 用户的登陆凭证被保存在了本地cookie中 用户未登出的情况下，同时又浏览了网站B(恶意网站) B站...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-06-24-CSRF.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"CSRF"}],["meta",{"property":"og:description","content":"CSRF算是比较常见的Web攻击方式了，我们来看看它到底是什么。 CSRF简介 CSRF(Cross-site request forgery)学名叫跨站请求伪造。从名字上可看出来，跨站，至少涉及两个站点。 CSRF的流程是这样的: 用户登录正常网站A 用户的登陆凭证被保存在了本地cookie中 用户未登出的情况下，同时又浏览了网站B(恶意网站) B站..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"CSRF"}],["meta",{"property":"article:published_time","content":"2015-06-24T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSRF\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-06-24T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"CSRF简介","slug":"csrf简介","link":"#csrf简介","children":[]},{"level":2,"title":"攻击原理","slug":"攻击原理","link":"#攻击原理","children":[]},{"level":2,"title":"防范方法","slug":"防范方法","link":"#防范方法","children":[{"level":3,"title":"Token","slug":"token","link":"#token","children":[]},{"level":3,"title":"验证码","slug":"验证码","link":"#验证码","children":[]},{"level":3,"title":"Referer字段检查","slug":"referer字段检查","link":"#referer字段检查","children":[]}]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-06-24-CSRF.md","localizedDate":"2015年6月24日","excerpt":"","autoDesc":true}');export{h as comp,m as data};
