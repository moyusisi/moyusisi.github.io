import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as e}from"./app-4MUv-ZKY.js";const o={},t=e(`<p><code>Sprign boot</code>提供了内嵌的<code>tomcat</code>, 允许我们直接把项目打包成<code>fat jar</code>来运行. 但有时候我们仍想像之前一样,使用外部的<code>tomcat</code>, 将项目打成<code>war</code>包来发布. <code>Spring boot</code>同样提供了非常简单的解决方案</p><p>第一步, 在<code>pom</code>中添加<code>&lt;packaging&gt;war&lt;/packaging&gt;</code>标签</p><p>第二步, 主配置类<code>Application.java</code>继承<code>SpringBootServletInitializer</code>并重写<code>configure</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Application</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> SpringBootServletInitializer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#E1E4E8;"> SpringApplicationBuilder </span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">(SpringApplicationBuilder </span><span style="color:#FFAB70;">builder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> builder.</span><span style="color:#B392F0;">sources</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SpringApplication springApplication </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SpringApplication</span><span style="color:#E1E4E8;">(Application.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        springApplication.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(args);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步, 修改pom, 把内嵌tomcat改成<code>provided</code>. 这样我们可以很方便的切换成在本地通过<code>main</code>方法来启动应用(去掉<code>provided</code>就可以了).</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-tomcat&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;provided&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这三步就可以像原来一样打包部署到外部<code>tomcat</code>了</p>`,7),p=[t];function l(c,r){return n(),a("div",null,p)}const E=s(o,[["render",l],["__file","2016-11-21-SpringBoot在外部tomcat的部署.html.vue"]]),m=JSON.parse('{"path":"/program/backend/2016-11-21-SpringBoot%E5%9C%A8%E5%A4%96%E9%83%A8tomcat%E7%9A%84%E9%83%A8%E7%BD%B2.html","title":"SpringBoot在外部tomcat的部署","lang":"zh-CN","frontmatter":{"title":"SpringBoot在外部tomcat的部署","date":"2016-11-21T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20161121,"description":"Sprign boot提供了内嵌的tomcat, 允许我们直接把项目打包成fat jar来运行. 但有时候我们仍想像之前一样,使用外部的tomcat, 将项目打成war包来发布. Spring boot同样提供了非常简单的解决方案 第一步, 在pom中添加<packaging>war</packaging>标签 第二步, 主配置类Application...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-11-21-SpringBoot%E5%9C%A8%E5%A4%96%E9%83%A8tomcat%E7%9A%84%E9%83%A8%E7%BD%B2.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot在外部tomcat的部署"}],["meta",{"property":"og:description","content":"Sprign boot提供了内嵌的tomcat, 允许我们直接把项目打包成fat jar来运行. 但有时候我们仍想像之前一样,使用外部的tomcat, 将项目打成war包来发布. Spring boot同样提供了非常简单的解决方案 第一步, 在pom中添加<packaging>war</packaging>标签 第二步, 主配置类Application..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2016-11-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot在外部tomcat的部署\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-11-21-SpringBoot在外部tomcat的部署.md","localizedDate":"2016年11月21日","excerpt":"","autoDesc":true}');export{E as comp,m as data};
