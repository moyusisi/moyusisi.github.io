import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,a as n,b as s,e as c,w as r,d as t}from"./app-DyxHq22R.js";const i={},E=n("code",null,"MyBatis",-1),y=t(`<h2 id="多数据源配置" tabindex="-1"><a class="header-anchor" href="#多数据源配置"><span>多数据源配置</span></a></h2><p>假设我们有三个数据源, 配置这三个数据源的方法非常简单, 首先在<code>application.properties</code>文件中添加这三个数据源的相关配置:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 默认数据源</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db0</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 数据源db1配置</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db1</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 数据源db2配置</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db2</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以通过一个配置类把这三个数据源加到spring容器中:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DataSourceConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;datasource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Primary</span><span style="color:#6A737D;">  // 这个注解表示主数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;spring.datasource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">datasource</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">        // 这里也可以使用其他连接池, 比如 DruidDataSource</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> DruidDataSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;custom.datasource.ds1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">ds1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> DataSourceBuilder.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;custom.datasource.ds2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">ds2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> DataSourceBuilder.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多数据源的配置就这么简单, 在用到的地方可以直接通过数据源的<code>name</code>注入, 下面介绍如何配合使用多数据源.</p><h2 id="mybatis使用多数据源" tabindex="-1"><a class="header-anchor" href="#mybatis使用多数据源"><span>MyBatis使用多数据源</span></a></h2><p>先交代下场景. 假设我们有两个数据源(就用上面的ds0和ds1), 除了数据源的配置文件跟原来不一样, 其他跟普通的<code>MyBatis</code>项目一样(SQL映射文件暂时不用注解, 还是使用mapper映射文件来写sql). 相关的文件和目录结构如下:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 源码目录结构 父目录为: com.example.demo</span></span>
<span class="line"><span style="color:#B392F0;">+-</span><span style="color:#9ECBFF;"> Application.java</span></span>
<span class="line"><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#B392F0;">+-</span><span style="color:#9ECBFF;"> config</span><span style="color:#6A737D;">  # 这是数据源的配置</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> DS0Config.java</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> DS1Config.java</span></span>
<span class="line"><span style="color:#F97583;">|</span></span>
<span class="line"><span style="color:#B392F0;">+-</span><span style="color:#9ECBFF;"> dao</span><span style="color:#6A737D;">  # 这是Mapper映射接口, 分别放到两个目录里</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> ds0</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#F97583;">   |</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> Test0Dao.java</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> ds1</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#F97583;">   |</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> Test1Dao.java</span></span>
<span class="line"><span style="color:#6A737D;"># 资源文件</span></span>
<span class="line"><span style="color:#B392F0;">resource/sqlmaps</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> ds0</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#F97583;">   |</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> test0.xml</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> ds1</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#F97583;">   |</span><span style="color:#B392F0;">   +-</span><span style="color:#9ECBFF;"> test1.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何配置<code>MyBatis</code>之前的文章已经做过介绍, 这里只看两个配置类是如何写的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// DS0Config.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MapperScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;com.example.demo.dao.ds0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">sqlSessionFactoryRef</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;ds0SqlSessionFactory&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DS0Config</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Primary</span><span style="color:#6A737D;">  // 这个数据源设置为主要数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;spring.datasource&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">ds0</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> DruidDataSource</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span><span style="color:#6A737D;">  // 如果这里不用 Qualifier 指定, 则注入的是Primary数据源</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">ds0SqlSessionFactory</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds0&quot;</span><span style="color:#E1E4E8;">) DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SqlSessionFactoryBean sessionFactory </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionFactoryBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setDataSource</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#6A737D;">        // 领域模型包位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setTypeAliasesPackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.demo.domain&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置映射文件的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setMapperLocations</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> PathMatchingResourcePatternResolver</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:sqlmaps/ds0/*.xml&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> sessionFactory.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionTemplate </span><span style="color:#B392F0;">ds0SqlSessionTemplate</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds0SqlSessionFactory&quot;</span><span style="color:#E1E4E8;">) SqlSessionFactory </span><span style="color:#FFAB70;">sqlSessionFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionTemplate</span><span style="color:#E1E4E8;">(sqlSessionFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// DS1Config.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MapperScan</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">basePackages</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;com.example.demo.dao.ds1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">sqlSessionFactoryRef</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;ds1SqlSessionFactory&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 这个包里的mapp使用的是ds1数据源</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DS1Config</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;custom.datasource.ds1&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 自动会把属性注入到对应的字段</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> DataSource </span><span style="color:#B392F0;">ds0</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">       return</span><span style="color:#E1E4E8;"> DataSourceBuilder.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">ds1SqlSessionFactory</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1&quot;</span><span style="color:#E1E4E8;">) DataSource </span><span style="color:#FFAB70;">dataSource</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        SqlSessionFactoryBean sessionFactory </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionFactoryBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setDataSource</span><span style="color:#E1E4E8;">(dataSource);</span></span>
<span class="line"><span style="color:#6A737D;">        // 领域模型包位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setTypeAliasesPackage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.example.demo.domain&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置映射文件的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        sessionFactory.</span><span style="color:#B392F0;">setMapperLocations</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> PathMatchingResourcePatternResolver</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getResources</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;classpath:sqlmaps/ds1/*.xml&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> sessionFactory.</span><span style="color:#B392F0;">getObject</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> SqlSessionTemplate </span><span style="color:#B392F0;">ds1SqlSessionTemplate</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1SqlSessionFactory&quot;</span><span style="color:#E1E4E8;">) SqlSessionFactory </span><span style="color:#FFAB70;">sqlSessionFactory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SqlSessionTemplate</span><span style="color:#E1E4E8;">(sqlSessionFactory);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这样, 把<code>MyBatis</code>配置好之后, 特别是通过<code>MapperScan</code>指定<code>dao</code>扫描路径之后, 就可以像之前一样直接在spring中注入对应的<code>Dao</code>操作数据库了.</p><h2 id="自动注册多数据源" tabindex="-1"><a class="header-anchor" href="#自动注册多数据源"><span>自动注册多数据源</span></a></h2><p>如果数据源比较多, 我们可以把多个数据源通过其它方式注入到Spring容器中, 使用时可以直接通过名字注入使用.<br> 假设有如下配置:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 默认数据源</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db0</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">spring.datasource.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 数据源db1配置</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.names</span><span style="color:#9ECBFF;">=ds1,</span><span style="color:#9ECBFF;"> ds2</span><span style="color:#6A737D;">    # 这个属性表示数据源名字列表</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db1</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds1.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#6A737D;"># 数据源db2配置</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.url</span><span style="color:#9ECBFF;">=jdbc:mysql://127.0.0.1:3306/db2</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.username</span><span style="color:#9ECBFF;">=root</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.password</span><span style="color:#9ECBFF;">=123123</span></span>
<span class="line"><span style="color:#B392F0;">custom.datasource.ds2.driver-class-name</span><span style="color:#9ECBFF;">=com.mysql.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的数据源, 我们可以直接拿来使用:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 这个是注入默认的数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSource dataSource</span></span>
<span class="line"><span style="color:#6A737D;">// 注入ds1数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> DataSource ds1</span></span>
<span class="line"><span style="color:#6A737D;">// 在方法里注入ds2数据源</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> SqlSessionFactory </span><span style="color:#B392F0;">sqlSessionFactory</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ds2&quot;</span><span style="color:#E1E4E8;">) DataSource dataSource) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ....</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现多数据源的自动注册, 我们需要借助<code>BeanDefinitionRegistryPostProcessor</code>和<code>EnvironmentAware</code>两个接口. 下面是自动注册多数据源的方法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MultiDataSourceRegister</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> BeanDefinitionRegistryPostProcessor</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">EnvironmentAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(MultiDataSourceRegister.class);</span></span>
<span class="line"><span style="color:#6A737D;">    // 存放DataSource配置的集合, &lt;dsName, dbProperties&gt;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">PropertyValues</span><span style="color:#E1E4E8;">&gt; dataSourceMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 这个方法主要用于加载多数据源配置, 添加到dataSourceMap中, 之后在postProcessBeanDefinitionRegistry进行注册。</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setEnvironment</span><span style="color:#E1E4E8;">(Environment </span><span style="color:#FFAB70;">environment</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取到前缀是 &quot;custom.datasource.&quot; 的属性列表值</span></span>
<span class="line"><span style="color:#E1E4E8;">        RelaxedPropertyResolver propertyResolver </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RelaxedPropertyResolver</span><span style="color:#E1E4E8;">(environment, </span><span style="color:#9ECBFF;">&quot;custom.datasource.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取到所有数据源的名称列表</span></span>
<span class="line"><span style="color:#E1E4E8;">        String dsNames </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> propertyResolver.</span><span style="color:#B392F0;">getProperty</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;names&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 拿到 custom.datasource.names 定义的数据源列表</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (String dsName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Splitter.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">omitEmptyStrings</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">splitToList</span><span style="color:#E1E4E8;">(dsNames)) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 把数据源的配置(url, username, password, driver-class-name, type等)咱存到 dsMap 中</span></span>
<span class="line"><span style="color:#E1E4E8;">            Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; dsMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> propertyResolver.</span><span style="color:#B392F0;">getSubProperties</span><span style="color:#E1E4E8;">(dsName </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (CollectionUtils.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(dsMap)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;未找到数据源{}的属性配置&quot;</span><span style="color:#E1E4E8;">, dsName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                PropertyValues propertyValues </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> MutablePropertyValues</span><span style="color:#E1E4E8;">(dsMap);</span></span>
<span class="line"><span style="color:#E1E4E8;">                dataSourceMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(dsName, propertyValues);  </span><span style="color:#6A737D;">// 数据源 dsName 的所有配置</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 自动注册 dataSourceMap 中的所有数据源</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">SuppressWarnings</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;unchecked&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> postProcessBeanDefinitionRegistry</span><span style="color:#E1E4E8;">(BeanDefinitionRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (String dsName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dataSourceMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            PropertyValues pv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dataSourceMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(dsName);</span></span>
<span class="line"><span style="color:#E1E4E8;">            DataSourceBuilder dataSourceBuilder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DataSourceBuilder.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 这里并没有创建数据源, 只是依靠Spring拿到数据源类型</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (pv.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                String type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pv.</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();  </span><span style="color:#6A737D;">// 如果指定了type, 则使用指定的数据源类型</span></span>
<span class="line"><span style="color:#F97583;">                try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    dataSourceBuilder.</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">((Class</span><span style="color:#F97583;">&lt;?</span><span style="color:#E1E4E8;"> extends DataSource</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">) Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(type));</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (ClassNotFoundException </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;加载数据源{}失败, 使用默认数据源&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#6A737D;">            // 注册</span></span>
<span class="line"><span style="color:#E1E4E8;">            AnnotatedGenericBeanDefinition definition </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AnnotatedGenericBeanDefinition</span><span style="color:#E1E4E8;">(dataSourceBuilder.</span><span style="color:#B392F0;">findType</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            registry.</span><span style="color:#B392F0;">registerBeanDefinition</span><span style="color:#E1E4E8;">(dsName, definition);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 把自定义数据源的属性绑定到对应的bean上</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> postProcessBeanFactory</span><span style="color:#E1E4E8;">(ConfigurableListableBeanFactory </span><span style="color:#FFAB70;">beanFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#6A737D;">        // 把默认数据源设置为主数据源;</span></span>
<span class="line"><span style="color:#E1E4E8;">        beanFactory.</span><span style="color:#B392F0;">getBeanDefinition</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">setPrimary</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 设置自定义数据源的属性绑定</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (String dsName </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> dataSourceMap.</span><span style="color:#B392F0;">keySet</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            DataSource customDS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beanFactory.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(dsName, DataSource.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            RelaxedDataBinder dataBinder </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> RelaxedDataBinder</span><span style="color:#E1E4E8;">(customDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">            dataBinder.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(dataSourceMap.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(dsName));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function d(u,v){const a=e("RouteLink");return p(),o("div",null,[n("p",null,[s("在("),c(a,{to:"/program/backend/2016-11-06-SpringBoot%E9%9B%86%E6%88%90MyBatis.html"},{default:r(()=>[s("SpringBoot集成MyBatis")]),_:1}),s("一文介绍了配置数据源的简单方法, 本文介绍如何配置多个数据源, 如何与"),E,s("配合多个数据源使用.")]),y])}const b=l(i,[["render",d],["__file","2016-12-12-SpringBoot多数据源配置.html.vue"]]),B=JSON.parse('{"path":"/program/backend/2016-12-12-SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html","title":"SpringBoot多数据源配置","lang":"zh-CN","frontmatter":{"title":"SpringBoot多数据源配置","date":"2016-12-12T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20161212,"description":"在(一文介绍了配置数据源的简单方法, 本文介绍如何配置多个数据源, 如何与MyBatis配合多个数据源使用. 多数据源配置 假设我们有三个数据源, 配置这三个数据源的方法非常简单, 首先在application.properties文件中添加这三个数据源的相关配置: 我们可以通过一个配置类把这三个数据源加到spring容器中: 多数据源的配置就这么简单...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-12-12-SpringBoot%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot多数据源配置"}],["meta",{"property":"og:description","content":"在(一文介绍了配置数据源的简单方法, 本文介绍如何配置多个数据源, 如何与MyBatis配合多个数据源使用. 多数据源配置 假设我们有三个数据源, 配置这三个数据源的方法非常简单, 首先在application.properties文件中添加这三个数据源的相关配置: 我们可以通过一个配置类把这三个数据源加到spring容器中: 多数据源的配置就这么简单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2016-12-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot多数据源配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-12-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"多数据源配置","slug":"多数据源配置","link":"#多数据源配置","children":[]},{"level":2,"title":"MyBatis使用多数据源","slug":"mybatis使用多数据源","link":"#mybatis使用多数据源","children":[]},{"level":2,"title":"自动注册多数据源","slug":"自动注册多数据源","link":"#自动注册多数据源","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-12-12-SpringBoot多数据源配置.md","localizedDate":"2016年12月12日","excerpt":"","autoDesc":true}');export{b as comp,B as data};
