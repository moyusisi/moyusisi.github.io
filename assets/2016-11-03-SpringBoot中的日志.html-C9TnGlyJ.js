import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as l,c as o,d as n}from"./app-BH4aZQG2.js";const e={},a=n(`<h2 id="日志的配置" tabindex="-1"><a class="header-anchor" href="#日志的配置"><span>日志的配置</span></a></h2><p><code>Spring Boot</code>支持各种日志工具, 最常用的是<code>Logback</code>. 我们可以对日志进行配置, 由于日志是在<code>ApplicationContext</code>创建之前初始化的, 所以对日志的配置不能通过在<code>@Configuration</code>配置类上使用<code>@PropertySources</code>注解加载进来. 可以使用系统变量或者外部配置<code>application.properties</code>来加载. 配置文件中可以指定这些属性:</p><ul><li><code>logging.config=</code>: 配置文件的位置, 比如:<code>classpath:logback.xml</code>(logback的配置文件)</li><li><code>logging.file=</code>: 日志文件名, 如:<code>myapp.log</code>, 输出日志到当前目录的<code>myapp.log</code>文件</li><li><code>logging.path=</code>: 日志文件位置, 如:<code>/var/log</code>, 输出日志到<code>/var/log/spring.log</code>文件</li><li><code>logging.level.*=</code>: 日志等级, 如:<code>logging.level.org.springframework=DEBUG</code></li><li><code>logging.pattern.console=</code>: 输出到<code>console</code>的日志格式, 只有logback有效</li><li><code>logging.pattern.file=</code>: 输出到文件的日志格式, 只有logback有效</li><li><code>logging.pattern.level=</code>: 日志级别的格式, 默认是<code>%5p</code>. 只有logback有效</li><li><code>logging.exception-conversion-word=%wEx</code>: log异常时使用哪个格式转换器(<code>base.xml</code>中定义了三个<code>conversionRule</code>)</li><li><code>logging.register-shutdown-hook=false</code> # Register a shutdown hook for the logging system when it is initialized(没用过)</li></ul><p>上面这些属性配置, 一般写在<code>application.properties</code>中, 这样会被加载到<code>Spring Environment</code>中, 为了方便其他地方使用, <code>Spring Environment</code>中的一些属性也被转换到了系统属性(<code>System property</code>)里, 下面是这些属性于系统属性的对应关系:</p><p>| Spring Environment | System Property | |: ---------------------------------- |: ------------------------------ | | <code>logging.exception-conversion-word</code> | <code>LOG_EXCEPTION_CONVERSION_WORD</code> | | <code>logging.file</code> | <code>LOG_FILE</code> | | <code>logging.path</code> | <code>LOG_PATH</code> | | <code>logging.pattern.console</code> | <code>CONSOLE_LOG_PATTERN</code> | | <code>logging.pattern.file</code> | <code>FILE_LOG_PATTERN</code> | | <code>logging.pattern.level</code> | <code>LOG_LEVEL_PATTERN</code> | | <code>PID</code> | <code>PID</code> |</p><h3 id="日志配置文件" tabindex="-1"><a class="header-anchor" href="#日志配置文件"><span>日志配置文件</span></a></h3><p><code>logging.config</code>属性用于指定日志配置文件的位置, 以<code>logback</code>为例.</p><ul><li>如果不指定该属性, <code>logback</code>本身会默认寻找<code>classpath</code>下的配置文件, 寻找顺序为: <code>logback.groovy &gt; logback-test.xml &gt; logback.xml</code>;</li><li><code>Spring Boot</code>又加了俩默认的配置文件:<code>logback-spring.groovy &gt; logback-spring.xml</code>, 这俩优先级低于上面的那三个. 推荐指定使用<code>logback-spring.xml</code>.</li><li>不指定配置文件时, 寻找上面的配置文件, 制定了则加载指定的配置文件. 如:<code>logging.config=classpath:logback-abc.xml</code>, 则会加载<code>classpath</code>下的<code>logback-abc.xml</code>文件</li></ul><p>使用<code>groovy</code>需要添加<code>groovy</code>的包依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.codehaus.groovy&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;groovy&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;2.4.7&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="输出到日志文件" tabindex="-1"><a class="header-anchor" href="#输出到日志文件"><span>输出到日志文件</span></a></h3><p><code>logging.file</code>和<code>logging.path</code>这俩属性用于指定日志文件输出的位置. 默认情况下<code>Spring Boot</code>只会把日志输出到<code>console</code>, 添加了这两个属性(任意一个即可), 才会把日志输出到文件里.</p><ul><li>两个属性都不指定, 只输出到控制台, 不输出到文件</li><li><code>logging.file</code>指定文件, 可以是相对路径, 可以是绝对路径.</li><li><code>logging.path</code>指定目录, 若制定了目录, 则会输出日志到指定目录下的<code>spring.log</code>文件中</li><li>两个同时指定, 以<code>logging.file</code>为准</li></ul><p>在<code>spring-boot</code>包里关于<code>logback</code>的配置<code>file-appender.xml</code>中定义了文件输出到<code>\${LOG_FILE}</code>, 在同一包下的<code>base.xml</code>文件里有这么一句:<code>&lt;property name=&quot;LOG_FILE&quot; value=&quot;\${LOG_FILE:-\${LOG_PATH:-\${LOG_TEMP:-\${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;</code>. 稍微分析下就知道为什么以<code>logging.file</code>为主, 指定<code>logging.path</code>时会输出到该目录下的<code>spring.log</code>文件里了.<br> 注意上面语句中多次嵌套使用了<code>\${key:-defaultVlaue}</code>形式</p><h3 id="日志级别" tabindex="-1"><a class="header-anchor" href="#日志级别"><span>日志级别</span></a></h3><p><code>logging.level.*</code>用于指定日志级别, 比如:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">logging.level.root</span><span style="color:#9ECBFF;">=WARN</span></span>
<span class="line"><span style="color:#B392F0;">logging.level.org.springframework.web</span><span style="color:#9ECBFF;">=DEBUG</span></span>
<span class="line"><span style="color:#B392F0;">logging.level.org.hibernate</span><span style="color:#9ECBFF;">=ERROR</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 该属性配置的日志级别优先级要高于日志配置文件(如<code>logback.xml</code>), 即日志配置文件中与该属性定义的日志级别不一致时, 以该属性定义的级别为准.</p><h3 id="日志格式" tabindex="-1"><a class="header-anchor" href="#日志格式"><span>日志格式</span></a></h3><ul><li><code>ogging.pattern.console</code>指定在控制台输出的日志格式;</li><li><code>ogging.pattern.file</code>指定在文件输出的日志格式;</li><li><code>ogging.pattern.level</code>指定日之级别(<code>DEBUG, INFO, ERROR</code>等)的格式, 默认为<code>%5p</code>;</li></ul><p>这些属性不指定时, 默认的格式在<code>spring-boot</code>包中的<code>DefaultLogbackConfiguration</code>类里有定义, 在<code>defaults.xml</code>里也有定义<br> 格式大致为:<br><code>2016-11-02 21:59:11.366 INFO 11969 --- [ main] o.apache.catalina.core.StandardService : Starting service Tomcat</code><br> 依次为: <code>时间 日志级别 PID --- [线程名] 日志名 : 日志内容</code></p><h2 id="如何写自己的日志配置文件" tabindex="-1"><a class="header-anchor" href="#如何写自己的日志配置文件"><span>如何写自己的日志配置文件</span></a></h2><p><code>spring-boot</code>包里有四个相关的<code>xml</code>文件:</p><ul><li><code>console-appender.xml</code>: 定义了控制台输出的日志格式</li><li><code>file-appender.xml</code>: 定义了一个日志的文件输出格式(指定每个文件<code>10M</code>)</li><li><code>defaults.xml</code>: 定义了一些日志级别</li><li><code>base.xml</code>: 包含了上面3个文件, 并指定了<code>root</code>的输出级别和输出方式</li></ul><p>我们的日志配置线上不需要输出到<code>console</code>, 日志文件的大小一般也不会是<code>10M</code>, 所以上面那几个文件, 我们可以参考.</p><p>比如我们可以这样定义<code>logback.xml</code></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 这里面定义了 CONSOLE_LOG_PATTERN, FILE_LOG_PATTERN 等日志格式, 还定义了一些日志级别 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">include</span><span style="color:#B392F0;"> resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 命令行输出, 一般线上不用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#B392F0;">  charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;\${CONSOLE_LOG_PATTERN}&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;LOG_FILE_NAME&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;myLog&quot;</span><span style="color:#E1E4E8;">/&gt; </span><span style="color:#6A737D;">&lt;!-- 定义一个属性, 下面用 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 输出格式 appender --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;\${catalina.base}/logs/\${LOG_FILE_NAME}.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;  </span><span style="color:#6A737D;">&lt;!-- 可自己定义 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;\${FILE_LOG_PATTERN}&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">&lt;!-- 输出格式也可自己定义 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;\${catalina.base}/logs/\${LOG_FILE_NAME}.%d{yyyy-MM-dd}.log&lt;/</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- error 日志 appender --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ERROR_FILE&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;\${catalina.base}/logs/\${LOG_FILE_NAME}_error.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">filter</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">level</span><span style="color:#E1E4E8;">&gt;ERROR&lt;/</span><span style="color:#85E89D;">level</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">filter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#B392F0;">  charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;\${FILE_LOG_PATTERN}&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;\${catalina.base}/logs/\${LOG_FILE_NAME}_error.%d{yyyy-MM-dd}.log&lt;/</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 定义日志级别, 也可在应用配置中指定 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">logger</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;"> =</span><span style="color:#9ECBFF;">&quot;com.example.project&quot;</span><span style="color:#B392F0;"> level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;INFO&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">logger</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.springframework.web&quot;</span><span style="color:#B392F0;"> level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;DEBUG&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">root</span><span style="color:#B392F0;"> level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ERROR&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#E1E4E8;"> /&gt; </span><span style="color:#6A737D;">&lt;!-- 线上不需要输出到 CONSOLE --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ERROR_FILE&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上例中, 日志会输出到文件<code>XXX.log</code>, 错误日志单独输出到一个<code>XXX_error.log</code>文件, 日志文件并每天打包一次.</li><li>上例中, 应用配置(<code>application.properties</code>)里用于指定日志文件名文件位置的属性(<code>logging.file</code>和<code>logging.path</code>)将不起作用, 因为例子里没有用到这些属性, 其他配置(比如日志级别)仍有作用.</li><li>上例中的哪个<code>\${catalina.base}</code>算是一个系统变量, 表示应用所在目录, 文件名(位置)完全可以自己指定, 也可参考<code>spring-boot</code>包里的使用方式.</li></ul>`,28),p=[a];function c(t,r){return l(),o("div",null,p)}const d=s(e,[["render",c],["__file","2016-11-03-SpringBoot中的日志.html.vue"]]),g=JSON.parse('{"path":"/program/code/2016-11-03-SpringBoot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html","title":"SpringBoot中的日志","lang":"zh-CN","frontmatter":{"title":"SpringBoot中的日志","date":"2016-11-03T00:00:00.000Z","category":"Spring","tag":["SpringBoot"],"order":-20161103,"description":"日志的配置 Spring Boot支持各种日志工具, 最常用的是Logback. 我们可以对日志进行配置, 由于日志是在ApplicationContext创建之前初始化的, 所以对日志的配置不能通过在@Configuration配置类上使用@PropertySources注解加载进来. 可以使用系统变量或者外部配置application.proper...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2016-11-03-SpringBoot%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot中的日志"}],["meta",{"property":"og:description","content":"日志的配置 Spring Boot支持各种日志工具, 最常用的是Logback. 我们可以对日志进行配置, 由于日志是在ApplicationContext创建之前初始化的, 所以对日志的配置不能通过在@Configuration配置类上使用@PropertySources注解加载进来. 可以使用系统变量或者外部配置application.proper..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2016-11-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot中的日志\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"日志的配置","slug":"日志的配置","link":"#日志的配置","children":[{"level":3,"title":"日志配置文件","slug":"日志配置文件","link":"#日志配置文件","children":[]},{"level":3,"title":"输出到日志文件","slug":"输出到日志文件","link":"#输出到日志文件","children":[]},{"level":3,"title":"日志级别","slug":"日志级别","link":"#日志级别","children":[]},{"level":3,"title":"日志格式","slug":"日志格式","link":"#日志格式","children":[]}]},{"level":2,"title":"如何写自己的日志配置文件","slug":"如何写自己的日志配置文件","link":"#如何写自己的日志配置文件","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2016-11-03-SpringBoot中的日志.md","localizedDate":"2016年11月3日","excerpt":"","autoDesc":true}');export{d as comp,g as data};
