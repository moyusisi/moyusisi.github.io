import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as e,d as n}from"./app-DA1JdGe8.js";const o={},l=n(`<h2 id="整合的方法" tabindex="-1"><a class="header-anchor" href="#整合的方法"><span>整合的方法</span></a></h2><p>MyBatis 是以<code>SqlSessionFactory</code>为核心的，Spring是以<code>BeanFactory</code>或<code>ApplicationContext</code>为核心的。把两者整合在一起，<code>Mybatis-Spring</code>封装了一个<code>SqlSessionFactoryBean</code>，在这个<code>Bean</code>里可以产生<code>SqlSessionFactory</code>。所以通过Spring的IoC实现<code>SqlSessionFactoryBean</code>的注入即可将二者整合。</p><p>使用<code>Mybatis-Spring</code>模块需要<code>mybatis-spring-x.x.x.jar</code>包，如果使用<code>Maven</code>，则需在<code>pom.xml</code>文件中添加下面代码：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.mybatis&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;mybatis-spring&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;x.x.x&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="sqlsessionfactorybean的注入" tabindex="-1"><a class="header-anchor" href="#sqlsessionfactorybean的注入"><span>SqlSessionFactoryBean的注入</span></a></h2><p>在<code>MyBatis</code>中,<code>session</code>工厂可以使用<code>SqlSessionFactoryBuilder</code>来创建。而在<code>MyBatis-Spring</code>中,则使用<code>SqlSessionFactoryBean</code>来替代。 要想实现对<code>SqlSessionFactoryBean</code>的注入，需要在spring的配置文件中添加这样的一个bean元素：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    &lt;!-- 读取properties文件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">context:property-placeholder</span><span style="color:#B392F0;"> location</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;classpath:jdbc.properties&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 配置数据源 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span><span style="color:#B392F0;"> destroy-method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;close&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;driverClassName&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${jdbc.url}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${jdbc.username}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${jdbc.password}&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- SqlSessionFactoryBean --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sqlSessionFactory&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- dataSource用于指定mybatis的数据源 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- mapperLocations用于指定mybatis中mapper文件所在的位置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapperLocations&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;classpath:mapper/*.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 自动重命名 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;typeAliasesPackage&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis_spring.model&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- 用于指定mybatis配置文件的位置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;configLocation&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;classpath:mybatis-config.xml&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构建<code>SqlSessionFactoryBean</code>的时候，<code>dataSource</code>属性是必须指定的，它表示用于连接数据库的数据源。我们也可以指定一些其他的属性，如：</p><ul><li><code>typeAliasesPackage</code>：实体类所在的包，自动取包中不包括包名的简单类名作为别名。 多个package之间可以用逗号或者分号等来进行分隔。</li><li><code>typeAliases</code>：数组类型，用来指定别名的。指定了这个属性后，Mybatis会把这个类型的短名称作为这个类型的别名， 前提是该类上没有<code>@Alias</code>注解，否则将使用该注解对应的值作为此种类型的别名。如：</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;typeAliases&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;com.test.mybatis.model.Blog&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;com.test.mybatis.model.Comment&lt;/</span><span style="color:#85E89D;">value</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;/</span><span style="color:#85E89D;">array</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>plugins</code>：数组类型，用来指定Mybatis的<code>Interceptor</code>。</li><li><code>typeHandlersPackage</code>：用来指定<code>TypeHandler</code>所在的包，自动把该包下面的类注册为对应的<code>TypeHandler</code>。多个package之间可以用逗号或者分号等来进行分隔。</li><li><code>typeHandlers</code>：数组类型，用来指定<code>TypeHandler</code>。</li></ul><hr><h2 id="mapperfactorybean" tabindex="-1"><a class="header-anchor" href="#mapperfactorybean"><span>MapperFactoryBean</span></a></h2><p>通过<code>SqlSessionFactoryBean</code>可以产生<code>SqlSessionFactory</code>，在MyBatis中，通过<code>sqlSessionFactory.openSession()</code>得到<code>sqlSession</code>，然后通过<code>session.getMapper(xxx.class)</code>得到对应的<code>Mapper</code>。在Spring中，通过<code>MapperFactoryBean</code>可以获取到我们想要的<code>Mapper</code>对象。</p><p><code>MapperFactoryBean</code>实现了Spring的<code>FactoryBean</code>接口，所以<code>MapperFactoryBean</code>是通过<code>FactoryBean</code>接口中定义的<code>getObject</code>方法来获取对应的<code>Mapper</code>对象的。在定义一个<code>MapperFactoryBean</code>的时候有两个属性需要我们注入，一个是Mybatis-Spring用来生成实现了<code>SqlSession</code>接口的<code>SqlSessionTemplate</code>对象的<code>sqlSessionFactory</code>；另一个是我们所要返回的对应的<code>Mapper</code>接口。</p><p>比如，有一个<code>UserMapper</code>接口:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//UserMapper.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> UserMapper</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#F97583;">Select</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SELECT * FROM users WHERE id = #{userId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  User </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Param</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userId&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">userId</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>MapperFactoryBean</code>把接口加入到 Spring 中:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;userMapper&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 指定的映射器类必须是一个接口,而不是具体的实现类 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapperInterface&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis_spring.mapper.UserMapper&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sqlSessionFactory&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;sqlSessionFactory&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好<code>Mapper</code>接口对应的<code>MapperFactoryBean</code>之后，就可以把对应的<code>Mapper</code>接口注入到由Spring管理的bean对象中了。当我们需要使用到相应的<code>Mapper</code>接口时，<code>MapperFactoryBean</code>会从它的<code>getObject</code>方法中获取对应的<code>Mapper</code>接口，而<code>getObject</code>内部还是通过我们注入的属性调用<code>SqlSession</code>接口的<code>getMapper()</code>方法来返回对应的<code>Mapper</code>接口。这样就通过把<code>SqlSessionFactory</code>和相应的<code>Mapper</code>接口交给Spring管理实现了Mybatis跟Spring的整合。</p><hr><h2 id="使用mapperscannerconfigurer自动注册mapper" tabindex="-1"><a class="header-anchor" href="#使用mapperscannerconfigurer自动注册mapper"><span>使用MapperScannerConfigurer自动注册Mapper</span></a></h2><p>像上面一个<code>Mapper</code>就需要定义一个对应的<code>MapperFactoryBean</code>。<code>Mybatis-Spring</code>提供了一个叫<code>MapperScannerConfigurer</code>的类，可以自动注册<code>Mapper</code>对应的<code>MapperFactoryBean</code>对象。我们只需要在配置文件中添加这样的内容：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;basePackage&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis_spring.mapper&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MapperScannerConfigurer</code>有一个<code>basePackage</code>属性必须指定。<code>basePackage</code>用来指定<code>Mapper</code>接口文件所在的包，在这个包或其子包下面的<code>Mapper</code>接口都将被搜索到。多个包之间可以使用逗号或者分号进行分隔。另外还有两个可以缩小搜索和注册范围的属性，一个是<code>annotationClass</code>，另一个是<code>markerInterface</code>。</p><ul><li><code>annotationClass</code>：当指定了<code>annotationClass</code>时，<code>MapperScannerConfigurer</code>将只注册使用了<code>annotationClass</code>注解标记的接口。</li><li><code>markerInterface</code>：<code>markerInterface</code>用于指定一个接口，当指定了<code>markerInterface</code>之后，<code>MapperScannerConfigurer</code>将只注册继承自<code>markerInterface</code>的接口。</li></ul><p>如果上述两个属性都指定了的话，那么<code>MapperScannerConfigurer</code>将取它们的并集，而不是交集。</p><hr><h2 id="事务管理" tabindex="-1"><a class="header-anchor" href="#事务管理"><span>事务管理</span></a></h2><p><code>MyBatis-Spring</code>利用了存在于<code>Spring</code>中的<code>DataSourceTransactionManager</code>进行事务管理。一旦<code>Spring</code>的<code>PlatformTransactionManager</code>配置好了,就可以在<code>Spring</code>中以你通常的做法<code>(@Transactional注解)</code>来配置事务。在事务处理期间,会创建一个单独的<code>SqlSession</code>对象，当事务完成时,这个<code>session</code>会以合适的方式提交或回滚。</p><p>要开启<code>Spring</code>的事务处理,需要在<code>Spring</code>的配置文件中创建一个<code>DataSourceTransactionManager</code>对象:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这段代码展示如何编程式地控制事务：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">DefaultTransactionDefinition def </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> DefaultTransactionDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">def.</span><span style="color:#B392F0;">setPropagationBehavior</span><span style="color:#E1E4E8;">(TransactionDefinition.PROPAGATION_REQUIRED);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">TransactionStatus status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> txManager.</span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(def);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    userMapper.</span><span style="color:#B392F0;">insertUser</span><span style="color:#E1E4E8;">(user);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (MyException </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    txManager.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(status);</span></span>
<span class="line"><span style="color:#F97583;">    throw</span><span style="color:#E1E4E8;"> ex;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">txManager.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(status);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,36),p=[l];function t(c,r){return e(),a("div",null,p)}const E=s(o,[["render",t],["__file","2015-02-02-Spring(四)Spring整合MyBatis.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2015-02-02-Spring(%E5%9B%9B)Spring%E6%95%B4%E5%90%88MyBatis.html","title":"Spring(四): Spring整合MyBatis","lang":"zh-CN","frontmatter":{"title":"Spring(四): Spring整合MyBatis","date":"2015-02-02T00:00:00.000Z","category":"Spring","tag":"Spring","order":-20150202,"description":"整合的方法 MyBatis 是以SqlSessionFactory为核心的，Spring是以BeanFactory或ApplicationContext为核心的。把两者整合在一起，Mybatis-Spring封装了一个SqlSessionFactoryBean，在这个Bean里可以产生SqlSessionFactory。所以通过Spring的IoC实现...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-02-02-Spring(%E5%9B%9B)Spring%E6%95%B4%E5%90%88MyBatis.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring(四): Spring整合MyBatis"}],["meta",{"property":"og:description","content":"整合的方法 MyBatis 是以SqlSessionFactory为核心的，Spring是以BeanFactory或ApplicationContext为核心的。把两者整合在一起，Mybatis-Spring封装了一个SqlSessionFactoryBean，在这个Bean里可以产生SqlSessionFactory。所以通过Spring的IoC实现..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2015-02-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring(四): Spring整合MyBatis\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-02-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"整合的方法","slug":"整合的方法","link":"#整合的方法","children":[]},{"level":2,"title":"SqlSessionFactoryBean的注入","slug":"sqlsessionfactorybean的注入","link":"#sqlsessionfactorybean的注入","children":[]},{"level":2,"title":"MapperFactoryBean","slug":"mapperfactorybean","link":"#mapperfactorybean","children":[]},{"level":2,"title":"使用MapperScannerConfigurer自动注册Mapper","slug":"使用mapperscannerconfigurer自动注册mapper","link":"#使用mapperscannerconfigurer自动注册mapper","children":[]},{"level":2,"title":"事务管理","slug":"事务管理","link":"#事务管理","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-02-02-Spring(四)Spring整合MyBatis.md","localizedDate":"2015年2月2日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
