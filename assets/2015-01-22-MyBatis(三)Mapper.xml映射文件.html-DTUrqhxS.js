import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as a,d as n}from"./app-DQ46ret3.js";const l={},o=n(`<p><code>Mapper.xml</code>文件的主要功能是映射SQL语句，对数据库进行增删改查操作，与JDBC代码相比，更加方便。</p><h2 id="select-语句简介" tabindex="-1"><a class="header-anchor" href="#select-语句简介"><span>select 语句简介</span></a></h2><p>查询语句是 MyBatis 中最常用的元素之一，先来个例子</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectPerson&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hashmap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  SELECT * FROM PERSON WHERE ID = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>XXXType</code>使用的都是<strong>完全限定名</strong>或者<strong>别名</strong> , 其中的符号<code>#{id}</code>会使用预处理语句，在 SQL 中会由一个“?”来标识，在<code>JDBC</code>中相当于这样：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// Similar JDBC code, NOT MyBatis…</span></span>
<span class="line"><span style="color:#E1E4E8;">String selectPerson </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;SELECT * FROM PERSON WHERE ID=?&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">PreparedStatement ps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> conn.</span><span style="color:#B392F0;">prepareStatement</span><span style="color:#E1E4E8;">(selectPerson);</span></span>
<span class="line"><span style="color:#E1E4E8;">ps.</span><span style="color:#B392F0;">setInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,id);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>select</code> 元素还有很多属性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>id              | 在命名空间中唯一的标识符, 可以被用来引用这条语句</span></span>
<span class="line"><span>resultType      | 如果是集合情形, 那应该是集合可以包含的类型, 而不能是集合本身. 比如返回的结果是多个Persion, 这里应该写Persion而不是List</span></span>
<span class="line"><span>resultMap       | 外部resultMap的命名引用, 与resultType不能同时使用. 后面会具体讲</span></span>
<span class="line"><span>parameterType   | 默认值:unset. 可选, MyBatis可以通过TypeHandler推断出具体传入语句的参数</span></span>
<span class="line"><span>flushCache      | 默认值:false. true表示任何时候只要语句被调用, 都会导致本地缓存和二级缓存都会被清空</span></span>
<span class="line"><span>useCache        | 默认值:true. true表示本条语句的结果被二级缓存</span></span>
<span class="line"><span>timeout         | 默认:unset. 在抛出异常之前, 驱动程序等待数据库返回请求结果的秒数</span></span>
<span class="line"><span>resultSetType   | 默认:unset. 取值为FORWARD_ONLY,SCROLL_SENSITIVE或SCROLL_INSENSITIVE中的一个</span></span>
<span class="line"><span>fetchSize       | 默认:unset. 驱动程序每次批量返回的结果行数和这个设置值相等</span></span>
<span class="line"><span>statementType   | 默认值:PREPARED. STATEMENT,PREPARED或CALLABLE的一个. 这会让MyBatis分别使用Statement,PreparedStatement或CallableStatement</span></span>
<span class="line"><span>databaseId      | 如果配置了 databaseIdProvider, MyBatis 会加载所有的不带databaseId或匹配当前databaseId的语句;如果带或者不带的语句都有,则不带的会被忽略</span></span>
<span class="line"><span>resultOrdered   | 默认值:false. 这个设置仅针对嵌套结果select语句适用:如果为 true,就是假设包含了嵌套结果集或是分组了,这样的话当返回一个主结果行的时候,就不会发生有对前面结果集的引用的情况. 这就使得在获取嵌套的结果集的时候不至于导致内存不够用</span></span>
<span class="line"><span>resultSets      | 这个设置仅对多结果集的情况适用, 它将列出语句执行后返回的结果集并每个结果集给一个名称,名称是逗号分隔的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="insert-update-和-delete-简介" tabindex="-1"><a class="header-anchor" href="#insert-update-和-delete-简介"><span>insert, update 和 delete 简介</span></a></h2><p><code>insert, update, delete</code>同<code>select</code>类似，也有许多属性，其中</p><ul><li><code>id, parameterType, timeout, statementType, databaseId</code>与select元素中的属性相同;</li><li><code>flushCache</code>的默认值为&#39;true&#39;</li><li>还有些是<code>insert和update</code>所特有的属性，如:</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>useGeneratedKeys  | 默认值:false. 为true时会令MyBatis使用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键</span></span>
<span class="line"><span>keyProperty       | 默认:unset. 唯一标记一个属性,MyBatis会通过getGeneratedKeys的返回值或者通过insert语句的selectKey子元素设置它的键值. 如果希望得到多个生成的列,也可以是逗号分隔的属性名称列表</span></span>
<span class="line"><span>keyColumn         | 通过生成的键值设置表中的列名,当主键列不是表中的第一列的时候需要设置. 如果希望得到多个生成的列,也可以是逗号分隔的属性名称列表</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如下面这段代码，如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置到目标属性上就OK了。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insertAuthor&quot;</span><span style="color:#B392F0;"> useGeneratedKeys</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#B392F0;"> keyProperty</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  insert into Author (username,password,email,bio)</span></span>
<span class="line"><span style="color:#E1E4E8;">  values (#{username},#{password},#{email},#{bio})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="parameters-参数" tabindex="-1"><a class="header-anchor" href="#parameters-参数"><span>Parameters 参数</span></a></h2><p>参数是 MyBatis 非常强大的功能, <code>parameterType=&quot;anyType&quot;</code>其中的<code>anyType</code>可以是<code>int</code>等基本类型，也可以是<code>User</code>等复杂类型。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">insert</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insertUser&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;User&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  insert into users (id, username, password)</span></span>
<span class="line"><span style="color:#E1E4E8;">  values (#{id}, #{username}, #{password})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，传入的事复杂类型<code>User</code>，将会在<code>User</code>中查找id、username 和 password 属性，并放入对应位置。如果是<code>int</code>或<code>String</code>等类型，不存在属性，则直接将其值放入对应的位置。</p><p>另外，参数映射也可以指定映射类型，甚至可以指定类型处理器，像之前讲一样，<code>javaType</code>通常可以根据参数对象去推测。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="字符串替换" tabindex="-1"><a class="header-anchor" href="#字符串替换"><span>字符串替换</span></a></h3><p>默认情况下,使用#{}格式的语法会创建预处理语句属性并安全地设置值（比如?）。不过有时只想直接在 SQL 语句中插入一个不改变的字符串，就可以这样使用参数：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">ORDER BY \${columnName}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里 MyBatis 不会修改或转义字符串</p><hr><h2 id="resultmap" tabindex="-1"><a class="header-anchor" href="#resultmap"><span>ResultMap</span></a></h2><p><code>resultMap</code> 元素是MyBatis中最重要最强大的元素，resultMap元素本身有一些属性，如下代码，<code>id</code>用于标识该<code>resultMap</code>，<code>type</code>用于指定该<code>resultMap</code>映射到哪个<code>JavaBean</code></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;blogResultMap&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它还有很多子元素，下面是<code>resultMap</code>元素的概念图</p><p><strong>resultMap</strong></p><ul><li>constructor - 类在实例化时,用来注入结果到构造方法中 <ul><li>idArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能</li><li>arg - 注入到构造方法的一个普通结果</li></ul></li><li>id – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能</li><li>result – 注入到字段或 JavaBean 属性的普通结果</li><li>association – 一个复杂的类型关联;许多结果将包成这种类型 <ul><li>嵌入结果映射 – 结果映射自身的关联,或者参考一个</li></ul></li><li>collection – 复杂类型的集 <ul><li>嵌入结果映射 – 结果映射自身的集,或者参考一个</li></ul></li><li>discriminator – 使用结果值来决定使用哪个结果映射 <ul><li>case – 基于某某些值的结果映射 <ul><li>嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相 同的元素,或者它可以参照一个外部的结果映射</li></ul></li></ul></li></ul><p><strong>注意</strong> 由于DTD的限制，这些元素出现的顺序必须按照上面的顺序</p><p>下面详细说明<code>resultMap</code>的每个子元素</p><h3 id="id和result" tabindex="-1"><a class="header-anchor" href="#id和result"><span>id和result</span></a></h3><p>这是最基本的内容，这两者之间的唯一不同是<code>id</code>所指定属性将是能够唯一标识对象的属性，这能提高效率，特别是有联合映射时。<br><code>id</code>和<code>reslut</code>元素有<code>column, property, javaType, jdbcType, typeHandler</code>等属性，其中<code>column</code>用于指定数据库中的列名，<code>property</code>用于指定<code>JavaBean</code>对应的属性，其他属性则与之前讲的一样。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">id</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;user_name&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造方法constructor" tabindex="-1"><a class="header-anchor" href="#构造方法constructor"><span>构造方法constructor</span></a></h3><p>如果<code>resultMap</code>所映射的<code>JavaBean</code>的构造方法需要提供参数，则<code>constructor</code>就不能缺少了<br><code>constructor</code>有<code>idArg</code>和<code>arg</code>两个子元素，意义差不多(参见<code>id</code>和<code>result</code>的区别)，都是给构造方法提供参数。他们的属性也同<code>id</code>和<code>result</code>一样<br><code>constructor</code>常用的形式如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">constructor</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">idArg</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">arg</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;String&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">constructor</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong> Java 没有自查(反射)参数名的方法，所以要保证这里的参数顺序同<code>JavaBean</code>定义的顺序一致，而且数据类型也是确定的。</p><h3 id="关联association" tabindex="-1"><a class="header-anchor" href="#关联association"><span>关联association</span></a></h3><p>关联元素处理“有一个”类型的关系。比如,一个博客有一个作者，就像下面这样</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//来自 Author.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Author</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Integer age;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//来自 Blog.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Blog</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String title;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String content;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Author author; </span><span style="color:#6A737D;">//数据库中对应的字段是 author_id int类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以这样做级联查询</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;BlogResultMap&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 只要提供了返回类型，像上面的id和result指定的字段，即使不指定MyBatis也能自动封装 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">association</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author_id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Author&quot;</span></span>
<span class="line"><span style="color:#B392F0;">                 select</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis.mapper.AuthorMapper.selectAuthorById&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">                 &lt;!-- 这里如果起了别名也可使用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectBlogById&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultMap</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;BlogResultMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM blog WHERE id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 来自 AuthorMapper.xml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectAuthorById&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Author&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM author WHERE id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>association</code>是通过把column指定的字段作为参数，传给select子查询的。</p><h3 id="集合collection" tabindex="-1"><a class="header-anchor" href="#集合collection"><span>集合collection</span></a></h3><p>如果博客有了许多评论，则会出现“一对多”的情形，比如上面的<code>Blog</code>会多出一个属性</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    //Blog.java新增的属性</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">Comment</span><span style="color:#E1E4E8;">&gt; comments;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//Comment.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Comment</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Integer id;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String content;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Blog blog;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么对于<code>Blog</code>的查询将变成这样</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;BlogResultMap&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">id</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 只要提供了返回类型，像上面的id和result指定的字段，即使不指定MyBatis也能自动封装 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">association</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author_id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Author&quot;</span></span>
<span class="line"><span style="color:#B392F0;">                 select</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis.mapper.AuthorMapper.selectAuthorById&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#6A737D;">                 &lt;!-- 这里如果起了别名也可使用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">collection</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;comments&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ArrayList&quot;</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> ofType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Comment&quot;</span></span>
<span class="line"><span style="color:#B392F0;">                select</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis.mapper.CommentMapper.selectCommentForBlog&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectBlogById&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultMap</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;BlogResultMap&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM blog WHERE id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 来自 AuthorMapper.xml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectAuthorById&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Author&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM author WHERE id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 来自 CommentMapper.xml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;selectCommentForBlog&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Comment&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    SELECT * FROM comment WHERE blog_id = #{id}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的<code>ofType</code>用于表示集合中所存放的类型，上面可以理解为产生了一个<code>ArrayList&lt;Comment&gt; comments</code>，<code>javaType</code>属性可以省略；<code>column</code>指定了id作为传入参数</p><hr>`,55),p=[o];function t(r,c){return a(),e("div",null,p)}const E=s(l,[["render",t],["__file","2015-01-22-MyBatis(三)Mapper.xml映射文件.html.vue"]]),u=JSON.parse('{"path":"/program/backend/2015-01-22-MyBatis(%E4%B8%89)Mapper.xml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.html","title":"MyBatis(三): Mapper.xml映射文件","lang":"zh-CN","frontmatter":{"title":"MyBatis(三): Mapper.xml映射文件","date":"2015-01-22T00:00:00.000Z","category":"Spring","tag":"MyBatis","order":-20150122,"description":"Mapper.xml文件的主要功能是映射SQL语句，对数据库进行增删改查操作，与JDBC代码相比，更加方便。 select 语句简介 查询语句是 MyBatis 中最常用的元素之一，先来个例子 其中的XXXType使用的都是完全限定名或者别名 , 其中的符号#{id}会使用预处理语句，在 SQL 中会由一个“?”来标识，在JDBC中相当于这样： sel...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-01-22-MyBatis(%E4%B8%89)Mapper.xml%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"MyBatis(三): Mapper.xml映射文件"}],["meta",{"property":"og:description","content":"Mapper.xml文件的主要功能是映射SQL语句，对数据库进行增删改查操作，与JDBC代码相比，更加方便。 select 语句简介 查询语句是 MyBatis 中最常用的元素之一，先来个例子 其中的XXXType使用的都是完全限定名或者别名 , 其中的符号#{id}会使用预处理语句，在 SQL 中会由一个“?”来标识，在JDBC中相当于这样： sel..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2015-01-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis(三): Mapper.xml映射文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"select 语句简介","slug":"select-语句简介","link":"#select-语句简介","children":[]},{"level":2,"title":"insert, update 和 delete 简介","slug":"insert-update-和-delete-简介","link":"#insert-update-和-delete-简介","children":[]},{"level":2,"title":"Parameters 参数","slug":"parameters-参数","link":"#parameters-参数","children":[{"level":3,"title":"字符串替换","slug":"字符串替换","link":"#字符串替换","children":[]}]},{"level":2,"title":"ResultMap","slug":"resultmap","link":"#resultmap","children":[{"level":3,"title":"id和result","slug":"id和result","link":"#id和result","children":[]},{"level":3,"title":"构造方法constructor","slug":"构造方法constructor","link":"#构造方法constructor","children":[]},{"level":3,"title":"关联association","slug":"关联association","link":"#关联association","children":[]},{"level":3,"title":"集合collection","slug":"集合collection","link":"#集合collection","children":[]}]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-01-22-MyBatis(三)Mapper.xml映射文件.md","localizedDate":"2015年1月22日","excerpt":"","autoDesc":true}');export{E as comp,u as data};
