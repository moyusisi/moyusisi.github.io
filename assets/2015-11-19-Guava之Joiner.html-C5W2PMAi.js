import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,d as o}from"./app-4MUv-ZKY.js";const n={},l=o(`<p><code>Joiner</code>在Guava的<code>com.google.common.base</code>包中, 算是字符处理工具, 其作用是连接多个元素, 可当作连接器来使用</p><h2 id="生成-joiner-的方法" tabindex="-1"><a class="header-anchor" href="#生成-joiner-的方法"><span>生成 Joiner 的方法</span></a></h2><p>工厂方法:</p><ul><li><code>Joiner on(String separator)</code></li><li><code>Joiner on(char separator)</code></li></ul><p>修饰方法:</p><ul><li><code>Joiner useForNull(final String nullText)</code></li><li><code>Joiner skipNulls()</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;; &quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">skipNulls</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Harry&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Ron&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Hermione&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// Harry; Ron; Hermione</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>注意</strong>: Joiner类是不可变的, 即它是线程安全的, 可以将其定义为<code>static final</code>常量<br> 像下面这样使用是 <strong>错误</strong> 的:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Joiner joiner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">// joiner 是不可变的</span></span>
<span class="line"><span style="color:#E1E4E8;">joiner.</span><span style="color:#B392F0;">skipNulls</span><span style="color:#E1E4E8;">();   </span><span style="color:#6A737D;">// 这里返回了个新的Joiner, 原来的joiner并没变</span></span>
<span class="line"><span style="color:#E1E4E8;">joiner.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;wrong&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;wrong&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 这就直接报NullPointerException了, 原来的joiner没有skipNull功能</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="join-方法" tabindex="-1"><a class="header-anchor" href="#join-方法"><span>join 方法</span></a></h2><p>返回连接之后的字符串, 返回的字符串都是<code>final</code>的:</p><ul><li><code>public final String join(Iterable&lt;?&gt; parts)</code></li><li><code>public final String join(Iterator&lt;?&gt; parts)</code></li><li><code>public final String join(Object[] parts)</code></li><li><code>public final String join(Object first, Object second, Object... rest)</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// returns &quot;1,5,7&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="appendto-方法" tabindex="-1"><a class="header-anchor" href="#appendto-方法"><span>appendTo 方法</span></a></h2><p>把后面的参数以字符串的方式添加到第一个参数后面<br><code>java.lang.Appendable</code>接口的子类(如<code>StringBuilder</code> <code>BufferedWriter</code>等), 都可以作为第一个参数</p><ul><li><code>StringBuilder appendTo(StringBuilder builder, Iterable&lt;?&gt; parts)</code></li><li><code>StringBuilder appendTo(StringBuilder builder, Iterable&lt;?&gt; parts)</code></li><li><code>StringBuilder appendTo(StringBuilder builder, Object[] parts)</code></li><li><code>StringBuilder appendTo(StringBuilder builder, Object first, Object second, Object... rest)</code></li><li><code>&lt;A extends Appendable&gt; A appendTo(A appendable, Iterable&lt;?&gt; parts)</code></li><li><code>&lt;A extends Appendable&gt; A appendTo(A appendable, Iterator&lt;?&gt; parts)</code></li><li><code>&lt;A extends Appendable&gt; A appendTo(A appendable, Object[] parts)</code></li><li><code>&lt;A extends Appendable&gt; A appendTo(A appendable, Object first, Object second, Object... rest)</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">appendTo</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> StringBuilder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;list:&quot;</span><span style="color:#E1E4E8;">), Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// list:1,2,3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="mapjoiner" tabindex="-1"><a class="header-anchor" href="#mapjoiner"><span>MapJoiner</span></a></h2><p>Joiner提供了个方法返回内部类<code>Joiner.MapJoiner</code>专门用于处理map</p><ul><li><code>MapJoiner withKeyValueSeparator(String keyValueSeparator)</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Maps.</span><span style="color:#B392F0;">newHashMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">map.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Joiner.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">withKeyValueSeparator</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;-&gt;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(map); </span><span style="color:#6A737D;">// b-&gt;2;a-&gt;1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),t=[l];function r(p,i){return s(),a("div",null,t)}const E=e(n,[["render",r],["__file","2015-11-19-Guava之Joiner.html.vue"]]),u=JSON.parse('{"path":"/program/backend/2015-11-19-Guava%E4%B9%8BJoiner.html","title":"Guava之Joiner","lang":"zh-CN","frontmatter":{"title":"Guava之Joiner","date":"2015-11-19T00:00:00.000Z","category":"Java","tag":["Guava"],"order":-20151119,"description":"Joiner在Guava的com.google.common.base包中, 算是字符处理工具, 其作用是连接多个元素, 可当作连接器来使用 生成 Joiner 的方法 工厂方法: Joiner on(String separator) Joiner on(char separator) 修饰方法: Joiner useForNull(final St...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-11-19-Guava%E4%B9%8BJoiner.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Guava之Joiner"}],["meta",{"property":"og:description","content":"Joiner在Guava的com.google.common.base包中, 算是字符处理工具, 其作用是连接多个元素, 可当作连接器来使用 生成 Joiner 的方法 工厂方法: Joiner on(String separator) Joiner on(char separator) 修饰方法: Joiner useForNull(final St..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T15:13:58.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Guava"}],["meta",{"property":"article:published_time","content":"2015-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T15:13:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Guava之Joiner\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T15:13:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"生成 Joiner 的方法","slug":"生成-joiner-的方法","link":"#生成-joiner-的方法","children":[]},{"level":2,"title":"join 方法","slug":"join-方法","link":"#join-方法","children":[]},{"level":2,"title":"appendTo 方法","slug":"appendto-方法","link":"#appendto-方法","children":[]},{"level":2,"title":"MapJoiner","slug":"mapjoiner","link":"#mapjoiner","children":[]}],"git":{"createdTime":1719155638000,"updatedTime":1719155638000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-11-19-Guava之Joiner.md","localizedDate":"2015年11月19日","excerpt":"","autoDesc":true}');export{E as comp,u as data};
