import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o,c as t,a as e,b as n,e as c,w as r,d as p}from"./app-DyxHq22R.js";const i="/assets/concurrent-Bym-n6yf.png",d={},u=e("p",null,[n("本文主要介绍"),e("code",null,"Runnable、Callable、Executor、Future"),n("等接口以及他们的关系")],-1),E=e("h2",{id:"并发相关接口图",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#并发相关接口图"},[e("span",null,"并发相关接口图")])],-1),y=e("figure",null,[e("img",{src:i,alt:"并发相关接口关系图",tabindex:"0",loading:"lazy"}),e("figcaption",null,"并发相关接口关系图")],-1),b=e("code",null,"Runnable、Thread",-1),v=p(`<h2 id="runnable" tabindex="-1"><a class="header-anchor" href="#runnable"><span>Runnable</span></a></h2><p><code>java.lang.Runnable</code>接口表示一个可以运行的单位, 它只有一个方法:<code>void run()</code>, <code>Theard</code>类是它的子类。<br> 由于<code>run()</code>方法返回值为<code>void</code>类型，所以<code>Runnable</code>在执行完任务之后无法返回任何结果。</p><h2 id="callable" tabindex="-1"><a class="header-anchor" href="#callable"><span>Callable</span></a></h2><p>Java1.5 出现了<code>java.util.concurrent.Callable</code>接口也可以表示一个可运行的单元, 它有一个<code>V call()</code>方法, 可以返回执行的结果.<br><code>Runnable</code>可以交给一个<code>Thread</code>直接启动一个线程, <code>Callable</code>一般需要交给<code>ExecuteService</code>来执行.</p><h2 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span>Executor</span></a></h2><p><code>java.util.concurrent.Executor</code>Java1.5出现的执行器, 角色类似于调度着, 跟它相关的内容包括线程池, Executor, Executors, ExecutorService, CompletionService, Future, Callable等, 它的引入大大简化了并发编程.<br> 它有一个<code>void execute(Runnable command)</code>方法可以调度执行<code>Runnable</code>.</p><h3 id="executorservice" tabindex="-1"><a class="header-anchor" href="#executorservice"><span>ExecutorService</span></a></h3><p><code>ExecutorService</code>是<code>Executor</code>最常用的子接口, 可以当成是<code>Runnable</code>和<code>Callable</code>的调度容器, 它重载了几个<code>submit</code>方法:</p><ul><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>: 提交一个有返回结果的任务(<code>Callable</code>)</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result)</code>: 提交一个<code>Runnable</code>, 正确执行完成的结果将会是<code>result</code></li><li><code>Future&lt;?&gt; submit(Runnable task)</code>:提交一个没有返回结果的任务(<code>Runnable</code>)</li></ul><p>还有其他方法, 暂不细说</p><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future"><span>Future</span></a></h2><p><code>java.util.concurrent.Future</code>是任务执行结果的查看着, 里面有方法比较简单</p><ul><li><code>boolean cancel(boolean mayInterruptIfRunning)</code>: 取消任务, 取消成功返回<code>true</code>, 取消失败返回<code>false</code>. 参数<code>mayInterruptIfRunning</code>仅表示是否允许取消正在执行却没有执行完毕的任务, 若任务还没执行, 则会取消该任务并返回<code>true</code>; 若任务已经执行完成, 则相当于取消失败, 直接返回<code>false</code>; 若任务执行中, 还没执行完, 这个参数就要起作用了, 传<code>true</code>则取消该正在执行的任务, 返回<code>true</code>表示取消成功.</li><li><code>boolean isCancelled()</code>: 任务是否被取消成功, 如果任务正常完成前被取消成功, 则返回<code>true</code></li><li><code>boolean isDone()</code>: 任务是否已经完成, 若任务完成, 则返回<code>true</code></li><li><code>V get()</code>: 获取执行结果, 这个方法会产生阻塞, 会一直等到任务执行完毕才返回(这个方法比较常用)</li><li><code>V get(long timeout, TimeUnit unit)</code>: 获取执行结果, 如果在指定时间内, 还没获取到结果, 就直接返回<code>null</code></li></ul><h2 id="总结及示例" tabindex="-1"><a class="header-anchor" href="#总结及示例"><span>总结及示例</span></a></h2><ul><li><code>Runnable</code>和<code>Callable</code>是可执行的单位(一个无返回值, 一个有返回值)</li><li><code>ExecutorService</code>可以提交一个可执行单位</li><li><code>Future</code>是用来存放调度完成返回的结果的,可通过<code>get()</code>方法获取执行结果</li></ul><p>下面是一个例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ConcurrentTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 创建一个执行器</span></span>
<span class="line"><span style="color:#E1E4E8;">        ExecutorService executor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Executors.</span><span style="color:#B392F0;">newFixedThreadPool</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">        // 1.Runnable通过Future返回结果为空</span></span>
<span class="line"><span style="color:#E1E4E8;">        Future&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; future1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Runnable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">            public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;runnable running.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#6A737D;">        // 2.Callable通过Future能返回结果</span></span>
<span class="line"><span style="color:#E1E4E8;">        Future&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; future2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> executor.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Callable&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#F97583;">            public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;callable running.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#9ECBFF;"> &quot;CallableResult&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#6A737D;">        // 获得任务的结果</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Runnable return:&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> future1.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// Runnable return:null</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Callable return:&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> future2.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// Callable return:CallableResult</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;get会抛出InterruptedException, ExecutionException异常&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        executor.</span><span style="color:#B392F0;">shutdown</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function m(h,F){const a=l("RouteLink");return o(),t("div",null,[u,E,y,e("p",null,[n("在"),c(a,{to:"/program/backend/2015-01-05-java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91.html"},{default:r(()=>[n("java中的并发")]),_:1}),n("中介绍了通过"),b,n("来创建线程，下面介绍上图中其他相关的接口")]),v])}const B=s(d,[["render",m],["__file","2016-03-01-java中的并发(二).html.vue"]]),_=JSON.parse('{"path":"/program/backend/2016-03-01-java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91(%E4%BA%8C).html","title":"Java中的并发(二)","lang":"zh-CN","frontmatter":{"title":"Java中的并发(二)","date":"2016-03-01T00:00:00.000Z","category":"Java","tag":["Java"],"order":-20160301,"description":"本文主要介绍Runnable、Callable、Executor、Future等接口以及他们的关系 并发相关接口图 并发相关接口关系图并发相关接口关系图 在中介绍了通过Runnable、Thread来创建线程，下面介绍上图中其他相关的接口 Runnable java.lang.Runnable接口表示一个可以运行的单位, 它只有一个方法:void ru...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-03-01-java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91(%E4%BA%8C).html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Java中的并发(二)"}],["meta",{"property":"og:description","content":"本文主要介绍Runnable、Callable、Executor、Future等接口以及他们的关系 并发相关接口图 并发相关接口关系图并发相关接口关系图 在中介绍了通过Runnable、Thread来创建线程，下面介绍上图中其他相关的接口 Runnable java.lang.Runnable接口表示一个可以运行的单位, 它只有一个方法:void ru..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:05:57.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2016-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的并发(二)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"并发相关接口图","slug":"并发相关接口图","link":"#并发相关接口图","children":[]},{"level":2,"title":"Runnable","slug":"runnable","link":"#runnable","children":[]},{"level":2,"title":"Callable","slug":"callable","link":"#callable","children":[]},{"level":2,"title":"Executor","slug":"executor","link":"#executor","children":[{"level":3,"title":"ExecutorService","slug":"executorservice","link":"#executorservice","children":[]}]},{"level":2,"title":"Future","slug":"future","link":"#future","children":[]},{"level":2,"title":"总结及示例","slug":"总结及示例","link":"#总结及示例","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1719158757000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-03-01-java中的并发(二).md","localizedDate":"2016年3月1日","excerpt":"","autoDesc":true}');export{B as comp,_ as data};
