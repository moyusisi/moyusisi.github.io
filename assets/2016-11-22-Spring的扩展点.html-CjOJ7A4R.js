import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as e,d as a}from"./app-C2hPYPQ7.js";const o={},l=a(`<p>在<code>Spring</code>启动的过程中, 会自动调用一些方法, 我们通过这些方法可以做一些特殊的操作. <code>Spring</code>中提供了几个常用的<code>Hook</code>类, 我们只需要实现这些类并覆盖其方法, 并注入到<code>Spring</code>中, <code>Spring</code>就会在恰当的时机调用我们定义的这些类. 下面就介绍几个常用的接口.</p><h2 id="beanfactorypostprocessor" tabindex="-1"><a class="header-anchor" href="#beanfactorypostprocessor"><span>BeanFactoryPostProcessor</span></a></h2><p>从名字上看, 它是<code>BeanFactory</code>的后处理类, 我们先了解下<code>BeanFactory</code>.</p><p><code>BeanFactory</code>的地位相当高, 它是各种<code>Bean</code>的工厂, 提供了一系列的<code>getBean</code>方法. 常用的<code>ApplicationContext</code>就继承了它.</p><p><code>BeanFactoryPostProcessor</code>就是<code>BeanFactory</code>的后处理类, 我们可以在<code>BeanFactory</code>初始化之后做一些操作. 它提供了个<code>postProcessBeanFactory()</code>方法, 这个方法被调用的时候, 所有的<code>Bean</code>已经被创建, 但是还没有被初始化. 也就是说, 通过它我们可以在初始化任何<code>Bean</code>之前, 做各种操作, 甚至读取并修改<code>BeanDefinition</code>(bean定义的元数据).</p><h2 id="beandefinitionregistrypostprocessor" tabindex="-1"><a class="header-anchor" href="#beandefinitionregistrypostprocessor"><span>BeanDefinitionRegistryPostProcessor</span></a></h2><p>这个接口继承了<code>BeanFactoryPostProcessor</code>. 从名字上来看, 这个接口是<code>BeanDefinitionRegistry</code>的后处理器, 我们先介绍下<code>BeanDefinitionRegistry</code>.</p><p><code>BeanDefinitionRegistry</code>是用来注册<code>BeanDefinition</code>的. <code>BeanDefinition</code>就是<code>Bean</code>的配置元数据或<code>Bean</code>的描述信息, 比如<code>Bean</code>的属性值, 构造方法的参数值等. 上面的<code>BeanFactory</code>的<code>BeanDefinition</code>也是由它注册的.</p><p><code>BeanDefinitionRegistryPostProcessor</code>是<code>BeanFactoryPostProcessor</code>的扩展, 允许在<code>BeanFactoryPostProcessor</code>被调用之前对<code>BeanDefinition</code>做一些操作, 尤其是它可以注册<code>BeanFactoryPostProcessor</code>的<code>BeanDefinition</code>. 它提供了一个方法<code>postProcessBeanDefinitionRegistry()</code>, 这个方法被调用的时候, 所有的<code>BeanDefinition</code>已经被加载了, 但是所有的<code>Bean</code>还没被创建.</p><p><strong>注意</strong>:</p><ul><li>所有的<code>Bean</code>生成都有个顺序: <code>定义 --&gt; 创建 --&gt; 初始化</code>.</li><li><code>BeanDefinitionRegistryPostProcessor</code>的<code>postProcessBeanDefinitionRegistry</code>方法在<code>Bean</code>被<code>定义</code>但还没被<code>创建</code>的时候执行.</li><li><code>BeanFactoryPostProcessor</code>的<code>postProcessBeanFactory</code>方法在<code>Bean</code>被<code>创建</code>但还没被<code>初始化</code>的时候执行</li></ul><h2 id="beanpostprocessor" tabindex="-1"><a class="header-anchor" href="#beanpostprocessor"><span>BeanPostProcessor</span></a></h2><p>从名字上来看, 这个接口是<code>Bean</code>的后处理器, 通过它我们可以在<code>Bean</code>初始化前后做一些操作. 它提供了两个方法:</p><ul><li><code>postProcessBeforeInitialization</code>: 在<code>Bean</code>初始化之 <strong>前</strong> 做一些操作</li><li><code>postProcessAfterInitialization</code>: 在<code>Bean</code>初始化之 <strong>后</strong> 做一些操作</li></ul><p>注意这两个方法都有两个参数: <code>bean</code>和<code>beanName</code>, 并需要返回一个对象. 所有的<code>Bean</code>在被初始化前后都会调用这两个方法, 我们可以过滤出所关心的<code>Bean</code>对其进行一些操作, 比如把某个<code>Bean</code>替换成代理对象等.</p><p>另外, 在<code>Bean</code>中可以通过<code>@PostConstruct</code>注解来指定在被<code>Construct</code>之后紧接着做一些初始化操作, 上面的<code>postProcessAfterInitialization</code>方法是在<code>@PostConstruct</code>之后被调用的.</p><h2 id="一些例子" tabindex="-1"><a class="header-anchor" href="#一些例子"><span>一些例子</span></a></h2><p>我们通过一些简单例子来熟悉下上面的几个接口:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 一个普通的 Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestA</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestA PostConstruct&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> TestB testB;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 另一个普通的 Bean. 没看错, 就是循环依赖.</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestB</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;TestB PostConstruct&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> TestA testA;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 后处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyBeanDefinitionRegistryPostProcessor</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> BeanDefinitionRegistryPostProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 这个方法来自 BeanDefinitionRegistryPostProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> postProcessBeanDefinitionRegistry</span><span style="color:#E1E4E8;">(BeanDefinitionRegistry </span><span style="color:#FFAB70;">registry</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postProcessBeanDefinitionRegistry&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 这个方法来自 BeanFactoryPostProcessor</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> postProcessBeanFactory</span><span style="color:#E1E4E8;">(ConfigurableListableBeanFactory </span><span style="color:#FFAB70;">beanFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;postProcessBeanFactory&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Bean后处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyBeanPostProcessor</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> BeanPostProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TestA </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;">  TestB) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;beforeInitialization&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessAfterInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> TestA </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;">  TestB) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;afterInitialization&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用法就类似于上面, 那几条数据语句的顺序如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>postProcessBeanDefinitionRegistry</span></span>
<span class="line"><span>postProcessBeanFactory</span></span>
<span class="line"><span>beforeInitialization</span></span>
<span class="line"><span>TestB PostConstruct</span></span>
<span class="line"><span>afterInitialization</span></span>
<span class="line"><span>beforeInitialization</span></span>
<span class="line"><span>TestA PostConstruct</span></span>
<span class="line"><span>afterInitialization</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initializingbean" tabindex="-1"><a class="header-anchor" href="#initializingbean"><span>InitializingBean</span></a></h2><p>这个接口有一个方法:<code>afterPropertiesSet</code>, 该方法在所有的属性都被赋值后调用. 属性被赋值是在初始化的时候做的, 与<code>BeanPostProcessor</code>结合来看, <code>afterPropertiesSet</code>方法将在<code>postProcessBeforeInitialization</code>和<code>postProcessAfterInitialization</code>之间被调用.</p><h2 id="applicationcontextaware" tabindex="-1"><a class="header-anchor" href="#applicationcontextaware"><span>ApplicationContextAware</span></a></h2><p><code>Spring</code>提供了很多<code>Aware</code>接口, 比如<code>BeanFactoryAware</code>、 <code>ApplicationContextAware</code>、<code>ResourceLoaderAware</code>、 <code>ServletContextAware</code>等等. 这些接口一般都有个<code>setXXX</code>来设置对应的组件. 如果我们的<code>Bean</code>实现了这些<code>Aware的时候</code>就可以获取对应的资源.</p><h2 id="applicationlistener" tabindex="-1"><a class="header-anchor" href="#applicationlistener"><span>ApplicationListener</span></a></h2><p>这跟<code>Servlet</code>中的监听器一样, 采用了观察者模式. 监听器往往都是监听某些事件源, 下面是配合<code>ApplicationContextAware</code>一起使用的例子.</p><p>我们定义一个事件, 在实现了<code>ApplicationContextAware</code>的<code>Bean</code>中触发事件, 在实现了<code>ApplicationListener</code>的类中对事件做出反应.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 自定义事件</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyEvent</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> ApplicationEvent</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> MyEvent</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        super</span><span style="color:#E1E4E8;">(source);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 自定义 Bean 实现 ApplicationContextAware 接口</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HelloBean</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> ApplicationContextAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> ApplicationContext applicationContext;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setApplicationContext</span><span style="color:#E1E4E8;">(ApplicationContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.applicationContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 当调用 setName 时, 触发事件</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        applicationContext.</span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 这行代码执行完会立即被监听到</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 自定义监听器, 监听上面的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyApplicationListener</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> ApplicationListener</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> onApplicationEvent</span><span style="color:#E1E4E8;">(ApplicationEvent </span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (event </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> MyEvent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(((HelloBean)event.</span><span style="color:#B392F0;">getSource</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),p=[l];function c(i,t){return n(),e("div",null,p)}const E=s(o,[["render",c],["__file","2016-11-22-Spring的扩展点.html.vue"]]),y=JSON.parse('{"path":"/program/code/2016-11-22-Spring%E7%9A%84%E6%89%A9%E5%B1%95%E7%82%B9.html","title":"Spring的扩展点","lang":"zh-CN","frontmatter":{"title":"Spring的扩展点","date":"2016-11-22T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20161122,"description":"在Spring启动的过程中, 会自动调用一些方法, 我们通过这些方法可以做一些特殊的操作. Spring中提供了几个常用的Hook类, 我们只需要实现这些类并覆盖其方法, 并注入到Spring中, Spring就会在恰当的时机调用我们定义的这些类. 下面就介绍几个常用的接口. BeanFactoryPostProcessor 从名字上看, 它是Bean...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2016-11-22-Spring%E7%9A%84%E6%89%A9%E5%B1%95%E7%82%B9.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring的扩展点"}],["meta",{"property":"og:description","content":"在Spring启动的过程中, 会自动调用一些方法, 我们通过这些方法可以做一些特殊的操作. Spring中提供了几个常用的Hook类, 我们只需要实现这些类并覆盖其方法, 并注入到Spring中, Spring就会在恰当的时机调用我们定义的这些类. 下面就介绍几个常用的接口. BeanFactoryPostProcessor 从名字上看, 它是Bean..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2016-11-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring的扩展点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"BeanFactoryPostProcessor","slug":"beanfactorypostprocessor","link":"#beanfactorypostprocessor","children":[]},{"level":2,"title":"BeanDefinitionRegistryPostProcessor","slug":"beandefinitionregistrypostprocessor","link":"#beandefinitionregistrypostprocessor","children":[]},{"level":2,"title":"BeanPostProcessor","slug":"beanpostprocessor","link":"#beanpostprocessor","children":[]},{"level":2,"title":"一些例子","slug":"一些例子","link":"#一些例子","children":[]},{"level":2,"title":"InitializingBean","slug":"initializingbean","link":"#initializingbean","children":[]},{"level":2,"title":"ApplicationContextAware","slug":"applicationcontextaware","link":"#applicationcontextaware","children":[]},{"level":2,"title":"ApplicationListener","slug":"applicationlistener","link":"#applicationlistener","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2016-11-22-Spring的扩展点.md","localizedDate":"2016年11月22日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
