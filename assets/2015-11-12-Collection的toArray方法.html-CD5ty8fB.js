import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as l}from"./app-DA1JdGe8.js";const e={},o=l(`<p>Java中Collection的有两个toArray方法:<code>Object[] toArray()</code>和<code>&lt;T&gt; T[] toArray(T[] a)</code><br> 后面那个范型方法略难懂, 整理时发现些比较厉害的地方,记录下来</p><p><code>&lt;T&gt; T[] toArray(T[] a)</code>方法在抽象类<code>AbstractCollection</code>中有个实现<br> 该方法也是把集合转成数组, 你可以指定转成什么类型的数组,若转换的类型与集合中元素类型不一样,会抛<code>ArrayStoreException</code>.<br> 关于参数的写法上, 这个数组a可以是空的, 也可以不空, 会有不同的效果, 看下面代码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 先创建一个集合</span></span>
<span class="line"><span style="color:#E1E4E8;">Set&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; set </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> HashSet&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 可以这么写, 长度为0, 只表示转成什么类型, 在内部还会创建一个长度为5的数组</span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 也可以这么写, 长度是集合的size, 在内部会把集合里的元素放到这个传参时创建的数组</span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[set.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">()]);</span></span>
<span class="line"><span style="color:#6A737D;">// 还可以这么写, 长度大于集合的size, 在内部会把集合里的元素放到这个传参时创建的数组, 后面多出来的3(8-5)个位置填充null</span></span>
<span class="line"><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> set.</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#6A737D;">// 无论哪种方式, 如果传入的类型与即集合里元素的类型不匹配, 就会抛出ArrayStoreException</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细看下JDK1.7的源码:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> &lt;</span><span style="color:#E1E4E8;">T</span><span style="color:#F97583;">&gt;</span><span style="color:#F97583;"> T</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">[] a) {</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> size</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    T</span><span style="color:#E1E4E8;">[] r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.length </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> size </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">[])java.lang.reflect.Array.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">(a.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getComponentType</span><span style="color:#E1E4E8;">(), size);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">E</span><span style="color:#E1E4E8;">&gt; it </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> r.length; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> r) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                r[i] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#F97583;"> if</span><span style="color:#E1E4E8;"> (a.length </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> i) {           </span><span style="color:#6A737D;">// 仔细想了下, 貌似这俩else分支根本不会被执行</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">copyOf</span><span style="color:#E1E4E8;">(r, i);</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {                             </span><span style="color:#6A737D;">// 但人家可是JDK里的源码呀, 不可能出错吧!</span></span>
<span class="line"><span style="color:#E1E4E8;">                System.</span><span style="color:#B392F0;">arraycopy</span><span style="color:#E1E4E8;">(r, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, a, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, i);</span></span>
<span class="line"><span style="color:#F97583;">                if</span><span style="color:#E1E4E8;"> (a.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    a[i] </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        r[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (T)it.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> it.</span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">?</span><span style="color:#B392F0;"> finishToArray</span><span style="color:#E1E4E8;">(r, it) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码里注释中提的问题我想了好久, 我考虑的情况都是正常情况, 在并发环境中, 集合里的元素有可能会被其他线程remove掉, 这就造成了iterator迭代出的元素个数小于size的情况, 注释里的那俩else就会被执行到了!<br> JDK源码写的还真是考虑周到啊...</p>`,6),p=[o];function t(r,c){return n(),a("div",null,p)}const y=s(e,[["render",t],["__file","2015-11-12-Collection的toArray方法.html.vue"]]),d=JSON.parse('{"path":"/program/backend/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html","title":"Collection的toArray方法","lang":"zh-CN","frontmatter":{"title":"Collection的toArray方法","date":"2015-11-12T00:00:00.000Z","category":"Java","tag":["Java"],"order":-20151112,"description":"Java中Collection的有两个toArray方法:Object[] toArray()和<T> T[] toArray(T[] a) 后面那个范型方法略难懂, 整理时发现些比较厉害的地方,记录下来 <T> T[] toArray(T[] a)方法在抽象类AbstractCollection中有个实现 该方法也是把集合转成数组, 你可以指定转成什...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-11-12-Collection%E7%9A%84toArray%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Collection的toArray方法"}],["meta",{"property":"og:description","content":"Java中Collection的有两个toArray方法:Object[] toArray()和<T> T[] toArray(T[] a) 后面那个范型方法略难懂, 整理时发现些比较厉害的地方,记录下来 <T> T[] toArray(T[] a)方法在抽象类AbstractCollection中有个实现 该方法也是把集合转成数组, 你可以指定转成什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T15:13:58.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2015-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T15:13:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Collection的toArray方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T15:13:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[],"git":{"createdTime":1719155638000,"updatedTime":1719155638000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-11-12-Collection的toArray方法.md","localizedDate":"2015年11月12日","excerpt":"","autoDesc":true}');export{y as comp,d as data};
