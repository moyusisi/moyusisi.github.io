import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-Ww47VjS3.js";const l={},p=e(`<h2 id="问题背景" tabindex="-1"><a class="header-anchor" href="#问题背景"><span>问题背景</span></a></h2><p>通常情况下, 后端的变量命名方式都是<code>驼峰命名法(Camel Case)</code>, 而前端就不一定了, 有的用的是<code>Snake Case</code>(即多个单词之间用<code>_</code>隔开)。 在不改变命名的情况下, 如何把不同名字的参数进行绑定呢？比如<code>user_name</code>绑定到<code>userName</code>上。</p><ul><li>可以通过<code>@RequestParam(&quot;user_name&quot;) String userName</code>这种形式, 但是当参数过多时也不优雅</li><li>通常情况我们会定义一个实体对象来接收参数, 但参数名不同无法自动绑定, 我们可以通过本文的方法实现非常简单的绑定</li></ul><h2 id="场景描述" tabindex="-1"><a class="header-anchor" href="#场景描述"><span>场景描述</span></a></h2><p>如下一个<code>Controller</code>参数是通过一个实体<code>Test</code>接收的, 但是要接收的参数名称跟实体类的字段名称对应不上</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// Controller</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/test/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;index.htm&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">home</span><span style="color:#E1E4E8;">(Test </span><span style="color:#FFAB70;">test</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;It works!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Test实体</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Test</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    //  要接收参数 user_name</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String userName;</span></span>
<span class="line"><span style="color:#6A737D;">    //  要接收参数 home_address</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上, <code>Test</code>中的字段分别叫<code>userName</code>和<code>address</code>, 但参数却为<code>user_name</code>和<code>home_address</code>. 接下来我们就要实现这种绑定关系</p><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><p>定义如下的注解, 注解只允许添加到字段上, 需要指明别名列表(即把参数中的别名绑定到实体字段上)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.FIELD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#F97583;"> ValueFrom</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 参数名(别名)列表</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#F97583;">    String</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们的实体类加上相应的注解</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// Test实体加上注解后</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Test</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 表明 userName 字段的值来自于参数中的 user_name</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ValueFrom</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;user_name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String userName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ValueFrom</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;home_address&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String address;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定义databinder" tabindex="-1"><a class="header-anchor" href="#定义databinder"><span>定义<code>DataBinder</code></span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> AliasDataBinder</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> ExtendedServletRequestDataBinder</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> AliasDataBinder</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">objectName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        super</span><span style="color:#E1E4E8;">(target, objectName);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 复写addBindValues方法</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> mpvs</span><span style="color:#6A737D;"> 这里面存的就是请求参数的key-value对</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> request</span><span style="color:#6A737D;"> 请求本身, 这里没有用到</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> addBindValues</span><span style="color:#E1E4E8;">(MutablePropertyValues </span><span style="color:#FFAB70;">mpvs</span><span style="color:#E1E4E8;">, ServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addBindValues</span><span style="color:#E1E4E8;">(mpvs, request);</span></span>
<span class="line"><span style="color:#6A737D;">        // 处理要绑定参数的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; targetClass </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> getTarget</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取对象的所有字段(拿到Test类的字段)</span></span>
<span class="line"><span style="color:#F97583;">        Field</span><span style="color:#E1E4E8;">[] fields </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> targetClass.</span><span style="color:#B392F0;">getDeclaredFields</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 处理所有字段</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (Field field </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fields) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 原始字段上的注解</span></span>
<span class="line"><span style="color:#E1E4E8;">            ValueFrom valueFromAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> field.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(ValueFrom.class);</span></span>
<span class="line"><span style="color:#6A737D;">            // 若参数中包含原始字段或者字段没有别名注解, 则跳过该字段</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (mpvs.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> valueFromAnnotation </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">                continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#6A737D;">            // 参数中没有原始字段且字段上有别名注解, 则依次取别名列表中的别名, 在参数中最先找到的别名的值赋值给原始字段</span></span>
<span class="line"><span style="color:#F97583;">            for</span><span style="color:#E1E4E8;"> (String alias </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> valueFromAnnotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#6A737D;">                // 若参数中包含该别名, 则把别名的值赋值给原始字段</span></span>
<span class="line"><span style="color:#F97583;">                if</span><span style="color:#E1E4E8;"> (mpvs.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(alias)) {</span></span>
<span class="line"><span style="color:#6A737D;">                    // 给原始字段赋值</span></span>
<span class="line"><span style="color:#E1E4E8;">                    mpvs.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(field.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">(), mpvs.</span><span style="color:#B392F0;">getPropertyValue</span><span style="color:#E1E4E8;">(alias).</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">                    // 跳出循环防止取其它别名</span></span>
<span class="line"><span style="color:#F97583;">                    break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义的数据绑定器(<code>AliasDataBinder</code>)要继承自<code>ExtendedServletRequestDataBinder</code></li><li>复写<code>addBindValues</code>方法, 该方法的第一个参数<code>MutablePropertyValues</code>里面存的就是请求参数的<code>key-value</code>对, 第二个参数是<code>ServletRequest</code>, 这里没有用到</li><li><code>getTarget()</code>是继承自<code>DataBinder</code>的方法, 可以获取参数要绑定的实体类对象</li><li>遍历<code>targetClass</code>的所有字段, 字段上有注解则处理, 没有则不处理</li><li>从内层的循环可以看出, 注解其实可以添加多个别名参数, 这里会取出第一个有值的参数</li></ul><h2 id="定义modelattributemethodprocessor" tabindex="-1"><a class="header-anchor" href="#定义modelattributemethodprocessor"><span>定义<code>ModelAttributeMethodProcessor</code></span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> AliasModelAttributeMethodProcessor</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> ServletModelAttributeMethodProcessor</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> ApplicationContextAware</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> ApplicationContext applicationContext;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> AliasModelAttributeMethodProcessor</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">boolean</span><span style="color:#FFAB70;"> annotationNotRequired</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        super</span><span style="color:#E1E4E8;">(annotationNotRequired);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setApplicationContext</span><span style="color:#E1E4E8;">(ApplicationContext </span><span style="color:#FFAB70;">applicationContext</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.applicationContext </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> applicationContext;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> bindRequestParameters</span><span style="color:#E1E4E8;">(WebDataBinder </span><span style="color:#FFAB70;">binder</span><span style="color:#E1E4E8;">, NativeWebRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        AliasDataBinder aliasBinder </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AliasDataBinder</span><span style="color:#E1E4E8;">(binder.</span><span style="color:#B392F0;">getTarget</span><span style="color:#E1E4E8;">(), binder.</span><span style="color:#B392F0;">getObjectName</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        RequestMappingHandlerAdapter requestMappingHandlerAdapter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> applicationContext.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(RequestMappingHandlerAdapter.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        requestMappingHandlerAdapter.</span><span style="color:#B392F0;">getWebBindingInitializer</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">initBinder</span><span style="color:#E1E4E8;">(aliasBinder);</span></span>
<span class="line"><span style="color:#E1E4E8;">        aliasBinder.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(request.</span><span style="color:#B392F0;">getNativeRequest</span><span style="color:#E1E4E8;">(ServletRequest.class));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义的属性处理器要继承自<code>ServletModelAttributeMethodProcessor</code>, 重写<code>bindRequestParameters</code>方法, 这个方法就是绑定数据对象的时候调用的方法。</li><li>实现<code>ApplicationContextAware</code>是为了获取<code>ApplicationContext</code></li></ul><p>使用<code>SpringMVC</code>时, 所有的请求都是最先经过<code>DispatcherServlet</code>的, 然后由<code>DispatcherServlet</code>选择合适的<code>HandlerMapping</code>和<code>HandlerAdapter</code>来处理请求, <code>HandlerMapping</code>的作用就是找到请求所对应的方, 而<code>HandlerAdapter</code>则来处理和请求相关的的各种事情。我们这里用的请求参数绑定也是通过<code>HandlerAdapter</code>来做的, 父类<code>ServletModelAttributeMethodProcessor</code>实际上实现了<code>HandlerMethodArgumentResolver</code>接口。该接口有两个方法如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 返回是否支持这种参数</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#F97583;">    boolean</span><span style="color:#B392F0;"> supportsParameter</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 是具体处理参数的方法</span></span>
<span class="line"><span style="color:#6A737D;">    */</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object </span><span style="color:#B392F0;">resolveArgument</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, ModelAndViewContainer </span><span style="color:#FFAB70;">mavContainer</span><span style="color:#E1E4E8;">, NativeWebRequest </span><span style="color:#FFAB70;">webRequest</span><span style="color:#E1E4E8;">, WebDataBinderFactory </span><span style="color:#FFAB70;">binderFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之所以单独拿出来说, 是因为后面还会涉及到。<code>ServletModelAttributeMethodProcessor</code>是用来处理复杂对象的(非基本类型), 比如我们定义的<code>Test</code>。</p><h2 id="添加到spring中" tabindex="-1"><a class="header-anchor" href="#添加到spring中"><span>添加到Spring中</span></a></h2><p>我们定义好了属性处理器, 还要把它添加到Spring中才能生效</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> WebMvcConfig</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> WebMvcConfigurer</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    protected</span><span style="color:#E1E4E8;"> AliasModelAttributeMethodProcessor </span><span style="color:#B392F0;">processor</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> AliasModelAttributeMethodProcessor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造器中传了一个参数<code>true</code>, 这是因为<code>ModelAttributeMethodProcessor</code>是否支持某种类型的参数，是这样判断的</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// ServletModelAttributeMethodProcessor的父类</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> ModelAttributeMethodProcessor</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> HandlerMethodArgumentResolver</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">HandlerMethodReturnValueHandler</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> boolean</span><span style="color:#B392F0;"> supportsParameter</span><span style="color:#E1E4E8;">(MethodParameter </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> (parameter.</span><span style="color:#B392F0;">hasParameterAnnotation</span><span style="color:#E1E4E8;">(ModelAttribute.class) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">                (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.annotationNotRequired </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">BeanUtils.</span><span style="color:#B392F0;">isSimpleProperty</span><span style="color:#E1E4E8;">(parameter.</span><span style="color:#B392F0;">getParameterType</span><span style="color:#E1E4E8;">())));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先, 判断参数对象对象是否有<code>ModelAttribute</code>注解, 有则处理; 如果没有，则判断<code>annotationNotRequired</code>(注解 <strong>不是</strong> 必需的), 如果为<code>true</code>(表示非必需)并且参数对象不是简单对象, 则处理。这里参数对象<code>Test</code>是没有<code>ModelAttribute</code>注解的, 所以我们就需要传参为<code>true</code>, 表示不一定需要注解。</p><p>通过以上步骤, 则可以灵活控制参数的对应关系了。</p>`,28),o=[p];function r(t,i){return n(),a("div",null,o)}const E=s(l,[["render",r],["__file","2018-09-11-SpringMVC实体对象绑定参数时自定义对应关系.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2018-09-11-SpringMVC%E5%AE%9E%E4%BD%93%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E5%8F%82%E6%95%B0%E6%97%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.html","title":"SpringMVC实体对象绑定参数时自定义对应关系","lang":"zh-CN","frontmatter":{"title":"SpringMVC实体对象绑定参数时自定义对应关系","date":"2018-09-11T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20180911,"description":"问题背景 通常情况下, 后端的变量命名方式都是驼峰命名法(Camel Case), 而前端就不一定了, 有的用的是Snake Case(即多个单词之间用_隔开)。 在不改变命名的情况下, 如何把不同名字的参数进行绑定呢？比如user_name绑定到userName上。 可以通过@RequestParam(\\"user_name\\") String user...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2018-09-11-SpringMVC%E5%AE%9E%E4%BD%93%E5%AF%B9%E8%B1%A1%E7%BB%91%E5%AE%9A%E5%8F%82%E6%95%B0%E6%97%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringMVC实体对象绑定参数时自定义对应关系"}],["meta",{"property":"og:description","content":"问题背景 通常情况下, 后端的变量命名方式都是驼峰命名法(Camel Case), 而前端就不一定了, 有的用的是Snake Case(即多个单词之间用_隔开)。 在不改变命名的情况下, 如何把不同名字的参数进行绑定呢？比如user_name绑定到userName上。 可以通过@RequestParam(\\"user_name\\") String user..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2018-09-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC实体对象绑定参数时自定义对应关系\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"问题背景","slug":"问题背景","link":"#问题背景","children":[]},{"level":2,"title":"场景描述","slug":"场景描述","link":"#场景描述","children":[]},{"level":2,"title":"自定义注解","slug":"自定义注解","link":"#自定义注解","children":[]},{"level":2,"title":"定义DataBinder","slug":"定义databinder","link":"#定义databinder","children":[]},{"level":2,"title":"定义ModelAttributeMethodProcessor","slug":"定义modelattributemethodprocessor","link":"#定义modelattributemethodprocessor","children":[]},{"level":2,"title":"添加到Spring中","slug":"添加到spring中","link":"#添加到spring中","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2018-09-11-SpringMVC实体对象绑定参数时自定义对应关系.md","localizedDate":"2018年9月11日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
