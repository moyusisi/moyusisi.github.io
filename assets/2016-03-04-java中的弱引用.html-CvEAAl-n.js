import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as t,d as o}from"./app-CN8sbHCb.js";const c="/assets/reference-BLbJ7W4v.png",r={},n=o('<p>第一次接触到弱引用<code>WeakReference</code>是在<code>ThreadLocal</code>中, 于是就把相关知识梳理了下</p><h2 id="引用简介" tabindex="-1"><a class="header-anchor" href="#引用简介"><span>引用简介</span></a></h2><p>引用跟垃圾回收相关, 关于引用的类位于<code>java.long.ref</code>包中, 他们的继承关系图如下(蓝色表示抽象类):</p><figure><img src="'+c+'" alt="引用相关的类" tabindex="0" loading="lazy"><figcaption>引用相关的类</figcaption></figure><p>按照他们阻止被回收的能力强弱可以分为: <code>强引用 &gt; 软引用(SoftReference) &gt; 弱引用(WeakReference) &gt; 虚引用(PhantomReference)</code></p><h2 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用"><span>强引用</span></a></h2><p>就是我们平时使用的对象的引用, 比如:<code>Object o = new Object()</code>, 那个<code>o</code>就是一个强引用.<br> 如果一个对象通过强引用链可到达, 它是不会被回收的, 不可达时才有可能被回收.</p><h2 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用"><span>弱引用</span></a></h2><p>先说下弱引用(<code>WeakReference</code>), 它阻止被回收的能力不太强, 由JVM决定何时回收. 可以这样创建一个弱引用对象: <code>WeakReference&lt;Object&gt; weakObject = new WeakReference&lt;Object&gt;(o);</code>, 通过<code>weakObject.get()</code>就可以得到引用的对象了.<br> 因为弱引用不能阻止回收, 所以如果没有其他强引用指向这个对象时, 当使用get方法时说不准就返回<code>null</code>了.<br> 如果一个对象是弱引用可到达, 那么这个对象会JVM的下一个回收周期销毁.<br> 有一个<code>WeakHashMap</code>和<code>HashMap</code>几乎一样, 唯一的区别就是它的键(key)使用<code>WeakReference</code>引用, 当它里面的某个key被标记为垃圾时, 对应的这个<code>Entry</code>就被自动移除了</p><h2 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用"><span>软引用</span></a></h2><p>软引用(<code>SoftReference</code>)比弱引用稍微强一些, 当内存不足时(即将<code>OutOfMemory</code>)垃圾回收器才会回收这些软引用可到达的对象.</p><h2 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用"><span>虚引用</span></a></h2><p>虚引用(PhantomReference)指向的对象十分脆弱,我们不能用get方法来得到其指向的对象(get总返回<code>null</code>).<br> 它的唯一作用就是当其指向的对象被回收之后，自己被加入到引用队列，用作记录该引用指向的对象已被销毁。</p><h2 id="引用队列" tabindex="-1"><a class="header-anchor" href="#引用队列"><span>引用队列</span></a></h2><p>各种引用的父类<code>Reference</code>中有个字段<code>queue</code>, 它就是引用队列<code>ReferenceQueue</code>.<br> 一旦弱引用对象开始返回<code>null</code>, 该引用指向的对象就被标记成了垃圾.<br> 当构造时传入一个<code>ReferenceQueue</code>对象, 则当引用只想的对象被标记为垃圾时, 这个引用对象会自动地加入到引用队列里面.<br> 我们可以处理传入的引用队列来主动清理一些已经不用的引用.<br> 软引用和弱引用被放入引用队列时, 并不能保证此时引用对象已经被销毁了(对象可以在<code>finalize</code>方法里再生), 虚引用放入引用队列时, 可保证引用对象已经被销毁了.</p>',15),d=[n];function i(l,p){return t(),a("div",null,d)}const m=e(r,[["render",i],["__file","2016-03-04-java中的弱引用.html.vue"]]),f=JSON.parse('{"path":"/program/backend/2016-03-04-java%E4%B8%AD%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8.html","title":"Java中的弱引用","lang":"zh-CN","frontmatter":{"title":"Java中的弱引用","date":"2016-03-04T00:00:00.000Z","category":"Java","tag":["Java"],"order":-20160301,"description":"第一次接触到弱引用WeakReference是在ThreadLocal中, 于是就把相关知识梳理了下 引用简介 引用跟垃圾回收相关, 关于引用的类位于java.long.ref包中, 他们的继承关系图如下(蓝色表示抽象类): 引用相关的类引用相关的类 按照他们阻止被回收的能力强弱可以分为: 强引用 > 软引用(SoftReference) > 弱引用(...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-03-04-java%E4%B8%AD%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Java中的弱引用"}],["meta",{"property":"og:description","content":"第一次接触到弱引用WeakReference是在ThreadLocal中, 于是就把相关知识梳理了下 引用简介 引用跟垃圾回收相关, 关于引用的类位于java.long.ref包中, 他们的继承关系图如下(蓝色表示抽象类): 引用相关的类引用相关的类 按照他们阻止被回收的能力强弱可以分为: 强引用 > 软引用(SoftReference) > 弱引用(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:05:57.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2016-03-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的弱引用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-03-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"引用简介","slug":"引用简介","link":"#引用简介","children":[]},{"level":2,"title":"强引用","slug":"强引用","link":"#强引用","children":[]},{"level":2,"title":"弱引用","slug":"弱引用","link":"#弱引用","children":[]},{"level":2,"title":"软引用","slug":"软引用","link":"#软引用","children":[]},{"level":2,"title":"虚引用","slug":"虚引用","link":"#虚引用","children":[]},{"level":2,"title":"引用队列","slug":"引用队列","link":"#引用队列","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1719158757000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-03-04-java中的弱引用.md","localizedDate":"2016年3月4日","excerpt":"","autoDesc":true}');export{m as comp,f as data};
