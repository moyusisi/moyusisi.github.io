import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,c as d,a as e,b as t,e as a,w as o,d as s,o as c}from"./app-DQ46ret3.js";const i="/assets/multimap-CYjlH-8R.png",r={},u=e("p",null,[t("guava的collection包里新增加了几个集合类型非常实用"),e("br"),t(" 新增类型有:Multiset、Multimap、BiMap、Table、")],-1),E=e("h2",{id:"multiset",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#multiset"},[e("span",null,"Multiset")])],-1),y=e("code",null,"Multiset",-1),m=e("code",null,"Collection",-1),g=e("code",null,"Set",-1),h=e("code",null,"Multiset",-1),b=e("code",null,"Map<E, Integer>",-1),M=e("br",null,null,-1),v=e("code",null,"Multiset",-1),B=e("code",null,"size()",-1),k=e("br",null,null,-1),F=e("code",null,"Multiset",-1),_=s('<ul><li><code>int count(Object element)</code>: 返回给定元素的计数</li><li><code>int add(E element, int occurrences)</code>: 添加元素并指定元素个数; 返回添加之前该元素的个数, 一般为0</li><li><code>int remove(Object element, int occurrences)</code>: 移除元素, 若该元素个数小于指定个数,则全移除; 返回操作之前该元素的个数</li><li><code>int setCount(E element, int count)</code>: 设定某一个元素的重复次数, 相当于add和remove的组合体; 返回操作之前该元素的个数</li><li><code>boolean setCount(E element, int oldCount, int newCount)</code>: 将符合原有重复个数的元素修改为新的重复次数, 原来个数不为oldCount不会修改</li></ul><h3 id="视图操作" tabindex="-1"><a class="header-anchor" href="#视图操作"><span>视图操作</span></a></h3><p>对视图的所有操作都会反映到原来的Multiset上</p><ul><li><code>Set&lt;E&gt; elementSet()</code>: 返回仅包含不同元素的set, 对set进行移除, 会反映到multiset上(若multi中有<code>keyX2</code>, 则会全被移除)</li><li><code>Set&lt;Entry&lt;E&gt;&gt; entrySet()</code>: 返回Set&lt;Multiset.Entry&gt;, 包含的Entry支持使用<code>getElement()</code>和<code>getCount()</code></li></ul><h3 id="multiset的各种实现" tabindex="-1"><a class="header-anchor" href="#multiset的各种实现"><span>Multiset的各种实现</span></a></h3><p>Multiset的实现类, 可以通过构造方法new出来, 也可以调用<code>XXXMultiset.create()</code>静态函数来创建<br> 它们都直接继承了Multiset接口:</p><table><thead><tr><th>Guava实现</th><th>对比JDK的Map</th><th style="text-align:center;">是否支持null</th></tr></thead><tbody><tr><td>HashMultiset</td><td>HashMap</td><td style="text-align:center;">Y</td></tr><tr><td>LinkedHashSet</td><td>LinkedHashMap</td><td style="text-align:center;">Y</td></tr><tr><td>TreeMultiset</td><td>TreeMap</td><td style="text-align:center;">Y</td></tr><tr><td>EnumMultiset</td><td>EnumMap</td><td style="text-align:center;">N</td></tr><tr><td>ImmutableMultiset</td><td>ImmutableMap</td><td style="text-align:center;">N</td></tr><tr><td>ConcurrentHashMultiset</td><td>ConcurrentHashMap</td><td style="text-align:center;">N</td></tr><tr><td>ForwardingMultiset</td><td></td><td style="text-align:center;"></td></tr></tbody></table><h2 id="multimap" tabindex="-1"><a class="header-anchor" href="#multimap"><span>Multimap</span></a></h2>',8),V=e("code",null,"Multimap",-1),C=e("code",null,"Map<K, Collection<V>>",-1),R=e("br",null,null,-1),S=e("code",null,"Multimap",-1),f=e("code",null,"Map",-1),x=e("code",null,"Multimap",-1),T=s('<p><code>Multimap</code>接口定义的普通方法有:</p><ul><li><code>int size()</code>: 返回键值对的个数 <code>a-&gt;1, a-&gt;2</code>算两个</li><li><code>boolean isEmpty()</code>: 是否为空</li><li><code>boolean containsKey(Object key)</code>: 是否包含key</li><li><code>boolean containsValue(Object value)</code>: 是否包含value</li><li><code>boolean containsEntry(Object key, Object value)</code>: 是否包含key-value对</li><li><code>boolean put(K key, V value)</code>: 如果map元素增加了则返回true, 对于允许存在重复键值对的实现类总是返回<code>true</code>, 不允许重复键值对存在的实现类才有可能返回<code>false</code></li><li><code>boolean putAll(K key, Iterable values)</code>: map改变则返回true</li><li><code>boolean putAll(Multimap multimap)</code>: map改变则返回true</li><li><code>boolean remove(Object key, Object value)</code>: 移除键值对, map变了返回true</li><li><code>Collection&lt;V&gt; removeAll(Object key)</code>: 移除与key相关的所有values(key也没了), 并返回values组成的集合(可能为空)</li><li><code>Collection&lt;V&gt; replaceValues(K key, Iterable values)</code>: 把与key相关的value全替换掉, 如果values为空, 则等同于<code>removeAll(key)</code>, 如果原来不包含key,则相当于<code>putAll(key, values)</code>; 返回被替换掉的value集合(可能为空)</li><li><code>void clear()</code>: 清空map</li><li><code>Collection&lt;V&gt; get(K key)</code>: 返回key对应的value, 没有key则返回空集合(不是<code>null</code>)</li></ul><h3 id="视图操作-1" tabindex="-1"><a class="header-anchor" href="#视图操作-1"><span>视图操作</span></a></h3><p>对这些返回结果的所有操作都会反映到原来的Multimap上</p><ul><li><code>Set&lt;K&gt; keySet()</code>: 返回不重复的key集合</li><li><code>Multiset&lt;K&gt; keys()</code>: 返回可重复的key集合</li><li><code>Collection&lt;V&gt; values()</code>: 返回value的集合, 包含重复值</li><li><code>Collection&lt;Map.Entry&lt;K, V&gt;&gt; entries()</code>: 返回所有键值对,包括重复键</li><li><code>Map&lt;K, Collection&lt;V&gt;&gt; asMap()</code>: 返回<code>Map&lt;K,Collection&lt;V&gt;&gt;</code>形式的视图, 返回的Map支持remove操作, 并且会反映到Multimap, 但它不支持put或putAll操作; ListMultimap的<code>asMap.get(key)</code>不能直接返回List, 可以使用<code>Multimaps.asMap.get(key)</code>来返回具体的集合类型</li></ul><h3 id="multimap的各种实现" tabindex="-1"><a class="header-anchor" href="#multimap的各种实现"><span>Multimap的各种实现</span></a></h3><table><thead><tr><th>实现类</th><th>键行为类似</th><th>值行为类似</th><th style="text-align:center;">是否支持null</th></tr></thead><tbody><tr><td>LinkedListMultimap</td><td>LinkedHashMap</td><td>LinkedList</td><td style="text-align:center;">Y</td></tr><tr><td>ArrayListMultimap</td><td>HashMap</td><td>ArrayList</td><td style="text-align:center;">Y</td></tr><tr><td>ImmutableListMultimap</td><td>ImmutableMap</td><td>ImmutableList</td><td style="text-align:center;">N</td></tr><tr><td>HashMultimap</td><td>HashMap</td><td>HashSet</td><td style="text-align:center;">Y</td></tr><tr><td>LinkedHashMultimap</td><td>LinkedHashMap</td><td>LinkedHashSet</td><td style="text-align:center;">Y</td></tr><tr><td>ImmutableSetMultimap</td><td>ImmutableMap</td><td>ImmutableSet</td><td style="text-align:center;">N</td></tr><tr><td>TreeMultimap</td><td>TreeMap</td><td>TreeSet</td><td style="text-align:center;">Y</td></tr></tbody></table><p>其实现类的继承关系图如下: <img src="'+i+`" alt="Multimap继承关系图" loading="lazy"></p><h2 id="bimap" tabindex="-1"><a class="header-anchor" href="#bimap"><span>BiMap</span></a></h2><p>BiMap是个特殊的Map(继承自JDK的Map), 它可以很方便地实现key-value的双向映射, 所以它要求value也必须是唯一的<br> BiMap的put方法与Map不太一样, put键值对KV时:<br> 若先前KV都不存在,直接put; KV都已存在,则相当于没改变; K在V不在, 则<code>KV</code>替换<code>KV&#39;</code>;(至此与Map都一样)<br> K不在V在, Map可以直接put进去, 但BiMap则不可以<br> 与Map意义不一样的方法:</p><ul><li><code>V put(K key, V value)</code>: K不在V在时, 抛出<code>IllegalArgumentException</code></li><li><code>void putAll(Map map)</code>: 同样可能抛异常, 但有可能只加了部分元素进去, 这取决于迭代顺序, 在发生异常之前迭代到的元素可能已经添加进去了</li><li><code>Set&lt;V&gt; values()</code>: 视图操作, 由于BiMap里的value是唯一的, 因此返回的是Set而不是Collection</li><li><code>boolean containsValue(Object value)</code>: 是否包含value</li></ul><p>BiMap比Map新增的方法:</p><ul><li><code>V forcePut(K key, V value)</code>: K不在V在时, 则<code>KV</code>替换<code>K&#39;V</code>; 返回先前与key关联的value, 若先前没有相同的key则返回null</li><li><code>BiMap&lt;V, K&gt; inverse()</code>: 视图操作, 返回value到key的映射Map, 两个map里的数据是公用的, 即删除<code>V1-&gt;K1</code>时, <code>K1-&gt;V1</code>也没了</li></ul><h3 id="bimap接口的实现类" tabindex="-1"><a class="header-anchor" href="#bimap接口的实现类"><span>BiMap接口的实现类</span></a></h3><table><thead><tr><th>实现类</th><th>key-value</th><th>value-&gt;key</th></tr></thead><tbody><tr><td>HashBiMap</td><td>HashMap</td><td>HashMap</td></tr><tr><td>EnumBiMap</td><td>EnumMap</td><td>EnumMap</td></tr><tr><td>EnumHashBiMap</td><td>EnumMap</td><td>HashMap</td></tr><tr><td>ImmutableBiMap</td><td>ImmutableMap</td><td>ImmutableMap</td></tr></tbody></table><h2 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>Table</span></a></h2><p>Table支持两个键进行, 就像名字一样, 可以通过行和列确定一个元素<br> Table是这样定义的<code>Table&lt;R, C, V&gt;</code>, 它提供了多种视图:</p><ul><li><code>Map&lt;R, Map&lt;C, V&gt;&gt; rowMap()</code>: 用<code>Map&lt;R, Map&lt;C, V&gt;&gt;</code>表现<code>Table&lt;R, C, V&gt;</code></li><li><code>Set&lt;R&gt; rowKeySet()</code>: 返回行的集合<code>Set&lt;R&gt;</code></li><li><code>Map&lt;C, V&gt; row(R rowKey)</code>: 用<code>Map&lt;C, V&gt;</code>返回给定行的所有列，对这个map进行的写操作也将写入Table中</li><li><code>Map&lt;C, Map&lt;R, V&gt;&gt; columnMap()</code></li><li><code>Set&lt;C&gt; columnKeySet()</code></li><li><code>Map&lt;R, V&gt; column(C columnKey)</code></li><li><code>Set&lt;Cell&lt;R, C, V&gt;&gt; cellSet()</code>: 用元素类型为<code>Table.Cell&lt;R, C, V&gt;</code>的Set表现<code>Table&lt;R, C, V&gt;</code>. <code>Cell</code>类似于<code>Map.Entry</code>,但它是用行和列两个键区分的</li><li><code>Collection&lt;V&gt; values()</code>: 返回V的集合</li></ul><h3 id="table接口的实现类" tabindex="-1"><a class="header-anchor" href="#table接口的实现类"><span>Table接口的实现类</span></a></h3><table><thead><tr><th>实现类</th><th>本质</th><th>说明</th></tr></thead><tbody><tr><td>HashBasedTable</td><td><code>HashMap&lt;R, HashMap&lt;C, V&gt;&gt;</code></td><td></td></tr><tr><td>TreeBasedTable</td><td><code>TreeMap&lt;R, TreeMap&lt;C,V&gt;&gt;</code></td><td></td></tr><tr><td>ArrayTable</td><td>二维数组</td><td>要求在构造时就指定行和列的大小</td></tr><tr><td>ImmutableTable</td><td><code>ImmutableMap&lt;R, ImmutableMap&lt;C, V&gt;&gt;</code></td><td>这是个抽象类,对稀疏或密集的数据集都有优化</td></tr></tbody></table><h2 id="rangeset" tabindex="-1"><a class="header-anchor" href="#rangeset"><span>RangeSet</span></a></h2><p>RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">RangeSet&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; rangeSet </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TreeRangeSet.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">closed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));       </span><span style="color:#6A737D;">// {[1,10]}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">closedOpen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 不相连区间:{[1,10], [11,15)}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">closedOpen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">));  </span><span style="color:#6A737D;">// 相连区间; {[1,10], [11,20)}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeSet.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">openClosed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">));    </span><span style="color:#6A737D;">// 空区间; {[1,10], [11,20)}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeSet.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">));      </span><span style="color:#6A737D;">// 分割[1, 10]; {[1,5], [10,10], [11,20)}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:</p><ul><li>要合并<code>Range.closed(1, 10)</code>和<code>Range.closedOpen(11,15)</code>这样的区间, 你需要首先用<code>Range.canonical(DiscreteDomain)</code>对区间进行预处理，例如<code>DiscreteDomain.integers()</code></li><li>RangeSet不支持GWT，也不支持JDK5和更早版本；因为，RangeSet需要充分利用JDK6中NavigableMap的特性</li></ul><h2 id="rangemap" tabindex="-1"><a class="header-anchor" href="#rangemap"><span>RangeMap</span></a></h2><p>RangeMap描述了不相交的、非空的区间到特定值的映射。 和RangeSet不同，RangeMap不会合并相邻的映射，即便相邻的区间映射到相同的值。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">RangeMap&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; rangeMap </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TreeRangeMap.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">closed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// {[1,10] =&gt; &quot;foo&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">);     </span><span style="color:#6A737D;">// {[1,3] =&gt; &quot;foo&quot;, (3,6) =&gt; &quot;bar&quot;, [6,10] =&gt; &quot;foo&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeMap.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);   </span><span style="color:#6A737D;">// {[1,3] =&gt; &quot;foo&quot;, (3,6) =&gt; &quot;bar&quot;, [6,10] =&gt; &quot;foo&quot;, (10,20) =&gt; &quot;foo&quot;}</span></span>
<span class="line"><span style="color:#E1E4E8;">rangeMap.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(Range.</span><span style="color:#B392F0;">closed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">));      </span><span style="color:#6A737D;">// {[1,3] =&gt; &quot;foo&quot;, (3,5) =&gt; &quot;bar&quot;, (11,20) =&gt; &quot;foo&quot;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function K(q,A){const l=p("RouteLink");return c(),d("div",null,[u,E,e("p",null,[y,t("继承自"),m,t(", 类似于"),g,t(", 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数. Multiset {a, a, b}和{a, b, a}是相等的, "),h,t("类似于但绝不等同于"),b,t("."),M,a(l,{to:"/program/backend/2015-11-12-Collection%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html"},{default:o(()=>[t("Collection中的方法")]),_:1}),v,t("都有, 注意"),B,t("方法, 重复的元素也会算个数(类似的其它方法也会包含重复元素)"),k,t(" 除此之外"),F,t("接口中定义的方法有:")]),_,e("p",null,[V,t("把一个键映射到多个值, 类似于但不等同于"),C,t("."),R,S,t("跟JDK中的"),f,t("并没有什么关系, 但"),a(l,{to:"/program/backend/2015-11-12-Map%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95.html"},{default:o(()=>[t("Map中的方法")]),_:1}),t("在"),x,t("也有对应的")]),T])}const I=n(r,[["render",K],["__file","2015-11-18-Guava新集合类型.html.vue"]]),j=JSON.parse('{"path":"/program/backend/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html","title":"Guava新集合类型","lang":"zh-CN","frontmatter":{"title":"Guava新集合类型","date":"2015-11-18T00:00:00.000Z","category":"Java","tag":["Guava"],"order":-20151118,"description":"guava的collection包里新增加了几个集合类型非常实用 新增类型有:Multiset、Multimap、BiMap、Table、 Multiset Multiset继承自Collection, 类似于Set, 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数. Multiset {a, a, b}和{a, ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-11-18-Guava%E6%96%B0%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Guava新集合类型"}],["meta",{"property":"og:description","content":"guava的collection包里新增加了几个集合类型非常实用 新增类型有:Multiset、Multimap、BiMap、Table、 Multiset Multiset继承自Collection, 类似于Set, 里面的元素是无顺序的, 但不同的是它可以多次添加相等的元素, 并能记录每个元素的个数. Multiset {a, a, b}和{a, ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T15:13:58.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Guava"}],["meta",{"property":"article:published_time","content":"2015-11-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T15:13:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Guava新集合类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-11-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T15:13:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Multiset","slug":"multiset","link":"#multiset","children":[{"level":3,"title":"视图操作","slug":"视图操作","link":"#视图操作","children":[]},{"level":3,"title":"Multiset的各种实现","slug":"multiset的各种实现","link":"#multiset的各种实现","children":[]}]},{"level":2,"title":"Multimap","slug":"multimap","link":"#multimap","children":[{"level":3,"title":"视图操作","slug":"视图操作-1","link":"#视图操作-1","children":[]},{"level":3,"title":"Multimap的各种实现","slug":"multimap的各种实现","link":"#multimap的各种实现","children":[]}]},{"level":2,"title":"BiMap","slug":"bimap","link":"#bimap","children":[{"level":3,"title":"BiMap接口的实现类","slug":"bimap接口的实现类","link":"#bimap接口的实现类","children":[]}]},{"level":2,"title":"Table","slug":"table","link":"#table","children":[{"level":3,"title":"Table接口的实现类","slug":"table接口的实现类","link":"#table接口的实现类","children":[]}]},{"level":2,"title":"RangeSet","slug":"rangeset","link":"#rangeset","children":[]},{"level":2,"title":"RangeMap","slug":"rangemap","link":"#rangemap","children":[]}],"git":{"createdTime":1719155638000,"updatedTime":1719155638000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-11-18-Guava新集合类型.md","localizedDate":"2015年11月18日","excerpt":"","autoDesc":true}');export{I as comp,j as data};
