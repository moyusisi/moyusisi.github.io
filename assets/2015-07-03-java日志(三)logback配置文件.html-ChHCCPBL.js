import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,d as a}from"./app-CqEdGBmQ.js";const n="/assets/logbak_config-CRmdFSY9.png",o={},t=a('<p>logback配置文件的简单介绍，主要内容均来自<a href="http://logback.qos.ch/manual/" target="_blank" rel="noopener noreferrer">logback官方文档</a></p><h2 id="logback配置文件的结构" tabindex="-1"><a class="header-anchor" href="#logback配置文件的结构"><span>logback配置文件的结构</span></a></h2><p>logback配置文件的跟节点为<code>&lt;configuration&gt;</code>,它的子节点有3个:<code>root、logger、appender</code>，除了<code>root</code>之外，每个都可以多次出现。<br> 下面是我画的一个结构图，实线表示节点，虚线表示属性</p><figure><img src="'+n+`" alt="logback配置文件结构图" tabindex="0" loading="lazy"><figcaption>logback配置文件结构图</figcaption></figure><ul><li><code>appender</code>:用于描述日志的输出格式，是输出到控制台还是输出到文件，日志滚动打包策略等。</li><li><code>logger</code>:用来制定把什么内容用哪个<code>appender</code>输出。</li><li><code>root</code>:默认的<code>logger</code>。</li></ul><h2 id="configuration元素" tabindex="-1"><a class="header-anchor" href="#configuration元素"><span>configuration元素</span></a></h2><p><code>configuration</code>元素是logback配置文件的根元素，它也有许多可选属性，如: <code>debug、scan、scanPeriod</code>等</p><h3 id="debug-属性" tabindex="-1"><a class="header-anchor" href="#debug-属性"><span>debug 属性</span></a></h3><p>如果logback的配置文件加载过程中出现了warning或error，则logback会把自身状态的日志打印出来，如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>00:16:31,885 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [com.test.log] to INFO</span></span>
<span class="line"><span>00:16:31,885 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [com.test.log] to false</span></span>
<span class="line"><span>00:16:31,885 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [STDOUT]....</span></span>
<span class="line"><span>00:16:31,885 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See ... for more details.</span></span>
<span class="line"><span>00:16:31,885 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to DEBUG</span></span>
<span class="line"><span>00:16:31,885 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - Could not find an appender named [STDOUT]....</span></span>
<span class="line"><span>00:16:31,885 |-ERROR in ch.qos.logback.core.joran.action.AppenderRefAction - See ... for more details.</span></span>
<span class="line"><span>00:16:31,885 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.</span></span>
<span class="line"><span>00:16:31,888 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@36577c06 - Registering current configuration as...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加载过程未出现警告或者错误，就不会打印出来了。<br> 若指定了<code>debug=&quot;true&quot;</code>，即使不出现警告和错误，也会打印出logback内部的状态日志。</p><h3 id="scan-属性" tabindex="-1"><a class="header-anchor" href="#scan-属性"><span>scan 属性</span></a></h3><p>可通过属性设置<code>scan=&quot;true&quot;</code>，在配置文件发生改变时自动重新加载配置文件，默认1分钟重新扫描一次。<br> 可通过属性设置<code>scanPeriod=&quot;30 seconds&quot;</code>，指定30秒扫描一次。<br> 扫描间隔的单位可以是<code>milliseconds, seconds, minutes 或 hours</code>，若不指定单位，默认为<code>milliseconds</code>。</p><h2 id="logger元素" tabindex="-1"><a class="header-anchor" href="#logger元素"><span>logger元素</span></a></h2><p><code>logger</code>元素用于配置代码中的logger，它有属性如: <code>name、level、additivity</code>，其中<code>name</code>属性是必须的，其他2个可选。 有0个或多个子元素<code>&lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</code>来指定日志输出的格式。若0个，则不指定输出格式，就不会输出了。<br><strong>注意</strong><code>root</code>是最顶级的logger，它只有个可选属性level。</p><h3 id="name-属性" tabindex="-1"><a class="header-anchor" href="#name-属性"><span>name 属性</span></a></h3><p>在java代码中，getLogger(String className)的参数一样获取到的logger是同一个，如下面的<code>logger1</code>和<code>logger2</code>就是同一个对象:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Logger logger1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.slf4j.Logger&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Logger logger2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.slf4j.Logger&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>日志<code>logger</code>有个<code>name</code>属性，跟代码中传的参数有一定的关系，举个例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">    &lt;!--</span><span style="color:#E1E4E8;"> 配置文件中 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">    &lt;</span><span style="color:#E1E4E8;">logger name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;A.B&quot;</span><span style="color:#E1E4E8;"> level</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#F97583;"> &gt;</span></span>
<span class="line"><span style="color:#6A737D;">    // java 代码中</span></span>
<span class="line"><span style="color:#E1E4E8;">    Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A.B.C&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的日志会先在配置文件中匹配名字为&quot;A.B.C&quot;的logger，未找到，匹配到了&quot;A.B&quot;的logger，则按照其指定的<code>appender</code>格式进行输出。</p><h3 id="level属性" tabindex="-1"><a class="header-anchor" href="#level属性"><span>level属性</span></a></h3><p>日志的级别有: <code>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR (ALL、OFF)</code><br> 日志级别是可以继承的，root不用指定级别，默认就是&quot;DEBUG&quot;. 举个继承的例子:</p><table><thead><tr><th style="text-align:left;">Logger name</th><th style="text-align:left;">Assigned level</th><th style="text-align:left;">Effective level</th></tr></thead><tbody><tr><td style="text-align:left;">root</td><td style="text-align:left;">DEBUG</td><td style="text-align:left;">DEBUG</td></tr><tr><td style="text-align:left;">X</td><td style="text-align:left;">INFO</td><td style="text-align:left;">INFO</td></tr><tr><td style="text-align:left;">X.Y</td><td style="text-align:left;">未指定</td><td style="text-align:left;">INFO(继承来的)</td></tr><tr><td style="text-align:left;">X.Y.Z</td><td style="text-align:left;">ERROR</td><td style="text-align:left;">ERROR(自己有)</td></tr></tbody></table><h3 id="additivity属性" tabindex="-1"><a class="header-anchor" href="#additivity属性"><span>additivity属性</span></a></h3><p>该属性表示日志的可叠加性，默认为true,表示到达本logger的日志通过本日志的appender指定格式输出之后， 仍会将日志扩散给父logger。<br> 弄个表格就容易看清楚了:</p><table><thead><tr><th style="text-align:left;">Logger Name</th><th style="text-align:left;">Attached Appenders</th><th style="text-align:left;">Additivity Flag</th><th style="text-align:left;">Output Targets</th><th style="text-align:left;">Comment</th></tr></thead><tbody><tr><td style="text-align:left;">root</td><td style="text-align:left;">A1</td><td style="text-align:left;">not applicable</td><td style="text-align:left;">A1</td><td style="text-align:left;">root没有父logger,所以additivity属性对root不适用</td></tr><tr><td style="text-align:left;">x</td><td style="text-align:left;">A-x1, A-x2</td><td style="text-align:left;">true</td><td style="text-align:left;">A1,<br> A-x1, A-x2</td><td style="text-align:left;">&quot;x&quot;(自己)的appender,<br> 扩散到root的appender</td></tr><tr><td style="text-align:left;">x.y</td><td style="text-align:left;">none</td><td style="text-align:left;">true</td><td style="text-align:left;">A1,<br> A-x1, A-x2</td><td style="text-align:left;">扩散到&quot;x&quot;和root的appender</td></tr><tr><td style="text-align:left;">x.y.z</td><td style="text-align:left;">A-xyz1</td><td style="text-align:left;">true</td><td style="text-align:left;">A1,<br> A-x1, A-x2<br> A-xyz1</td><td style="text-align:left;">&quot;x.y.z&quot;的appender<br> 扩散到&quot;x&quot;和root的appender</td></tr><tr><td style="text-align:left;">security</td><td style="text-align:left;">A-sec</td><td style="text-align:left;">false</td><td style="text-align:left;">A-sec</td><td style="text-align:left;">additivity=false, 只用到 appender A-sec</td></tr><tr><td style="text-align:left;">security.access</td><td style="text-align:left;">none</td><td style="text-align:left;">true</td><td style="text-align:left;">A-sec</td><td style="text-align:left;">&quot;security&quot;中的additivity＝false. 只扩散到了&quot;security&quot; 的appender</td></tr></tbody></table><p><strong>注意</strong><br> 最后一个小例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    // java代码,A.B.C包中的类</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // logger配置: 无additivity,默认true会扩散，无appender-ref,不会打印</span></span>
<span class="line"><span style="color:#F97583;">    &lt;</span><span style="color:#E1E4E8;">logger name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;A.B.C&quot;</span><span style="color:#E1E4E8;"> level</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#F97583;"> /&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    // root配置: 级别为最高的OFF</span></span>
<span class="line"><span style="color:#F97583;">    &lt;</span><span style="color:#E1E4E8;">root level</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;OFF&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">        &lt;</span><span style="color:#E1E4E8;">appender</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">ref ref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;STDOUT&quot;</span><span style="color:#F97583;">/&gt;</span></span>
<span class="line"><span style="color:#F97583;">    &lt;/</span><span style="color:#E1E4E8;">root</span><span style="color:#F97583;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行的结果是会打印&quot;info&quot;.<br> 因为logger配置了级别为info，但是并不打印，扩散到了root;<br> root级别为OFF，但是logger扩散过来的日志级别仍为继承的info.<br> 所以只有A.B.C包中级别大于等于info的日志会被打印。</p><h2 id="appender元素" tabindex="-1"><a class="header-anchor" href="#appender元素"><span>appender元素</span></a></h2><p><code>appender</code>元素内容稍微多点，它有2个必需属性:<code>name</code>和<code>class</code>。<br> 有3个可选的子元素<code>&lt;encoder&gt;、&lt;layout&gt;、&lt;filter&gt;</code>，这3个子元素可有0个或者多个。<br> 一般只用<code>&lt;encoder&gt;</code>，它包装了<code>&lt;layout&gt;</code>。</p><h3 id="encoder-子元素" tabindex="-1"><a class="header-anchor" href="#encoder-子元素"><span>encoder 子元素</span></a></h3><p><code>encoder</code>的作用是把消息转化成输出流，可以控制消息怎么转化，何时输出等。<br> 而<code>layout</code>仅指定消息输出的格式，不能控制消息什么时候输出，不能控制消息暂存到flush然后一下子批量输出。<br> 实际上<code>encoder</code>内部包装了<code>PatternLayout</code>，然后又多了一些控制功能。 来个例子:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 一般这样写 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.FileAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;testFile.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 默认的class就是这个最常用的Encoder类型，所以class可以不指定 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">     &lt;!-- encoder 包装了ch.qos.logback.classic.PatternLayout --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- 是否立刻输出，默认为true,为false表示先存到缓冲区，然后一起输出，速度是true的4倍，但是appender不正常关闭可能导致丢失缓冲区里的log --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">immediateFlush</span><span style="color:#E1E4E8;">&gt;false&lt;/</span><span style="color:#85E89D;">immediateFlush</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 这种写法基本不推荐 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.FileAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;testFile.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">layout</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.classic.PatternLayout&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">layout</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="layout-子元素" tabindex="-1"><a class="header-anchor" href="#layout-子元素"><span>layout 子元素</span></a></h3><p><code>layout</code>用于指定输出格式,有个class属性，不写默认是<code>ch.qos.logback.classic.PatternLayout</code>。<br> 也可以自己定义layout，然后像下面这样使用(一般也不自己定义):</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;STDOUT&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">layout</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;chapters.layouts.MySampleLayout&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一般使用的方式是上一小结那样，仅自己指定输出格式,输出格式很有必要说明,先来个简单的介绍,下一小节详细介绍pattern</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">appender</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;STDOUT&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    &lt;!-- class默认就是这个类，可不写 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">layout</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.classic.PatternLayout&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">        &lt;!-- %d表示日期，</span></span>
<span class="line"><span style="color:#6A737D;">             %thread表示线程名，</span></span>
<span class="line"><span style="color:#6A737D;">             %-5level：级别左对齐显示最少5个字符宽度(不足则补空格),</span></span>
<span class="line"><span style="color:#6A737D;">             %msg：日志消息，</span></span>
<span class="line"><span style="color:#6A737D;">             %n是换行符</span></span>
<span class="line"><span style="color:#6A737D;">        --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">layout</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="日志格式的详细说明-pattern元素" tabindex="-1"><a class="header-anchor" href="#日志格式的详细说明-pattern元素"><span>日志格式的详细说明(pattern元素)</span></a></h3><p>不管是<code>encoder</code>元素中还是<code>layout</code>元素中，都少不了<code>pattern</code>，它是用来描述日志输出格式的。<br> 下面就是格式的详细介绍</p><ul><li><strong>长度限定 : {length}</strong></li></ul><p>像<code>%logger, %class</code>等都可以通过<code>length</code>来限定长度，对其进行缩写，不过这个长度有点特殊，举个例子说明会更明白:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">有个logger这样定义</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Aaaaa.Bbbbb.TestLength&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">   格式       </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">       结果</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">}    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   TestLength</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}    </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   A.B.TestLength</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">17</span><span style="color:#E1E4E8;">}   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   A.B.TestLength</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">}   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   A.Bbbbb.TestLength</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">21</span><span style="color:#E1E4E8;">}   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   A.Bbbbb.TestLength</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">logger{</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">}   </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">   Aaaaa.Bbbbb.TestLength</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最右边的那个类名总是显示的;<br> 由于<code>A.Bbbbb.TestLength</code>长度为18，所以<code>0&lt;lenght&lt;18</code>时会被缩写成<code>A.B.TestLength</code>;<br> 由于<code>Aaaaa.Bbbbb.TestLength</code>长度为22，所以<code>18&lt;lenght&lt;22</code>时会被缩写成<code>A.Bbbbb.TestLength</code>;<br><code>lenght&gt;=22</code>时不缩写;</p><p><strong>length总结</strong> :</p><ol><li>0只显示短类名(最右边的); 非0显示全类名，但是包名可能会被缩写，缩写成只有一个首字母</li><li>缩写时最外层包最先被缩写，右边的包名最先不被缩写</li><li>不缩写的前提是: <code>总长度&lt;=lenght</code></li></ol><ul><li><strong>日志名 : %c{length} / %lo{length} / %logger{length}</strong></li></ul><p>产生日志的Logger的全名，可通过length缩写， <code>%logger{36}、%c{36}</code>效果是一样的。</p><ul><li><strong>类名 : %C{length} / %class{length}</strong></li></ul><p>产生日志的类的全名， 如类&quot;A.B.MyClass&quot;中有个Logger名字为&quot;A.B.MyLogger&quot;，前者是类名，后者是日志名。</p><ul><li><strong>方法名 : %M / %method</strong></li></ul><p>产生日志的方法名。</p><ul><li><strong>文件名 : %F / %file</strong></li></ul><p>产生日志的java源文件名， 如&quot;LogbackTest.java&quot;。</p><ul><li><strong>行号 : %L / %line</strong></li></ul><p>日志行产生的行号。</p><ul><li><strong>日志级别 : %p / %le / %level</strong></li></ul><p>日志级别</p><ul><li><strong>线程名 : %t / %thread</strong></li></ul><p>线程名</p><ul><li><strong>日志内容 : %m / %msg / %message</strong></li></ul><p>日志中输出的信息</p><ul><li><strong>时间 : %d{pattern} / %date{pattern}</strong></li></ul><p>产生日志的时间。日志的格式如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">d	                   </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> 2015</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#79B8FF;"> 22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">665</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">date	                 </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> 2015</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#79B8FF;"> 22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">665</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">date{HH</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">ss.SSS}	   </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> 22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25.665</span></span>
<span class="line"><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">date{yyyy</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">MM</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dd HH</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mm</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">ss.SSS}	</span><span style="color:#79B8FF;">2015</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">07</span><span style="color:#79B8FF;"> 22</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">45</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">25.665</span></span>
<span class="line"><span style="color:#E1E4E8;">注意那个毫秒前一定要写成点(.)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>格式控制</strong></li></ul><p><code>&quot;.&quot;</code>前面是最短长度，不够则补白；<code>&quot;.&quot;</code>后面是最大长度。直接来个例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">   格式化串         logger名                结果</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">20.</span><span style="color:#FDAEB7;font-style:italic;">20logger</span><span style="color:#E1E4E8;">]	  main.Name             [           main.Name]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%-</span><span style="color:#E1E4E8;">20.</span><span style="color:#FDAEB7;font-style:italic;">20logger</span><span style="color:#E1E4E8;">]   main.Name             [main.Name           ]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">10.</span><span style="color:#FDAEB7;font-style:italic;">10logger</span><span style="color:#E1E4E8;">]	  main.foo.foo.bar.Name [o.bar.Name]</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">10.</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">10logger]	  main.foo.foo.bar.Name [main.foo.f]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,71),p=[t];function r(c,i){return e(),l("div",null,p)}const g=s(o,[["render",r],["__file","2015-07-03-java日志(三)logback配置文件.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2015-07-03-java%E6%97%A5%E5%BF%97(%E4%B8%89)logback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","title":"java日志(三):logback配置文件","lang":"zh-CN","frontmatter":{"title":"java日志(三):logback配置文件","date":"2015-07-03T00:00:00.000Z","category":"Java","tag":["Log"],"order":-20150703,"description":"logback配置文件的简单介绍，主要内容均来自logback官方文档 logback配置文件的结构 logback配置文件的跟节点为<configuration>,它的子节点有3个:root、logger、appender，除了root之外，每个都可以多次出现。 下面是我画的一个结构图，实线表示节点，虚线表示属性 logback配置文件结构图logb...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-07-03-java%E6%97%A5%E5%BF%97(%E4%B8%89)logback%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"java日志(三):logback配置文件"}],["meta",{"property":"og:description","content":"logback配置文件的简单介绍，主要内容均来自logback官方文档 logback配置文件的结构 logback配置文件的跟节点为<configuration>,它的子节点有3个:root、logger、appender，除了root之外，每个都可以多次出现。 下面是我画的一个结构图，实线表示节点，虚线表示属性 logback配置文件结构图logb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Log"}],["meta",{"property":"article:published_time","content":"2015-07-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java日志(三):logback配置文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-07-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"logback配置文件的结构","slug":"logback配置文件的结构","link":"#logback配置文件的结构","children":[]},{"level":2,"title":"configuration元素","slug":"configuration元素","link":"#configuration元素","children":[{"level":3,"title":"debug 属性","slug":"debug-属性","link":"#debug-属性","children":[]},{"level":3,"title":"scan 属性","slug":"scan-属性","link":"#scan-属性","children":[]}]},{"level":2,"title":"logger元素","slug":"logger元素","link":"#logger元素","children":[{"level":3,"title":"name 属性","slug":"name-属性","link":"#name-属性","children":[]},{"level":3,"title":"level属性","slug":"level属性","link":"#level属性","children":[]},{"level":3,"title":"additivity属性","slug":"additivity属性","link":"#additivity属性","children":[]}]},{"level":2,"title":"appender元素","slug":"appender元素","link":"#appender元素","children":[{"level":3,"title":"encoder 子元素","slug":"encoder-子元素","link":"#encoder-子元素","children":[]},{"level":3,"title":"layout 子元素","slug":"layout-子元素","link":"#layout-子元素","children":[]},{"level":3,"title":"日志格式的详细说明(pattern元素)","slug":"日志格式的详细说明-pattern元素","link":"#日志格式的详细说明-pattern元素","children":[]}]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-07-03-java日志(三)logback配置文件.md","localizedDate":"2015年7月3日","excerpt":"","autoDesc":true}');export{g as comp,y as data};
