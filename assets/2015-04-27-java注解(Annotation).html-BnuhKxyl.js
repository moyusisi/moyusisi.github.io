import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,d as e}from"./app-DT7svUeb.js";const l={},o=e(`<p>刚用到Spring中的注解时，感觉真是太方便了，其实在JDK1.5就已经支持注解了，1.5以后默认内置了三个注解<br><code>@Override</code>:只能用在方法之上的，表示重写父类的方法。<br><code>@Deprecated</code>:可用在任何元素上，表示API已过时，编译时会产生警告。<br><code>@SuppressWarnings</code>: 可以关闭警告信息。</p><h2 id="如何定义注解" tabindex="-1"><a class="header-anchor" href="#如何定义注解"><span>如何定义注解</span></a></h2><p>我们可以通过关键字<code>class</code>来声明一个类，类似的我们可以用某东西来声明注解，用来声明注解的这东西叫做&quot;元注解&quot;。<br> 在<code>java.lang.annotation</code>包中定义了4个元注解，分别是: <code>@Target、 @Retention、 @Documented、 @Inherited</code></p><ul><li>@Target</li></ul><p><code>@Target</code>用于说明Annotation所修饰的对象范围，比如用于修饰类、接口、构造方法、成员方法、成员变量等，它作用范围的取值有:</p><p>| ElementType.TYPE | 用于描述类、接口(包括注解类型) 或enum声明 | | ElementType.FIELD | 用于描述字段 | | ElementType.METHOD | 用于描述方法 | | ElementType.PARAMETER | 用于描述参数 | | ElementType.CONSTRUCTOR | 用于描述构造器 | | ElementType.LOCAL_VARIABLE | 用于描述局部变量 | | ElementType.ANNOTATION_TYPE | 用于注解类型 | | ElementType.PACKAGE | 用于描述包 |</p><ul><li>@Retention</li></ul><p><code>@Retention</code>定义Annotation的有效期，即生命周期，如是源码级还是class级还是可以被加载到虚拟机，它的取值有:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>RetentionPoicy.SOURCE       : 在源文件中有效（即源文件保留）</span></span>
<span class="line"><span>RetentionPoicy.CLASS        : 在class文件中有效（即class保留）</span></span>
<span class="line"><span>RetentionPoicy.RUNTIME      : 在运行时有效（即运行时保留）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>@Documented</li></ul><p><code>@Documented</code>是一个标记注解，没有成员，表示可以被javadoc文档化</p><ul><li>@Inherited</li></ul><p><code>@Inherited</code>是一个标记注解，允许子类继承父类中的注解</p><p>下面是定义注解的例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)    </span><span style="color:#6A737D;">// 表示注解将被加载到虚拟机</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.METHOD, ElementType.TYPE})  </span><span style="color:#6A737D;">// MyAnnotation 可修饰方法和类等</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#F97583;"> MyAnnotation</span><span style="color:#E1E4E8;"> {       </span><span style="color:#6A737D;">// @interface 即为定义注解的“关键字”</span></span>
<span class="line"><span style="color:#6A737D;">    //为注解添加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#9ECBFF;"> &quot;default&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//为属性提供默认值</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">array</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 测试文件</span></span>
<span class="line"><span style="color:#6A737D;">// (value=&quot;not default&quot;)则可以写成(&quot;not default&quot;)value比较特殊，其他不可以省略写</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MyAnnotation</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">color</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;red&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 注解中没有默认值的必须赋值；</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> AnnotationTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        //检查类AnnotationTest是否含有@MyAnnotation注解</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (AnnotationTest.class.</span><span style="color:#B392F0;">isAnnotationPresent</span><span style="color:#E1E4E8;">(MyAnnotation.class)) {</span></span>
<span class="line"><span style="color:#6A737D;">            //若存在就提取注解的值</span></span>
<span class="line"><span style="color:#E1E4E8;">            MyAnnotation annotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (MyAnnotation) AnnotationTest.class.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(MyAnnotation.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(annotation.</span><span style="color:#B392F0;">color</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(annotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解的使用规则" tabindex="-1"><a class="header-anchor" href="#注解的使用规则"><span>注解的使用规则</span></a></h2><ol><li>使用<code>@interface</code>定义注解时，自动继承了<code>java.lang.annotation.Annotation</code>接口，由编译程序自动完成其他细节。</li><li>定义注解时，不能继承其他的注解或接口。</li><li><code>@interface</code>用来声明一个注解，其中的每一个方法实际上是声明了一个配置参数。方法的名称就是参数的名称，返回值类型就是参数的类型。</li><li>参数类型只能是基本类型、String、Class、enum、Annotation或这些类型的数组。</li><li>可以通过default来声明参数的默认值。</li><li>参数只能用public或默认(default)这两个访问权修饰.例如,String value();这里把方法设为defaul默认类型；</li><li>如果只有一个参数成员,最好把参数名称设为&quot;value&quot;,后加小括号，指定其值时可以是(value=&quot;abc&quot;)或简写成(&quot;abc&quot;)，其他名字的成员不能简写。</li><li>注解元素必须有确定的值，要么在定义注解的默认值中指定，要么在使用注解时指定，非基本类型的注解元素的值不可为null。</li></ol>`,17),t=[o];function p(i,c){return a(),s("div",null,t)}const E=n(l,[["render",p],["__file","2015-04-27-java注解(Annotation).html.vue"]]),y=JSON.parse('{"path":"/program/backend/2015-04-27-java%E6%B3%A8%E8%A7%A3(Annotation).html","title":"java注解(Annotation)","lang":"zh-CN","frontmatter":{"title":"java注解(Annotation)","date":"2015-04-27T00:00:00.000Z","category":"Java","tag":"Java","order":-20150427,"description":"刚用到Spring中的注解时，感觉真是太方便了，其实在JDK1.5就已经支持注解了，1.5以后默认内置了三个注解 @Override:只能用在方法之上的，表示重写父类的方法。 @Deprecated:可用在任何元素上，表示API已过时，编译时会产生警告。 @SuppressWarnings: 可以关闭警告信息。 如何定义注解 我们可以通过关键字clas...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-04-27-java%E6%B3%A8%E8%A7%A3(Annotation).html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"java注解(Annotation)"}],["meta",{"property":"og:description","content":"刚用到Spring中的注解时，感觉真是太方便了，其实在JDK1.5就已经支持注解了，1.5以后默认内置了三个注解 @Override:只能用在方法之上的，表示重写父类的方法。 @Deprecated:可用在任何元素上，表示API已过时，编译时会产生警告。 @SuppressWarnings: 可以关闭警告信息。 如何定义注解 我们可以通过关键字clas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2015-04-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java注解(Annotation)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-04-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"如何定义注解","slug":"如何定义注解","link":"#如何定义注解","children":[]},{"level":2,"title":"注解的使用规则","slug":"注解的使用规则","link":"#注解的使用规则","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-04-27-java注解(Annotation).md","localizedDate":"2015年4月27日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
