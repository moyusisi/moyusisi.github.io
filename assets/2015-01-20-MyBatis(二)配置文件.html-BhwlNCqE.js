import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,d as e}from"./app-Biz7QJq3.js";const l={},p=e(`<p>MyBatis 的配置文件即<code>mybatis-config.xml</code>中的<code>configuration</code>标签下有<code>settings、properties</code>等属性。本文对其中常用属性的配置做简单介绍</p><h2 id="properties-属性" tabindex="-1"><a class="header-anchor" href="#properties-属性"><span>properties 属性</span></a></h2><p>properties 属性可以从properties文件中获得，也可以直接写到配置文件中。<br> 属性文件里<code>config.properties</code>中内容为</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">driver</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#E1E4E8;">url</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">jdbc</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">mysql</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">//127.0.0.1:3306/test</span></span>
<span class="line"><span style="color:#E1E4E8;">username</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#E1E4E8;">password</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">root</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件<code>mybatis-config.xml</code>中有这样的内容</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">&lt;!-- properties配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">properties</span><span style="color:#B392F0;"> resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;config.properties&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;shisong&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- properties使用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dataSource</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;POOLED&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;driver&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${driver}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;url&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${url}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${username}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;password&quot;</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;\${password}&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dataSource</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子中的<code>password</code>重复指定了且不一样，而数据库的正确密码是<code>root</code>,上面的例子是能够成功的； 当把配置中的<code>password</code>改为<code>root</code>,而把porperties中<code>password</code>改为<code>123456</code>时则会失败； 所以当属性在不只一个地方进行了配置时，要有一个加载顺序，后加载的会覆盖先加载的。<br> 另外属性加载的时候，还可以通过<code>SqlSessionBuilder.build()</code>方法来加载</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">SqlSessionFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSessionFactoryBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(reader, props);</span></span>
<span class="line"><span style="color:#6A737D;">// ... or ...</span></span>
<span class="line"><span style="color:#E1E4E8;">SqlSessionFactory factory </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSessionFactoryBuilder.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(reader, environment, props);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当属性在不只一个地方进行了配置时，加载顺序是这样的</p><ol><li>先加载<code>XML</code>文件中在<code>properties</code>元素体内<code>property</code>标签指定的属性</li><li>然后加<code>resource</code>或<code>url</code>指定的资源文件中的属性，并覆盖已读取的同名属性</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性</li></ol><hr><h2 id="typealiases-类型别名" tabindex="-1"><a class="header-anchor" href="#typealiases-类型别名"><span>typeAliases 类型别名</span></a></h2><p>类型别名是为<code>Java</code>类型命名的一个短的名字,意义仅在于用来减少类完全限定名的冗余。<br> 可以像下面这样起别名:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">typeAlias</span><span style="color:#B392F0;"> alias</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Author&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;domain.blog.Author&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">typeAlias</span><span style="color:#B392F0;"> alias</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Blog&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;domain.blog.Blog&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以指定一个包名, MyBatis 会在包名下搜索需要的 Java Bean，比如：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">package</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;domain.blog&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">typeAliases</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包 domain.blog 中所有的的 Java Bean，在没有注解的情况下，会使用 Bean 的类名来作为它的别名。 比如 domain.blog.Author 的别名为 Author(大小写不敏感)；若有注解，则别名为其注解值。如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Alias</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;author&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Author</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MyBatis 已经为普通的 Java 类型内建了许多相应的类型别名，它们都是大小写不敏感的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>别名         映射的类型</span></span>
<span class="line"><span>_byte       byte</span></span>
<span class="line"><span>_long       long</span></span>
<span class="line"><span>_short      short</span></span>
<span class="line"><span>_int        int</span></span>
<span class="line"><span>_integer    int</span></span>
<span class="line"><span>_double     double</span></span>
<span class="line"><span>_float      float</span></span>
<span class="line"><span>_boolean    boolean  //以上都是原始类型</span></span>
<span class="line"><span>string      String</span></span>
<span class="line"><span>byte        Byte</span></span>
<span class="line"><span>long        Long</span></span>
<span class="line"><span>short       Short</span></span>
<span class="line"><span>int         Integer</span></span>
<span class="line"><span>integer     Integer</span></span>
<span class="line"><span>double      Double</span></span>
<span class="line"><span>float       Float</span></span>
<span class="line"><span>boolean     Boolean</span></span>
<span class="line"><span>date        Date</span></span>
<span class="line"><span>decimal     BigDecimal</span></span>
<span class="line"><span>bigdecimal  BigDecimal</span></span>
<span class="line"><span>object      Object</span></span>
<span class="line"><span>map         Map</span></span>
<span class="line"><span>hashmap     HashMap</span></span>
<span class="line"><span>list        List</span></span>
<span class="line"><span>arraylist   ArrayList</span></span>
<span class="line"><span>collection  Collection</span></span>
<span class="line"><span>iterator    Iterator</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="typehandlers-类型转换处理器" tabindex="-1"><a class="header-anchor" href="#typehandlers-类型转换处理器"><span>typeHandlers 类型转换处理器</span></a></h2><p>数据库中的类型和<code>Java</code>的类型是不一样的，但是有一定的对应关系。<br> 无论是 MyBatis 在预处理语句（PreparedStatement）中设置参数时，还是从结果集中取出值时，都会用类型处理器以合适的方式进行转换。 <code>typeHandler</code>就是进行<code>jdbcType</code>和<code>javaType</code>之间的转换的。</p><h3 id="自定义typehandler" tabindex="-1"><a class="header-anchor" href="#自定义typehandler"><span>自定义TypeHandler</span></a></h3><p>MyBatis已经自动注册了一些TypeHandler，我们仍然可以写自己的TypeHandler，具体方法是：实现<code>org.apache.ibatis.type.TypeHandler</code>接口，或继承<code>org.apache.ibatis.type.BaseTypeHandler</code>抽象类并实现其中的抽象方法，然后指明自己的TypeHandler是哪个<code>jdbcType</code>和<code>javaType</code>之间的转换。<br> 推荐使用BaseTypeHandler，因为它对<code>null</code>值进行了过滤，而且它继承了<code>TypeReference</code>抽象类，通过<code>TypeReference</code>的<code>getRawType()</code>方法可以获取到当前TypeHandler所使用泛型的原始类型。这对Mybatis在注册TypeHandler的时候是非常有好处的。在没有指定javaType的情况下，Mybatis在注册TypeHandler时可以通过它来获取当前TypeHandler所使用泛型的原始类型作为要注册的TypeHandler的javaType类型。<br> 假设有一个User类，其中有一个属性interests是String数组类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> User</span><span style="color:#E1E4E8;"> {  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;"> id;  </span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name;  </span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;"> age;  </span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[ ] interests;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要为String 数组定义一个转换类<code>StringArrayTypeHandler</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// StringArrayTypeHandler.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MappedJdbcTypes</span><span style="color:#E1E4E8;">(JdbcType.VARCHAR)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> StringArrayTypeHandler</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> BaseTypeHandler</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[ ]&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 用于定义在Mybatis设置参数时该如何把Java类型的参数转换为对应的数据库类型</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> ps</span><span style="color:#6A737D;"> 当前的PreparedStatement对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> i</span><span style="color:#6A737D;"> 当前参数的位置</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> parameter</span><span style="color:#6A737D;"> 当前参数的Java对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> jdbcType</span><span style="color:#6A737D;"> 当前参数的数据库类型</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#B392F0;"> SQLException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setNonNullParameter</span><span style="color:#E1E4E8;">(PreparedStatement </span><span style="color:#FFAB70;">ps</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#FFAB70;"> i</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[ ] </span><span style="color:#FFAB70;">parameter</span><span style="color:#E1E4E8;">, JdbcType </span><span style="color:#FFAB70;">jdbcType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> SQLException {</span></span>
<span class="line"><span style="color:#6A737D;">        //由于BaseTypeHandler中已经把parameter为null的情况做了处理，所以这里我们就不用再判断parameter是否为空了，直接用就可以了  </span></span>
<span class="line"><span style="color:#E1E4E8;">       StringBuffer result </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> StringBuffer</span><span style="color:#E1E4E8;">();  </span></span>
<span class="line"><span style="color:#F97583;">       for</span><span style="color:#E1E4E8;"> (String value </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> parameter)  </span></span>
<span class="line"><span style="color:#E1E4E8;">           result.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(value).</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">       result.</span><span style="color:#B392F0;">deleteCharAt</span><span style="color:#E1E4E8;">(result.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);  </span></span>
<span class="line"><span style="color:#E1E4E8;">       ps.</span><span style="color:#B392F0;">setString</span><span style="color:#E1E4E8;">(i, result.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">());  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }  </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 用于在Mybatis获取数据结果集时如何把数据库类型转换为对应的Java类型</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> rs</span><span style="color:#6A737D;"> 当前的结果集</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> columnName</span><span style="color:#6A737D;"> 当前的字段名称</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 转换后的Java对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#B392F0;"> SQLException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[ ] </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(ResultSet rs, String columnName) throws SQLException {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getStringArray</span><span style="color:#E1E4E8;">(rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(columnName));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 用于在Mybatis通过字段位置获取字段数据时把数据库类型转换为对应的Java类型</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> rs</span><span style="color:#6A737D;"> 当前的结果集</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> columnIndex</span><span style="color:#6A737D;"> 当前字段的位置</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> 转换后的Java对象</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#B392F0;"> SQLException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[ ] </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(ResultSet rs, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> columnIndex) throws SQLException {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getStringArray</span><span style="color:#E1E4E8;">(rs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(columnIndex));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 用于Mybatis在调用存储过程后把数据库类型的数据转换为对应的Java类型</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> cs</span><span style="color:#6A737D;"> 当前的CallableStatement执行后的CallableStatement</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@param</span><span style="color:#FFAB70;"> columnIndex</span><span style="color:#6A737D;"> 当前输出参数的位置</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@throws</span><span style="color:#B392F0;"> SQLException</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[ ] </span><span style="color:#B392F0;">getNullableResult</span><span style="color:#E1E4E8;">(CallableStatement cs, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> columnIndex) throws SQLException {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getStringArray</span><span style="color:#E1E4E8;">(cs.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(columnIndex));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> String</span><span style="color:#E1E4E8;">[ ] </span><span style="color:#B392F0;">getStringArray</span><span style="color:#E1E4E8;">(String columnValue) {</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (columnValue </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> columnValue.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注册typehandler" tabindex="-1"><a class="header-anchor" href="#注册typehandler"><span>注册TypeHandler</span></a></h3><p>MyBatis 在<code>TypeHandlerRegistry</code>类中已经注册了许多TypeHandler。<br> 我们建立了自己的TypeHandler之后就需要把它注册到Mybatis的配置文件中，让Mybatis能够识别并使用它。注册TypeHandler主要有两种方式:</p><ul><li>一种是通过typeHandler来注册，这样一次只能注册一个TypeHandler。<br> 它有一个必须的属性<code>handler</code>来指明当前要注册的TypeHandler的全名称。另外还有两个可选属性，一个是javaType，用以指定对应的java类型；另一个是jdbcType，用以指定对应的jdbc类型。</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">typeHandlers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">typeHandler</span><span style="color:#B392F0;"> handler</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.example.StringArrayTypeHandler&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[Ljava.lang.String;&quot;</span><span style="color:#B392F0;"> jdbcType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;VARCHAR&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">typeHandlers</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>上面的<code>javaType</code>要写全类名，<code>String[]</code>的全类名为<code>&quot;[Ljava.lang.String;&quot;</code>，所以上面注册的<code>javaType</code>属性为<code>javaType=&quot;[Ljava.lang.String;&quot;</code></p><ul><li>另一种是通过package来注册，MyBatis将会自动检索该包下所有的<code>TypeHandler</code>。<br><strong>注意</strong>:这种方式只能通过<strong>注解方式</strong>来指定 JDBC 的类型</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">typeHandlers</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">package</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.example&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">typeHandlers</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结</strong><br> MyBatis会通过窥探属性的原始类型来推断由类型处理器处理的 Java 类型(前面说的<code>getRawType()</code>方法)，可以通过两种方式显式指定被关联的 Java 类型：</p><ul><li>在类型处理器的配置元素（typeHandler element）上增加一个<code>javaType</code>属性（比如：<code>javaType=&quot;String&quot;</code>）；</li><li>在类型处理器的类上（TypeHandler class）增加一个<code>@MappedTypes</code>注解来指定与其关联的Java类型列表。如果在 <code>javaType</code>属性中也同时指定，则注解方式将被忽略。</li></ul><p>可以通过两种方式来指定被关联的 JDBC 类型：</p><ul><li>在类型处理器的配置元素上增加一个<code>jdbcType</code>属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）；</li><li>在类型处理器的类上（TypeHandler class）增加一个<code>@MappedJdbcTypes</code>注解来指定与其关联的 JDBC 类型列表。 如果在<code>javaType</code>属性中也同时指定，则注解方式将被忽略。</li></ul><p>Mybatis注册TypeHandler就是建立一个<code>javaType</code>、<code>jdbcType</code>和<code>TypeHandler</code>的对应关系。根据上面所讲的情况，MyBatis注册我们写的TypeHandler时可分为下面这几种情况：</p><ol><li>有<code>javaType</code>和<code>jdbcType</code>，那么Mybatis会注册对应<code>javaType</code>和<code>dbcType</code>的<code>TypeHandler</code>。</li><li>有<code>javaType</code>无<code>jdbcType</code>，那么Mybatis会注册对应<code>javaType</code>和<code>null</code>的<code>TypeHandler</code>。</li><li>无<code>javaType</code>有<code>jdbcType</code>，若当前的<code>TypeHandler</code>继承了<code>TypeReference</code>抽象类，Mybatis会利用<code>TypeReference</code>的<code>getRawType()</code>方法取到当前<code>TypeHandler</code>泛型对应的<code>javaType</code>类型以方式1注册。</li><li>无<code>javaType</code>无<code>jdbcType</code>，且当前的<code>TypeHandler</code>未继承<code>TypeReference</code>抽象类，那么Mybatis会注册对应<code>null</code>和<code>null</code>的<code>TypeHandler</code>。</li></ol><h3 id="自动获取typehandler" tabindex="-1"><a class="header-anchor" href="#自动获取typehandler"><span>自动获取TypeHandler</span></a></h3><p>上面是讲 MyBatis 是如何注册TypeHandler，下面讲 Mybatis 是如何获取对应的TypeHandler进行类型转换的。</p><p>我们这样定义<code>UserMapper.xml</code>文件</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> ?&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#F97583;">DOCTYPE</span><span style="color:#79B8FF;"> mapper</span><span style="color:#E1E4E8;"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#B392F0;"> namespace</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.mybatis.example.mapper.UserMapper&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">resultMap</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UserResult&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;User&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">id</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       &lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;interests&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;interests&quot;</span><span style="color:#B392F0;"> javaType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[Ljava.lang.String;&quot;</span><span style="color:#B392F0;"> jdbcType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;VARCHAR&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">resultMap</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">insert</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insertUser&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;User&quot;</span><span style="color:#B392F0;"> useGeneratedKeys</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#B392F0;"> keyColumn</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       insert into t_user(name, age, interests) values(#{name}, #{age}, #{interests, javaType=[Ljava.lang.String;, jdbcType=VARCHAR})  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">insert</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">update</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;updateUser&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;User&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       update t_user set name=#{name}, age=#{age}, interests=#{interests} where id=#{id}  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">update</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">select</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;findById&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#B392F0;"> resultMap</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UserResult&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       select * from t_user where id=#{id}  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">select</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">delete</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;deleteUser&quot;</span><span style="color:#B392F0;"> parameterType</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;int&quot;</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">       delete from t_user where id=#{id}  </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">delete</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mapper</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到<code>UserResult</code>中我们指定了<code>javaType</code>和<code>jdbcType</code>。获取TypeHandler的方式与注册TypeHandler中的总结完全一样。<br> 或者我们可以通过<code>typeHandler</code>属性指定到底使用哪个<code>TypeHandler</code>，这样不指定<code>javaType</code>和<code>jdbcType</code>也可以达到同样效果。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">result</span><span style="color:#B392F0;"> column</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;interests&quot;</span><span style="color:#B392F0;"> property</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;interests&quot;</span><span style="color:#B392F0;"> typeHandler</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.mybatis.example.StringArrayTypeHandler&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em><code>mapper.xml</code>文件的内容请参考后续文章中的动态SQL</em></p><hr><h2 id="mappers-映射器" tabindex="-1"><a class="header-anchor" href="#mappers-映射器"><span>mappers 映射器</span></a></h2><p>MyBatis的配置文件<code>mybtis-config.xml</code>中有<code>mappers</code>元素，其作用是告诉MyBatis去哪里找SQL映射语句。<br> 一般情况会有一个<code>Maper接口</code>和一个<code>Mapper.xml</code>对应(这里指xml文件的<code>namespace</code>与接口对应)，注册<code>Mapper</code>的方法归纳如下：</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="color:#6A737D;">   &lt;!-- 通过mapper元素的resource属性可以指定资源中的Mapper.xml文件 --&gt;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#B392F0;"> resource</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mapper/UserMapper.xml&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#6A737D;">   &lt;!-- 通过mapper元素的url属性可以指定一个通过URL请求道的Mapper.xml文件 --&gt;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#B392F0;"> url</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;file:///var/mappers/UserMapper.xml&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#6A737D;">   &lt;!-- 通过mapper元素的class属性可以指定一个Mapper接口进行注册 --&gt;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">mapper</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis.mapper.UserMapper&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#6A737D;">   &lt;!-- 通过package元素将会把指定包下面的所有Mapper接口进行注册 --&gt;</span><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">package</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.mybatis.bean&quot;</span><span style="color:#E1E4E8;">/&gt;  </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">mappers</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ol><li>根据mybatis3的DTD,package元素必须在mapper元素之后</li><li><code>xml</code>文件的<code>namespace</code>如果与接口不对应，则相当于一个只有接口另一个只有xml文件，两者之间没有任何关联</li></ol><ul><li>如果只有<code>Mapper接口</code>而无<code>Mapper.xml</code>，则接口中必须通过注解来实现，注册时只能通过<code>package</code>或者<code>class</code>方式注册，调用方式如下</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//获取注解后接口对应的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">UserMapper userMapper </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> session.</span><span style="color:#B392F0;">getMapper</span><span style="color:#E1E4E8;">(UserMapper.class);</span></span>
<span class="line"><span style="color:#6A737D;">//调用接口中的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userMapper.</span><span style="color:#B392F0;">findById</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果只有<code>Mapper.xml</code>文件而无<code>Mapper接口</code>，则只能通过<code>resource</code>或<code>url</code>来注册，调用方式也将变成：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//参数中的com.mybatis.example.mapper.UserMapper是xml文件中的namespace指定的类名</span></span>
<span class="line"><span style="color:#6A737D;">//参数中的findById为指定的类中的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sqlSession.</span><span style="color:#B392F0;">selectOne</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.mybatis.example.mapper.UserMapper.findById&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果既有<code>Mapper接口</code>又<code>Mapper.xml</code>(<code>namespace</code>对应才算是都有)则接口中注解不能与xml文件重复，注册最好通过<code>resource</code>(通过<code>class</code>或<code>package</code>注册只会注册接口而不会关联xml文件，通过<code>resource</code>注册不仅会注册xml文件，还会关联对应的接口)，调用方式可以采取上面两种的任意一种。</li></ul><hr>`,60),o=[p];function r(t,c){return a(),n("div",null,o)}const y=s(l,[["render",r],["__file","2015-01-20-MyBatis(二)配置文件.html.vue"]]),E=JSON.parse('{"path":"/program/code/2015-01-20-MyBatis(%E4%BA%8C)%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","title":"MyBatis(二): 配置文件","lang":"zh-CN","frontmatter":{"title":"MyBatis(二): 配置文件","date":"2015-01-20T00:00:00.000Z","category":"Spring","tag":"MyBatis","order":-20150120,"description":"MyBatis 的配置文件即mybatis-config.xml中的configuration标签下有settings、properties等属性。本文对其中常用属性的配置做简单介绍 properties 属性 properties 属性可以从properties文件中获得，也可以直接写到配置文件中。 属性文件里config.properties中内容...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2015-01-20-MyBatis(%E4%BA%8C)%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"MyBatis(二): 配置文件"}],["meta",{"property":"og:description","content":"MyBatis 的配置文件即mybatis-config.xml中的configuration标签下有settings、properties等属性。本文对其中常用属性的配置做简单介绍 properties 属性 properties 属性可以从properties文件中获得，也可以直接写到配置文件中。 属性文件里config.properties中内容..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:published_time","content":"2015-01-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MyBatis(二): 配置文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"properties 属性","slug":"properties-属性","link":"#properties-属性","children":[]},{"level":2,"title":"typeAliases 类型别名","slug":"typealiases-类型别名","link":"#typealiases-类型别名","children":[]},{"level":2,"title":"typeHandlers 类型转换处理器","slug":"typehandlers-类型转换处理器","link":"#typehandlers-类型转换处理器","children":[{"level":3,"title":"自定义TypeHandler","slug":"自定义typehandler","link":"#自定义typehandler","children":[]},{"level":3,"title":"注册TypeHandler","slug":"注册typehandler","link":"#注册typehandler","children":[]},{"level":3,"title":"自动获取TypeHandler","slug":"自动获取typehandler","link":"#自动获取typehandler","children":[]}]},{"level":2,"title":"mappers 映射器","slug":"mappers-映射器","link":"#mappers-映射器","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2015-01-20-MyBatis(二)配置文件.md","localizedDate":"2015年1月20日","excerpt":"","autoDesc":true}');export{y as comp,E as data};
