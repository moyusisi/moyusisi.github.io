import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as l}from"./app-BH4aZQG2.js";const e="/assets/joinPoint-D3TfOaXQ.png",o={},p=l(`<p>获取注解在某个方法上的注解信息</p><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>通过AOP的方式, 方便的把所有方法的请求参数和返回结果都打印出来. 定义一个注解然后写切面拦截这个注解. 注解用于标记什么地方需要打日志(请求参数和返回结果).<br> 注解可以标记在类上, 表示该类的所有方法都需要把参数和返回值打印出来, 这样就不需要给每个方法都加注解了;<br> 注解也可以标记在某个具体的方法上, 表示只有这个方法要打印日志, 其他方法都不需要;<br> 当某类上有注解, 但这个类的某个方法不应该打日志时, 可以在这个方法上加个注解, 并给注解中的属性赋值, 表示不需要打日志.</p><h2 id="注解定义" tabindex="-1"><a class="header-anchor" href="#注解定义"><span>注解定义</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">({ElementType.TYPE, ElementType.METHOD})</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#F97583;"> LogAnnotation</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 是否需要打印参数, 注解在方法上时该属性起作用, 注解在类上, 则忽略其值, 按照true来处理</span></span>
<span class="line"><span style="color:#F97583;">    boolean</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加了注解的类中的方法会被AOP拦截打出日志, 不需要打印日志的方法可以通过指定<code>@LogAnnotation(false)</code> 来实现.</p><h2 id="切点的定义" tabindex="-1"><a class="header-anchor" href="#切点的定义"><span>切点的定义</span></a></h2><p>先写个不能达到目的的错误的例子:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Around</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;@annotation(com.test.LogAnnotation)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">logHandler</span><span style="color:#E1E4E8;">(ProceedingJoinPoint joinPoint) throws Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object returnObject </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        LogAnnotation logAnnotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (LogAnnotation) joinPoint.</span><span style="color:#B392F0;">getSignature</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getDeclaringType</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(LogAnnotation.class);  </span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (logAnnotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">            Signature signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">getSignature</span><span style="color:#E1E4E8;">();               </span><span style="color:#6A737D;">// 获取切点处的方法签名</span></span>
<span class="line"><span style="color:#F97583;">            Object</span><span style="color:#E1E4E8;">[] parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">getArgs</span><span style="color:#E1E4E8;">();                    </span><span style="color:#6A737D;">// 获取切点的传入参数</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}的请求参数为:{}&quot;</span><span style="color:#E1E4E8;">, signature.</span><span style="color:#B392F0;">toShortString</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Gson</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(parameters));</span></span>
<span class="line"><span style="color:#E1E4E8;">            returnObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}返回结果为:{}&quot;</span><span style="color:#E1E4E8;">, signature.</span><span style="color:#B392F0;">toShortString</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Gson</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(returnObject));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> returnObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子不对, 因为<code>joinPoint.getSignature().getDeclaringType()</code>得到的是这个类的类型, 而不是这个方法(切点)的类型, 所以没法得到加在方法上的注解信息</p><p>或许可以这样:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">        JoinPoint jp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        jp.</span><span style="color:#B392F0;">getTarget</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//得到目标对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        jp.</span><span style="color:#B392F0;">getSignature</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;">//得到方法名</span></span>
<span class="line"><span style="color:#E1E4E8;">        jp.</span><span style="color:#B392F0;">getArgs</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//得到方法参数</span></span>
<span class="line"><span style="color:#6A737D;">        // 通过反射拿到这个方法, 然后拿到方法上的注解</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是有更好的方法, 因为可以传递参数给通知方法.<br> 下面的代码就是可以达到目的的切面的写法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Aspect</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> LogAspect</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(LogAspect.class);</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#E1E4E8;"> Gson gson </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Gson</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 若注解仅在类上(方法上没有), 则可通过@within拦截到, 此时通过方法没有拦截到, logParameter为null</span></span>
<span class="line"><span style="color:#6A737D;">     * 若注解在方法上, 则可以通过@annotation拦截到, 此时logParameter为方法上加的注解</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Pointcut</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;@within(logAnnotation) || @annotation(logAnnotation)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">argNames</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;logAnnotation&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> logPointcut</span><span style="color:#E1E4E8;">(LogAnnotation </span><span style="color:#FFAB70;">logAnnotation</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Around</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;logPointcut(logAnnotation)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">logHandler</span><span style="color:#E1E4E8;">(ProceedingJoinPoint </span><span style="color:#FFAB70;">joinPoint</span><span style="color:#E1E4E8;">, LogAnnotation </span><span style="color:#FFAB70;">logAnnotation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Throwable {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Object returnObject </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">        // 方法上有注解并且指定不输出, 则不打印</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;"> !=</span><span style="color:#E1E4E8;"> logAnnotation </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Boolean.FALSE.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(logAnnotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            returnObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Signature signature </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">getSignature</span><span style="color:#E1E4E8;">();               </span><span style="color:#6A737D;">// 获取切点处的方法签名</span></span>
<span class="line"><span style="color:#F97583;">            Object</span><span style="color:#E1E4E8;">[] parameters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">getArgs</span><span style="color:#E1E4E8;">();                    </span><span style="color:#6A737D;">// 获取切点的传入参数</span></span>
<span class="line"><span style="color:#E1E4E8;">            String requestString </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;void&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">            // toShotString, 有参数形如 Hello.hello(..); 无参数形如: Hello.hello()</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (signature.</span><span style="color:#B392F0;">toShortString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;..&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                requestString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gson.</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(parameters);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}的请求参数为:{}&quot;</span><span style="color:#E1E4E8;">, signature.</span><span style="color:#B392F0;">toShortString</span><span style="color:#E1E4E8;">(), requestString);</span></span>
<span class="line"><span style="color:#E1E4E8;">            returnObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> joinPoint.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            String returnString </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;void&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">            // toString, 形如 void com.test.Hello.test(); String com.test.Hello.hello(String)</span></span>
<span class="line"><span style="color:#F97583;">            if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">signature.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;void&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                returnString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gson.</span><span style="color:#B392F0;">toJson</span><span style="color:#E1E4E8;">(returnObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{}返回结果为:{}&quot;</span><span style="color:#E1E4E8;">, signature.</span><span style="color:#B392F0;">toShortString</span><span style="color:#E1E4E8;">(), returnString);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> returnObject;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获取参数的流程解释" tabindex="-1"><a class="header-anchor" href="#获取参数的流程解释"><span>获取参数的流程解释</span></a></h2><p>示例通知方法的写法:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Around</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;args(param) &amp;&amp; target(bean) &amp;&amp; @annotation(logAnnotation)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">argNames</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;jp, param, bean, logAnnotation&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> before</span><span style="color:#E1E4E8;">(JoinPoint jp, String param, PersonService bean, LogAnnotation logAnnotation) {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片解释:</p><figure><img src="`+e+'" alt="获取通知参数流程" tabindex="0" loading="lazy"><figcaption>获取通知参数流程</figcaption></figure>',19),t=[p];function r(c,i){return n(),a("div",null,t)}const d=s(o,[["render",r],["__file","2016-06-01-AOP中获取方法上的注解信息.html.vue"]]),u=JSON.parse('{"path":"/program/code/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html","title":"AOP中获取方法上的注解信息","lang":"zh-CN","frontmatter":{"title":"AOP中获取方法上的注解信息","date":"2016-06-01T00:00:00.000Z","category":"Spring","tag":["AOP"],"order":-20160411,"description":"获取注解在某个方法上的注解信息 应用场景 通过AOP的方式, 方便的把所有方法的请求参数和返回结果都打印出来. 定义一个注解然后写切面拦截这个注解. 注解用于标记什么地方需要打日志(请求参数和返回结果). 注解可以标记在类上, 表示该类的所有方法都需要把参数和返回值打印出来, 这样就不需要给每个方法都加注解了; 注解也可以标记在某个具体的方法上, 表示...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2016-06-01-AOP%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%B9%E6%B3%95%E4%B8%8A%E7%9A%84%E6%B3%A8%E8%A7%A3%E4%BF%A1%E6%81%AF.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"AOP中获取方法上的注解信息"}],["meta",{"property":"og:description","content":"获取注解在某个方法上的注解信息 应用场景 通过AOP的方式, 方便的把所有方法的请求参数和返回结果都打印出来. 定义一个注解然后写切面拦截这个注解. 注解用于标记什么地方需要打日志(请求参数和返回结果). 注解可以标记在类上, 表示该类的所有方法都需要把参数和返回值打印出来, 这样就不需要给每个方法都加注解了; 注解也可以标记在某个具体的方法上, 表示..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"AOP"}],["meta",{"property":"article:published_time","content":"2016-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AOP中获取方法上的注解信息\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"注解定义","slug":"注解定义","link":"#注解定义","children":[]},{"level":2,"title":"切点的定义","slug":"切点的定义","link":"#切点的定义","children":[]},{"level":2,"title":"获取参数的流程解释","slug":"获取参数的流程解释","link":"#获取参数的流程解释","children":[]}],"git":{"createdTime":1719158757000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2016-06-01-AOP中获取方法上的注解信息.md","localizedDate":"2016年6月1日","excerpt":"","autoDesc":true}');export{d as comp,u as data};
