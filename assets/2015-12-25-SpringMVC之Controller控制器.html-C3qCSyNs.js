import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as e}from"./app-BZq5veQF.js";const l={},o=e(`<p>SpringMVC中,每一个URL请求是通过<code>DispatcherServlet</code>负责转发给相应的<code>Handler</code>的, 处理器<code>Handler</code>是基于<code>@Controller</code>和<code>@RequestMapping</code>这两个注解的, <code>@Controller</code>声明一个处理器类，<code>@RequestMapping</code>声明对应请求的映射关系</p><h2 id="简单url映射规则" tabindex="-1"><a class="header-anchor" href="#简单url映射规则"><span>简单URL映射规则</span></a></h2><p><code>@RequestMapping</code>可以标记在类上,也可以标记在方法上,通过例子说明(假设拦截<code>*.do</code>)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/test&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 若类\`TestController\`上没有\`@RequestMapping\`注解, 则访问\`/index1.do\`即可调用\`index1\`方法</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/index1&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// index后面加不加.do都可以,即这里写\`/index1\`等同于\`/index1.do\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span><span style="color:#6A737D;">               // 这个注解是为了不经过\`ModelAndView\`直接返回字符串</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index1</span><span style="color:#E1E4E8;">(Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">map</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 这些参数在返回篇里面说</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/*/index2&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 支持通配符, 如\`/test/abc/index2.do\`,但\`/test/index2.do\`不能访问</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestmapping" tabindex="-1"><a class="header-anchor" href="#requestmapping"><span>RequestMapping</span></a></h2><p><code>@RequestMapping</code>还有很多高级应用, 它有如下属性:</p><ul><li>value : url映射路径,如<code>@RequestMapping({&quot;/index1&quot;})</code>、<code>@RequestMapping({&quot;/index2&quot;, &quot;/index3&quot;})</code></li><li>path : 同value</li><li>method : 指定请求的类型,如<code>@RequestMapping(method = {RequestMethod.GET})</code></li><li>params : 指定请求中必须包含某些参数值时，才让该方法处理</li><li>headers : 指定请求中必须包含某些指定的header值，才能让该方法处理请求</li><li>consumes : 指定处理请求的提交内容类型(Content-Type),例如application/json, text/html</li><li>produces : 指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/test&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 请求参数中必须包含\`key1\`和\`key2\`两个参数才会执行该方法, 如\`/index1.do?key1=1&amp;key2=2\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/index1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">params</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;key1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;key2&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 请求参数中必须包含参数\`key\`且值必须为\`value\`才会执行该方法, 如\`/index2.do?key=value\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/index2&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">params</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;key=value&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 请求头中\`Accept\`必须包含\`text/html\`才会执行该方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;/index3&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">headers</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;Accept=text/html&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index3</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index3&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 该方法仅处理请求中Content-Type为\`application/json\`类型的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;/index4&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">consumes</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> MediaType.APPLICATION_JSON_VALUE)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index4</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index4&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 该方法仅处理请求中Accept包含\`text/html\`的请求,同时暗示了返回的内容类型为\`text/html\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;/index5&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">produces</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;text/html;charset=UTF-8&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index5</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;index5&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pathvariable" tabindex="-1"><a class="header-anchor" href="#pathvariable"><span>PathVariable</span></a></h2><p>在<code>@RequestMapping</code>注解标注的方法上可以使用URI模板<br> URI模板就是在URI中给定一个变量, 然后在映射的时候动态的给该变量赋值, 通过注解<code>@PathVariable</code>获取URI模板中的值</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#6A737D;">//@RequestMapping(value = &quot;/{testName}&quot;)  // 类上的模板变量可以赋值给所有成员方法的参数</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // URI: \`/index1/id5.do\`, 则 id = id5</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/index1/{indexId}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index1</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;indexId&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 可以指定取自哪个URI模板变量, 不指定则默认找跟参数名相同的变量, 最好都指定</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 支持正则, 如 URI: \`/index2/test-10.do\`, 则 indexName=test, v=10</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/index2/{indexName:[a-z]+}-{version:[</span><span style="color:#79B8FF;">\\d</span><span style="color:#9ECBFF;">]+}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index2</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">indexName</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;version&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#FFAB70;"> v</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 简单类型Spring直接转, 复杂类型后面说怎么转</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> indexName </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;-&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> v;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="requestparam" tabindex="-1"><a class="header-anchor" href="#requestparam"><span>RequestParam</span></a></h2><p>使用<code>@RequestParam</code>可以绑定<code>HttpServletRequest</code>请求参数到Controller的方法参数<br> 它有几个属性:</p><ul><li>value : 绑定的请求中的参数名字</li><li>name : 同value</li><li>required : 是否必传, 默认为<code>true</code></li><li>defaultValue : 默认值, 不传时相当于默认传了该值</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // URI: \`/index1.do?id=5\`, 则 id = 5</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/index1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index1</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestParam</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">// 默认绑定同名参数</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cookievalue" tabindex="-1"><a class="header-anchor" href="#cookievalue"><span>CookieValue</span></a></h2><p>使用<code>@CookieValue</code>可以绑定 cookie 的值到Controller的方法参数, 它的属性和用法同<code>RequestParam</code></p><h2 id="requestheader" tabindex="-1"><a class="header-anchor" href="#requestheader"><span>RequestHeader</span></a></h2><p>使用<code>@RequestHeader</code>可以绑定<code>HttpServletRequest</code>头信息到Controller的方法参数, 属性和用法同<code>RequestParam</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/index&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ResponseBody</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestHeader</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">Host</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">RequestHeader</span><span style="color:#E1E4E8;"> String </span><span style="color:#FFAB70;">host</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> Host </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;;&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> host;  </span><span style="color:#6A737D;">// 两个值是一样的, 即RequestHeader是大小写不敏感的, 这是与RequestParam的不同</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modelattribute-和-sessionattributes" tabindex="-1"><a class="header-anchor" href="#modelattribute-和-sessionattributes"><span>ModelAttribute 和 SessionAttributes</span></a></h2><p><code>@ModelAttribute</code>和<code>@SessionAttributes</code>可在不同的模型和控制器之间共享数据<br><code>@ModelAttribute</code>主要有两种使用方式，一种是标注在方法上，一种是标注在Controller的方法参数上:</p><ul><li>标注在方法上时,该方法将在处理器方法(即有<code>@RequestMapping</code>注解的方法)执行之前执行, 然后把返回的对象存放在session或模型属性中,属性名可以使用<code>@ModelAttribute(&quot;attributeName&quot;)</code> 在指定, 若未指定,则用返回类型的类名(首字母小写)作为属性名称</li><li>标注在Controller的方法参数上时, 即将属性值从session或模型属性中取出来注入到参数中去</li></ul><p><code>@SessionAttributes</code>一般是标记在Controller类上,用来从Session中存取数据, 可以通过<code>value(names)</code>、<code>types</code>属性来指定哪些是需要存放在session中的:</p><ul><li>使用<code>value</code>或<code>names</code>属性的时候, 使用的Session属性名称应为对应的名称</li><li>使用<code>types</code>属性的时候,则使用的Session属性名称为对应类型的名称(首字母小写)</li><li>当<code>value</code>和<code>types</code>两个属性同时使用时,取的是它们的 <em>并集</em>, 而不是交集</li></ul><p>如何使用看下面例子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// OneController没有使用\`@SessionAttributes\`标注, 属性值存放在模型属性中</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> OneController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#6A737D;">    // ModelAttribute标注的方法，每次请求控制器方法时都会执行</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;不设置属性名则默认为string&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;Tom&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;属性名为name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;Bob&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/one&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">name2</span><span style="color:#E1E4E8;">, HttpSession </span><span style="color:#FFAB70;">session</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;请求／one.do时, 该控制器方法执行之前,上面那两个方法就已经执行了&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Enumeration names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> session.</span><span style="color:#B392F0;">getAttributeNames</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">        while</span><span style="color:#E1E4E8;"> (names.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(names.</span><span style="color:#B392F0;">nextElement</span><span style="color:#E1E4E8;">());  </span><span style="color:#6A737D;">// 这里什么也没输出</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;,&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> name2;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// TwoController使用\`@SessionAttributes\`标注, 某些属性值存放在session中</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SessionAttributes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">names</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;v1&quot;</span><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">types</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {String.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TwoController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;v1&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 通过names注入到session, 属性名为v1</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Integer </span><span style="color:#B392F0;">value1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;model:v1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s1&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">// 通过types保存到session, 属性名为s1</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">string1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;model:s1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;s1&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#6A737D;">        // 通过types保存到session, 属性名为默认的string</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">string2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;model:s2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;s2&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#6A737D;">        // 只能保存到模型属性中, 属性名为默认的date, 每次仍会执行</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Date </span><span style="color:#B392F0;">date1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;model:d1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/two&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;v1&quot;</span><span style="color:#E1E4E8;">) Integer </span><span style="color:#FFAB70;">v1</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;date&quot;</span><span style="color:#E1E4E8;">) Date </span><span style="color:#FFAB70;">d1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;s1&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">s1</span><span style="color:#E1E4E8;">, @</span><span style="color:#F97583;">ModelAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#E1E4E8;">) String </span><span style="color:#FFAB70;">s2</span><span style="color:#E1E4E8;">, HttpSession </span><span style="color:#FFAB70;">session</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Enumeration names </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> session.</span><span style="color:#B392F0;">getAttributeNames</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">        while</span><span style="color:#E1E4E8;"> (names.</span><span style="color:#B392F0;">hasMoreElements</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;session:&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> names.</span><span style="color:#B392F0;">nextElement</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> v1 </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;,&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> s1 </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;,&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> s2 </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;,&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> d1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于<code>TwoController</code>的输出结果有必要说明下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 第一遍请求/two.do输出的结果:</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">s1</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">s2</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">d1</span></span>
<span class="line"><span style="color:#6A737D;">// 第二遍请求/two.do输出的结果:</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">s2</span></span>
<span class="line"><span style="color:#E1E4E8;">model</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">d1</span></span>
<span class="line"><span style="color:#E1E4E8;">session</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">v1</span></span>
<span class="line"><span style="color:#E1E4E8;">session</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">s1</span></span>
<span class="line"><span style="color:#E1E4E8;">session</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">string</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一遍请求时session中还没有属性，请求完建立session之后才有值</p><h2 id="自定义参数类型转换" tabindex="-1"><a class="header-anchor" href="#自定义参数类型转换"><span>自定义参数类型转换</span></a></h2><p>处理器方法参数接收请求参数绑定数据的时候,对于一些简单的数据类型Spring会帮我们自动进行类型转换,而对于一些复杂的类型想要在接受参数时自动转换就必须向Spring注册一个对特定类型的识别转换器<br> Spring允许我们提供两种类型的识别转换器，一种是注册在Controller中的，一种是注册在SpringMVC的配置中;<br> 定义在Controller中的是局部的，只在当前Controller中有效，而放在SpringMVC配置文件中的是全局的，所有Controller都可以拿来使用。</p><p>每一个使用<code>@RequestParam</code>,<code>@PathVariable\`\`@RequestHeader\`\`@CookieValue</code>和<code>@ModelAttribute</code>标记的参数绑定时都会触发<code>initBinder</code>方法的执行,包括全局和局部的(局部只包括当前类中有效的), 注意是每一个,即每次请求，有几个注解参数就会触发几次</p><h3 id="使用-initbinder注解定义局部的类型转换器" tabindex="-1"><a class="header-anchor" href="#使用-initbinder注解定义局部的类型转换器"><span>使用<code>@InitBinder</code>注解定义局部的类型转换器</span></a></h3><p>在控制器里定义一个用<code>@InitBinder</code>注解的方法并声明一个<code>WebDataBinder</code>参数, 当Controller在处理请求方法时,若发现有不能解析的对象, 就会看该类中是否有用<code>@InitBinder</code>标记的方法, 如果有就会执行该方法, 然后看里面定义的类型转换器是否与当前需要的类型匹配.如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">InitBinder</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> dataBinder</span><span style="color:#E1E4E8;">(WebDataBinder </span><span style="color:#FFAB70;">binder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        DateFormat dateFormat </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyyMMdd&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        PropertyEditor propertyEditor </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> CustomDateEditor</span><span style="color:#E1E4E8;">(dateFormat, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 第二个参数表示是否允许为空</span></span>
<span class="line"><span style="color:#E1E4E8;">        binder.</span><span style="color:#B392F0;">registerCustomEditor</span><span style="color:#E1E4E8;">(Date.class, propertyEditor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test/{date}&quot;</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// URI: /test/20151218.do</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testDate</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">PathVariable</span><span style="color:#E1E4E8;"> Date </span><span style="color:#FFAB70;">date</span><span style="color:#E1E4E8;">, Writer </span><span style="color:#FFAB70;">writer</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(date.</span><span style="color:#B392F0;">getTime</span><span style="color:#E1E4E8;">()));  </span><span style="color:#6A737D;">// 输出: 1450368000000</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型转换器是通过<code>WebDataBinder</code>对象的<code>registerCustomEditor</code>方法来注册的,要实现自己的类型转换器就要实现自己的<code>PropertyEditor</code> 对象. Spring已经提供了一些常用的属性编辑器,如<code>CustomDateEditor</code>,<code>CustomBooleanEditor</code>等</p><h3 id="propertyeditor属性编辑器" tabindex="-1"><a class="header-anchor" href="#propertyeditor属性编辑器"><span>PropertyEditor属性编辑器</span></a></h3><p><code>PropertyEditor</code>是JDK的接口,它有个实现类:<code>PropertyEditorSupport</code>,所以要实现自己的<code>PropertyEditor</code>时只需继承<code>PropertyEditorSupport</code>类, 然后重写其中的一些方法即可,一般重写<code>setAsText</code>和<code>getAsText</code>方法就可以了.</p><p><code>setAsText</code>方法用于把字符串类型的值转换为对应的对象,一般先把字符串类型的对象转为特定的对象，然后利用<code>PropertyEditor</code>的<code>setValue</code>方法设定转换后的值.<br><code>getAsText</code>方法用于把对象当做字符串来返回,一般先使用<code>getValue</code>方法获取当前的对象, 然后把它转换为字符串后再返回给<code>getAsText</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">InitBinder</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> dataBinder</span><span style="color:#E1E4E8;">(WebDataBinder </span><span style="color:#FFAB70;">binder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 定义一个 User 属性编辑器</span></span>
<span class="line"><span style="color:#E1E4E8;">        PropertyEditor userEditor </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> PropertyEditorSupport</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">            public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setAsText</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">userStr</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">                User user </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> User</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, userStr);  </span><span style="color:#6A737D;">// 先转成User对象</span></span>
<span class="line"><span style="color:#B392F0;">                setValue</span><span style="color:#E1E4E8;">(user);                    </span><span style="color:#6A737D;">// 在用setValue设置转换后的值</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">            public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getAsText</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (User) </span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();     </span><span style="color:#6A737D;">// 先获取当前对象</span></span>
<span class="line"><span style="color:#F97583;">                return</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">getUsername</span><span style="color:#E1E4E8;">();         </span><span style="color:#6A737D;">// 再返回对象的字符串形式</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#6A737D;">        // 使用 WebDataBinder 注册 User 类型的属性编辑器</span></span>
<span class="line"><span style="color:#E1E4E8;">        binder.</span><span style="color:#B392F0;">registerCustomEditor</span><span style="color:#E1E4E8;">(User.class , userEditor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现webbindinginitializer接口定义全局的类型转换器" tabindex="-1"><a class="header-anchor" href="#实现webbindinginitializer接口定义全局的类型转换器"><span>实现WebBindingInitializer接口定义全局的类型转换器</span></a></h3><p>定义全局的类型转换器需要实现自己的<code>WebBindingInitializer</code>对象,然后把该对象注入到<code>RequestMappingHandlerAdapter</code>中,这样Spring在遇到自己不能解析的对象的时候就会到全局的<code>WebBindingInitializer</code>的<code>initBinder</code>方法中去找,每次遇到不认识的对象时,<code>initBinder</code>方法都会被执行一遍.</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> RequestMappingHandlerAdapter </span><span style="color:#B392F0;">requestMappingHandlerAdapter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        RequestMappingHandlerAdapter adapter </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> super</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">requestMappingHandlerAdapter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 匿名内部类定义自己的WebBindingInitializer, 并注入到RequestMappingHandlerAdapter中</span></span>
<span class="line"><span style="color:#E1E4E8;">        adapter.</span><span style="color:#B392F0;">setWebBindingInitializer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> WebBindingInitializer</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">            public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> initBinder</span><span style="color:#E1E4E8;">(WebDataBinder </span><span style="color:#FFAB70;">binder</span><span style="color:#E1E4E8;">, WebRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                DateFormat dateFormat </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> SimpleDateFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;yyyyMMdd&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                PropertyEditor propertyEditor </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> CustomDateEditor</span><span style="color:#E1E4E8;">(dateFormat, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                binder.</span><span style="color:#B392F0;">registerCustomEditor</span><span style="color:#E1E4E8;">(Date.class, propertyEditor);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> adapter;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制器方法支持的方法参数" tabindex="-1"><a class="header-anchor" href="#控制器方法支持的方法参数"><span>控制器方法支持的方法参数</span></a></h2><p><code>@RequestMapping</code>标记的控制器方法,传入spring会自动帮我们赋值，我们直接在方法上声明参数即可。<br> 方法的传入参数归纳如下:</p><ul><li>HttpServlet对象: 包括<code>HttpServletRequest</code>, <code>HttpServletResponse</code>和<code>HttpSession</code>对象. 使用<code>HttpSession</code>时如果此时session还没建立起来就会有问题</li><li>Spring自己的<code>WebRequest</code>对象: 该对象可以访问到存放在HttpServletRequest和HttpSession中的属性值</li><li>流对象: 包括<code>InputStream</code>, <code>OutputStream</code>, <code>Reader</code>和<code>Writer</code>.<code>InputStream</code>和<code>Reader</code>是针对HttpServletRequest 而言的,可以从里面取数据; <code>OutputStream</code>和<code>Writer</code>是针对HttpServletResponse而言的,可以往里面写数据,如下列子:</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Controller</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/index&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;">//  直接向客户端输出内容</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">(Writer </span><span style="color:#FFAB70;">writer</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException{</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\r</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;哈哈&quot;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">        writer.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">( </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\r</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用<code>@PathVariable</code>, <code>@RequestParam</code>, <code>@CookieValue</code>和<code>@RequestHeader</code>标记的参数</li><li>使用<code>@ModelAttribute</code>标记的参数: 取模型属性相当于<code>request.getAttribute(&quot;key&quot;)</code>; 使用<code>@SessionAttributes</code>注解控制器之后,从session中取数据相当于<code>session.getAttribute(&quot;key&quot;)</code></li><li><code>Map</code>, <code>Model</code>和<code>ModelMap</code>: 这些都可以用来封装模型数据,用来给视图做展示.</li><li>实体类: 可以用来接收上传的参数</li><li>Spring封装的<code>MultipartFile</code>: 用来接收上传文件</li><li>Spring封装的<code>Errors</code>和<code>BindingResult</code>对象: 这两个对象参数必须紧接在需要验证的实体对象参数之后，它里面包含了实体对象的验证结果</li></ul><h2 id="返回值的类型" tabindex="-1"><a class="header-anchor" href="#返回值的类型"><span>返回值的类型</span></a></h2><p>处理器中<code>@RequestMapping</code>标记的处理器方法的返回值也有不同情况，大部分情况是返回一个<code>ModelAndView</code>, 这个过程中发挥作用的就是<code>ViewResolver</code>和<code>View</code>. 有下面这些情况:</p><ul><li>返回<code>ModelAndView</code>对象: 包含模型和视图,模型是map的形式,可以通过<code>request.getAttribute(&quot;key&quot;)</code>取值;视图是字符串形式,表示视图的名字</li><li>返回模型: 包括<code>Map</code>, Spring的<code>Model</code>和<code>ModelMap</code>, 视图名称将由<code>RequestToViewNameTranslator</code>决定</li><li>返回视图对象<code>View</code>: 这种情况可以给处理器方法传入一个模型参数,比如上面传入的那个Map,可在方法体里面往模型中添加值,相当于<code>setAttribute</code></li><li>返回字符串<code>String</code>: 这往往代表的是一个视图名称, 如果需要模型的话,跟上面一样,传入一个模型参数即可</li><li>返回<code>void</code>: 这种情况一般是我们直接把返回结果写到<code>HttpServletResponse</code>中了,比如上面的<code>Writer</code>那样; 如果没有写,则会利用<code>RequestToViewNameTranslator</code>来返回一个对应的视图名称</li><li>处理器方法被<code>@ResponseBody</code>标记: 被标记的方法任何返回值都不会像上面那样当作视图或模型来处理, 而是通过<code>HttpMessageConverters</code>转换之后写到<code>HttpServletResponse</code>中</li><li>除了上面情况之外的其它任何返回类型都会被当做模型中的一个属性来处理,属性名称可在该方法上用<code>@ModelAttribute(&quot;attributeName&quot;)</code> 来定义, 否则将使用返回类型的类名称的首字母小写形式来表示; 返回的视图还是由<code>RequestToViewNameTranslator</code>来决定.</li></ul>`,52),p=[o];function t(r,c){return n(),a("div",null,p)}const d=s(l,[["render",t],["__file","2015-12-25-SpringMVC之Controller控制器.html.vue"]]),y=JSON.parse('{"path":"/program/code/2015-12-25-SpringMVC%E4%B9%8BController%E6%8E%A7%E5%88%B6%E5%99%A8.html","title":"SpringMVC之Controller控制器","lang":"zh-CN","frontmatter":{"title":"SpringMVC之Controller控制器","date":"2015-12-25T00:00:00.000Z","category":"Spring","tag":["Controller"],"order":-20151225,"description":"SpringMVC中,每一个URL请求是通过DispatcherServlet负责转发给相应的Handler的, 处理器Handler是基于@Controller和@RequestMapping这两个注解的, @Controller声明一个处理器类，@RequestMapping声明对应请求的映射关系 简单URL映射规则 @RequestMapping...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/code/2015-12-25-SpringMVC%E4%B9%8BController%E6%8E%A7%E5%88%B6%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringMVC之Controller控制器"}],["meta",{"property":"og:description","content":"SpringMVC中,每一个URL请求是通过DispatcherServlet负责转发给相应的Handler的, 处理器Handler是基于@Controller和@RequestMapping这两个注解的, @Controller声明一个处理器类，@RequestMapping声明对应请求的映射关系 简单URL映射规则 @RequestMapping..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-16T03:30:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Controller"}],["meta",{"property":"article:published_time","content":"2015-12-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-16T03:30:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC之Controller控制器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-12-25T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-16T03:30:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"简单URL映射规则","slug":"简单url映射规则","link":"#简单url映射规则","children":[]},{"level":2,"title":"RequestMapping","slug":"requestmapping","link":"#requestmapping","children":[]},{"level":2,"title":"PathVariable","slug":"pathvariable","link":"#pathvariable","children":[]},{"level":2,"title":"RequestParam","slug":"requestparam","link":"#requestparam","children":[]},{"level":2,"title":"CookieValue","slug":"cookievalue","link":"#cookievalue","children":[]},{"level":2,"title":"RequestHeader","slug":"requestheader","link":"#requestheader","children":[]},{"level":2,"title":"ModelAttribute 和 SessionAttributes","slug":"modelattribute-和-sessionattributes","link":"#modelattribute-和-sessionattributes","children":[]},{"level":2,"title":"自定义参数类型转换","slug":"自定义参数类型转换","link":"#自定义参数类型转换","children":[{"level":3,"title":"使用@InitBinder注解定义局部的类型转换器","slug":"使用-initbinder注解定义局部的类型转换器","link":"#使用-initbinder注解定义局部的类型转换器","children":[]},{"level":3,"title":"PropertyEditor属性编辑器","slug":"propertyeditor属性编辑器","link":"#propertyeditor属性编辑器","children":[]},{"level":3,"title":"实现WebBindingInitializer接口定义全局的类型转换器","slug":"实现webbindinginitializer接口定义全局的类型转换器","link":"#实现webbindinginitializer接口定义全局的类型转换器","children":[]}]},{"level":2,"title":"控制器方法支持的方法参数","slug":"控制器方法支持的方法参数","link":"#控制器方法支持的方法参数","children":[]},{"level":2,"title":"返回值的类型","slug":"返回值的类型","link":"#返回值的类型","children":[]}],"git":{"createdTime":1719155638000,"updatedTime":1723779034000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/code/2015-12-25-SpringMVC之Controller控制器.md","localizedDate":"2015年12月25日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
