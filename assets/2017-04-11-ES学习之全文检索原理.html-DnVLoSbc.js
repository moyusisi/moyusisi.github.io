import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,o as c,d}from"./app-DQ46ret3.js";const t="/assets/post_list-DXhcIuMD.jpg",l="/assets/post_list2-BIXKvRbu.jpg",a={},i=d('<p><code>Elasticsearch</code>是比较好用的全文搜索工具, 它是基于<code>Lucene</code>的, 本文简单介绍下全文搜索的一些内容</p><h2 id="关于搜索" tabindex="-1"><a class="header-anchor" href="#关于搜索"><span>关于搜索</span></a></h2><p>搜索就是从一堆数据里找我们想要的内容, 我们先对数据做个分类:</p><ul><li><code>结构化数据</code>: 具有固定格式或长度限制的数据, 如数据库</li><li><code>非结构化数据</code>: 也叫全文数据, 没有固定格式的数据, 如一篇作文, 一封邮件</li></ul><p>此外还有半结构化数据, 如<code>XML</code>, <code>HTML</code>等, 按不同的数据分类, 搜索也分两类:</p><ul><li><code>对结构化数据的搜索</code>: 如数据库搜索, 使用SQL语句。</li><li><code>全文搜索</code>: 如<code>grep</code>命令, Google和百度对大量数据的搜索等。</li></ul><h2 id="全文搜索的方法" tabindex="-1"><a class="header-anchor" href="#全文搜索的方法"><span>全文搜索的方法</span></a></h2><p>对全文数据进行搜索, 最简单的一种方式就是顺序扫描, 如果要找某个字符串, 则需要从头到尾开始找, 找到了则该文档就是我们要找的文档, 接下来再从下一个文档中搜索。这种方法最简单，单数据量大的时候效率十分低。</p><p>第二种方法是先把这些全文数据处理一下, 提取一部分信息重新组织, 让它变得有一定的结构。 这部分从非结构化数据中提取出的然后重新组织的信息，我们称之为索引。</p><p>因此通常全文检索分为两个过程: 创建索引(<code>Index</code>)和搜索索引(<code>Search</code>)。虽然创建索引的过程比较慢, 但索引创建之后可以多次使用，大大提高了搜索的效率。</p><h2 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引"><span>倒排索引</span></a></h2><p>在顺序扫描中, 我们是匹配文档是否包含我们所查找的字符串, 即从文档中找字符串; 我们想要的结果是哪些文档中包含要找的字符串, 即找到字符串到文档的映射, 两者恰恰相反. 所以如果索引能够保存字符串到文档的映射关系, 搜索就会变快, 这种保存字符串到文档映射关系的索引, 被称作<code>反向索引</code>或<code>倒排索引</code>.</p><p>假设我们有100篇文章, 三个字符串<code>lucene</code>,<code>solr</code>,<code>hadoop</code>分别出现在不同的文章中, 我们创建的反向索引如下图:</p><figure><img src="'+t+'" alt="倒排索引" tabindex="0" loading="lazy"><figcaption>倒排索引</figcaption></figure><p>左边的字符串一般称为词典, 右边是包含该字符串的文档(<code>Document</code>)组成的链表, 成为倒排表(<code>Posting List</code>)</p><p>我们利用反向索引查找即包含<code>lucene</code>, 又包含<code>hadoop</code>的文档, 只需要通过字典找到两个链表, 把链表中相同的文档取出即可.</p><h2 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引"><span>创建索引</span></a></h2><ul><li>第一步: 把文档(<code>Document</code>)传给分词组件(<code>Tokenizer</code>)</li></ul><p>这个过程会把文档<code>Document</code>分割成一个个的单词, 去掉标点, 去掉停顿次(<code>the</code>, <code>a</code>, <code>this</code>等), 经过分词得到的结果成为词元(<code>Token</code>).</p><ul><li>第二步: 把词元(<code>Token</code>)交给语言处理组件(<code>linguistic processor</code>)</li></ul><p>语言处理组件(<code>linguistic processor</code>)主要是对得到的词元(<code>Token</code>)做一些同语言相关的处理, 比如变为小写(<code>lowercase</code>), 复数变为单数(<code>stemming</code>), 过去式变为原型(<code>lemmatization</code>)等。语言处理组件的结果被称为词(<code>Term</code>).</p><ul><li>第三步: 把词(<code>Term</code>)传给索引组件(<code>Indexer</code>)</li></ul><p>索引组件利用词(<code>Term</code>)生成一个字典, 按字母顺序进行排序, 然后合并相同的<code>Term</code>成为文档的倒排链表</p><figure><img src="'+l+'" alt="倒排索引" tabindex="0" loading="lazy"><figcaption>倒排索引</figcaption></figure><p>其中:</p><ul><li><code>Document Frequency</code>: 文档频次，表示总共有多少文件包含此词(<code>Term</code>)</li><li><code>Frequency</code>: 词频率，表示此文件中包含了几个此词(<code>Term</code>)</li></ul><h2 id="搜索索引" tabindex="-1"><a class="header-anchor" href="#搜索索引"><span>搜索索引</span></a></h2><ul><li>第一步: 输入查询语句</li></ul><p>查询语句一般会有一定的语法, 比如<code>lucene AND learned NOT hadoop</code>, 表示搜索包含<code>lucene</code>和<code>learned</code>但不包含<code>hadoop</code>的文档</p><ul><li>第二步: 对查询语句进行词法分析, 语法分析, 及语言处理</li></ul><p>词法分析主要用来识别关键词和要搜索的单词, 比如例子中关键词有<code>AND</code>和<code>NOT</code>;<br> 语法分析主要用来生成语法树, 不满足语法规则的则报错;<br> 语言处理跟创建索引中几乎一致, 比如<code>learned</code>变为<code>learn</code>;</p><p>经过第二步处理, 得到一个经过语言处理的语法树</p><ul><li>第三步: 搜索索引, 得到符合语法树的文档</li></ul><p>首先，在反向索引表中，分别找出包含<code>lucene, learn, hadoop</code>的文档链表<br> 其次，对包含<code>lucene, learn</code>的链表进行合并, 得到既包含<code>lucene</code>又包含<code>learn</code>的文档链表<br> 然后，将此链表与<code>hadoop</code>的文档链表进行差操作, 去除包含<code>hadoop</code>的文档<br> 最后, 此文档链表就是我们要找的文档</p><ul><li>第四步: 根据文档和查询语句的相关性,对结果进行排序</li></ul><p>这一步要先根据相关性进行打分, 得分高的排序靠前.</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><ul><li><a href="http://www.kailing.pub/article/index/arcid/72.html" target="_blank" rel="noopener noreferrer">Lucene全文检索的基本原理</a></li><li><a href="http://www.open-open.com/lib/view/open1410492056742.html" target="_blank" rel="noopener noreferrer">Lucene和搜索技术</a></li></ul>',38),r=[i];function n(p,s){return c(),o("div",null,r)}const m=e(a,[["render",n],["__file","2017-04-11-ES学习之全文检索原理.html.vue"]]),g=JSON.parse('{"path":"/program/backend/2017-04-11-ES%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%8E%9F%E7%90%86.html","title":"ES学习之全文检索原理","lang":"zh-CN","frontmatter":{"title":"ES学习之全文检索原理","date":"2017-04-11T00:00:00.000Z","category":"Java","tag":["ES"],"order":-20170411,"description":"Elasticsearch是比较好用的全文搜索工具, 它是基于Lucene的, 本文简单介绍下全文搜索的一些内容 关于搜索 搜索就是从一堆数据里找我们想要的内容, 我们先对数据做个分类: 结构化数据: 具有固定格式或长度限制的数据, 如数据库 非结构化数据: 也叫全文数据, 没有固定格式的数据, 如一篇作文, 一封邮件 此外还有半结构化数据, 如XML...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2017-04-11-ES%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"ES学习之全文检索原理"}],["meta",{"property":"og:description","content":"Elasticsearch是比较好用的全文搜索工具, 它是基于Lucene的, 本文简单介绍下全文搜索的一些内容 关于搜索 搜索就是从一堆数据里找我们想要的内容, 我们先对数据做个分类: 结构化数据: 具有固定格式或长度限制的数据, 如数据库 非结构化数据: 也叫全文数据, 没有固定格式的数据, 如一篇作文, 一封邮件 此外还有半结构化数据, 如XML..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T00:52:15.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"ES"}],["meta",{"property":"article:published_time","content":"2017-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T00:52:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES学习之全文检索原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T00:52:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"关于搜索","slug":"关于搜索","link":"#关于搜索","children":[]},{"level":2,"title":"全文搜索的方法","slug":"全文搜索的方法","link":"#全文搜索的方法","children":[]},{"level":2,"title":"倒排索引","slug":"倒排索引","link":"#倒排索引","children":[]},{"level":2,"title":"创建索引","slug":"创建索引","link":"#创建索引","children":[]},{"level":2,"title":"搜索索引","slug":"搜索索引","link":"#搜索索引","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719190335000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":2}]},"filePathRelative":"program/backend/2017-04-11-ES学习之全文检索原理.md","localizedDate":"2017年4月11日","excerpt":"","autoDesc":true}');export{m as comp,g as data};
