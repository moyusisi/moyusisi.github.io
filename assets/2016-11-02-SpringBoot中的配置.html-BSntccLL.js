import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as a}from"./app-C4fqlW-q.js";const o={},l=a(`<p>这里所说的配置是指<code>properties</code>文件这样的配置</p><h2 id="配置的方式及优先级" tabindex="-1"><a class="header-anchor" href="#配置的方式及优先级"><span>配置的方式及优先级</span></a></h2><p><code>Spring Boot</code>允许通过<code>properties</code>文件, <code>YAML</code>文件, <code>Environment</code>变量, 命令行参数等进行配置. 属性值可以通过<code>@Value</code>注入到bean中并通过Spring的<code>Environment</code>访问, 或通过<code>@ConfigurationProperties</code>直接绑定到对象上.</p><p><code>Spring Boot</code>所提供的配置优先级从高到低如下所示:</p><ol><li>Spring的<code>devtools</code>的全局配置(<code>~/.spring-boot-devtools.properties</code>文件)(当使用了<code>devtools</code>时)</li><li>Test类上通过<code>@TestPropertySource</code>声明的属性文件</li><li>Test类上通过<code>@SpringBootTest#properties</code>声明的属性</li><li>命令行参数</li><li><code>SPRING_APPLICATION_JSON</code>属性, 环境变量或系统属性中的JSON</li><li><code>ServletConfig</code>初始化参数</li><li><code>ServletContext</code>初始化参数</li><li>来自于<code>java:comp/env</code>的JNDI属性</li><li>Java系统属性(<code>System.getProperties()</code>)</li><li>操作系统环境变量</li><li>通过<code>RandomValuePropertySource</code>生成的<code>random.*</code>属性</li><li>jar包外的<code>profile</code>配置文件(<code>application-{profile}.properties</code>和<code>YAML</code>配置)</li><li>jar包内的<code>profile</code>配置文件(<code>application-{profile}.properties</code>和<code>YAML</code>配置)</li><li>jar包外的应用程序配置文件(<code>application.properties</code>和<code>YAML</code>配置)</li><li>jar包内的应用程序配置文件(<code>application.properties</code>和<code>YAML</code>配置)</li><li>配置类(<code>@Configuration</code>类)上的通过<code>@PropertySource</code>注解声明的属性文件</li><li>通过<code>SpringApplication.setDefaultProperties</code>声明的默认属性</li></ol><h3 id="优先级举例" tabindex="-1"><a class="header-anchor" href="#优先级举例"><span>优先级举例</span></a></h3><p>在<code>classpath:application.properties</code>文件里有个<code>name</code>变量(假设将它打成了jar包), 当在一个新的环境中运行时, 可以通过在jar包外(即新环境的的<code>classpath</code>下)提供一个<code>application.properties</code>文件, 重新设置<code>name</code>变量的值. 甚至在测试的时候,可以通过优先级更高的命令行参数指定<code>name</code>的值(<code>java -jar app.jar --name=&quot;Spring&quot;</code>)</p><h3 id="命令行参数" tabindex="-1"><a class="header-anchor" href="#命令行参数"><span>命令行参数</span></a></h3><p><code>SpringApplication</code>会把所有的命令行参数(以<code>--</code>开头, 如<code>--server.port=9000</code>)转化为属性加载到Spring的<code>Environment</code>中, 命令行参数的优先级高于配置文件</p><p>如果不想让命令行参数添加到<code>Environment</code>中, 可通过<code>SpringApplication.setAddCommandLineProperties(false)</code>设置</p><h3 id="spring-application-json" tabindex="-1"><a class="header-anchor" href="#spring-application-json"><span>SPRING_APPLICATION_JSON</span></a></h3><p>上面第5条中说的<code>SPRING_APPLICATION_JSON</code>属性, 可以在命令行中指定</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>$ SPRING_APPLICATION_JSON=&#39;{&quot;foo&quot;:{&quot;bar&quot;:&quot;spam&quot;}}&#39; java -jar myapp.jar  // 环境变量形式</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就相当于在Spring的<code>Environment</code>中添加了<code>foo.bar=spam</code>.<br> 也可以像下面这些方式提供:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>$ java -Dspring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39; -jar myapp.jar   // 系统变量</span></span>
<span class="line"><span>$ java -jar myapp.jar --spring.application.json=&#39;{&quot;foo&quot;:&quot;bar&quot;}&#39;   // 命令行参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或以JNDI变量<code>java:comp/env/spring.application.json</code>提供</p><p>其实上面介绍的这几条优先级比较高的配置, 实际并不太常用. 命令行在测试的时候用的还算比较多</p><h2 id="配置文件-application-properties" tabindex="-1"><a class="header-anchor" href="#配置文件-application-properties"><span>配置文件:<code>application.properties</code></span></a></h2><p><code>SpringApplication</code>默认会加载配置文件<code>application.properties</code>中的配置并加到Spring <code>Environment</code>中, 该文件的加载有个优先级: <code>classpath:/config/application.properties</code> &gt; <code>classpath:/application.properties</code>即在<code>classpath:/config/</code>下的配置文件优先级比较高. 也可以使用YAML文件(<code>application.yml</code>)来替代properties文件.</p><p><code>application.properties</code>被称为<code>Spring Boot</code>的外露配置, 文件中有很多属性可用来配置整个应用, 比如<code>server.port=8080</code>等; 你可以通过指定这些属性值来配置应用.</p><p>配置文件的名字和位置, 也可自定义, 可通过<code>spring.config.name</code>和<code>spring.config.location</code>环境属性来指定, 这两个属性使用的时期非常早, 所以一般会在命令行或者系统属性或环境变量中来指定, 如:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>$ java -jar myproject.jar --spring.config.name=myproject</span></span>
<span class="line"><span>$ java -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>若<code>spring.config.location</code>指定的是一个目录, 则应该以<code>/</code>结尾, 并且使用该目录下<code>spring.config.name</code>指定的配置文件</p><h3 id="随机变量" tabindex="-1"><a class="header-anchor" href="#随机变量"><span>随机变量</span></a></h3><p><code>RandomValuePropertySource</code>可以注入一些随机变量, 可产生<code>integer, long, string, uuid</code>等类型的随机值, 例如</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">my.secret</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.value}</span></span>
<span class="line"><span style="color:#B392F0;">my.number</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.int}</span></span>
<span class="line"><span style="color:#B392F0;">my.bignumber</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.long}</span></span>
<span class="line"><span style="color:#B392F0;">my.uuid</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.uuid}</span></span>
<span class="line"><span style="color:#B392F0;">my.number.less.than.ten</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.int(10)}</span></span>
<span class="line"><span style="color:#B392F0;">my.number.in.range</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${random.int[1024,65536]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>random.int*</code>的语法为<code>OPEN value (,max) CLOSE</code>, <code>OPEN,CLOSE</code>是字符, <code>value,max</code>是整数. 如果有<code>max</code>则最小值是<code>value</code>最大值是<code>max</code>(不包括max).</p><h3 id="变量引用" tabindex="-1"><a class="header-anchor" href="#变量引用"><span>变量引用</span></a></h3><p><code>application.properties</code>中定义的变量已经被<code>Environment</code>过滤, 所以可以引用前面定义过的变量, 比如:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">app.name</span><span style="color:#9ECBFF;">=MyApp</span></span>
<span class="line"><span style="color:#B392F0;">app.description</span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;">\${app.name} </span><span style="color:#9ECBFF;">is</span><span style="color:#9ECBFF;"> a</span><span style="color:#9ECBFF;"> Spring</span><span style="color:#9ECBFF;"> Boot</span><span style="color:#9ECBFF;"> application</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多环境配置" tabindex="-1"><a class="header-anchor" href="#多环境配置"><span>多环境配置</span></a></h2><ul><li>从配置的优先级的第12~15条可以看出, <code>application-{profile}.properties</code>的优先级要高于<code>application.properties</code>.</li><li>这个<code>profile</code>就用于区分是<code>dev</code>环境还是<code>beta</code>环境还是<code>prod</code>环境. 如果没有被指定, 默认会使用<code>application-default.properties</code>配置.</li><li>至于到底启用哪个<code>profile</code>, 可以在<code>application.properties</code>中通过属性<code>spring.profiles.active=profile</code>来指定, 在<code>profile</code>配置文件中指定该属性不起作用.</li></ul><p>举个例子, <code>application.properties</code>中有个默认属性<code>server.port=8080</code>用于指定服务的端口. 假设有下面的文件, 文件内容如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// application.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">server.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8080</span></span>
<span class="line"><span style="color:#E1E4E8;">spring.profiles.active</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">dev</span></span>
<span class="line"><span style="color:#6A737D;">// application-default.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">server.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8081</span></span>
<span class="line"><span style="color:#6A737D;">// application-dev.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">server.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8082</span></span>
<span class="line"><span style="color:#6A737D;">// application-prod.properties</span></span>
<span class="line"><span style="color:#E1E4E8;">server.port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">8083</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设<code>application.properties</code>中不指定<code>spring.profiles.active</code>属性, 则<code>application-default.properties</code>中的8081端口生效, 若指定<code>spring.profiles.active=prod</code>, 则8083端口生效. 访问8080端口都会找不到服务</p><h2 id="自定义配置" tabindex="-1"><a class="header-anchor" href="#自定义配置"><span>自定义配置</span></a></h2><p><code>Spring Boot</code>默认加载<code>application.properties</code>中的配置, 这个文件中的默认属性相当多...<br> 如果我们要加载自己的配置, 比如下面的数据库配置:</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" data-title="sh" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">db.driver</span><span style="color:#9ECBFF;">=MySQL</span></span>
<span class="line"><span style="color:#B392F0;">db.username</span><span style="color:#9ECBFF;">=username</span></span>
<span class="line"><span style="color:#B392F0;">db.password</span><span style="color:#9ECBFF;">=123456</span></span>
<span class="line"><span style="color:#B392F0;">db.tables[0]</span><span style="color:#9ECBFF;">=table1</span></span>
<span class="line"><span style="color:#B392F0;">db.tables[1]</span><span style="color:#9ECBFF;">=table2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以把这些属性直接放到<code>application.properties</code>中, 但极力不推荐这样.</p><h3 id="传统的配置加载方式" tabindex="-1"><a class="header-anchor" href="#传统的配置加载方式"><span>传统的配置加载方式</span></a></h3><p>我们一般都是定义自己的配置文件, 比如把这些属性放到<code>db.properties</code>文件. 然后通过<code>@PropertySource</code>加载配置文件, 然后通过<code>@Value(&quot;\${key:defaultVlaue}&quot;)</code>的形式进行配置, 如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">PropertySource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;db.properties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DBConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${db.driver}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String driver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${db.username}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String username;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${db.password}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String password;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${db.tables[0]}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String table1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${db.tables[1]}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String table2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注: <code>properties</code>文件默认是按照unicode加载, 若有中文, 一定要指定编码<code>@PropertySource(value = &quot;db.properties&quot;, encoding = &quot;UTF-8&quot;)</code></p><h3 id="类型安全的配置加载方式" tabindex="-1"><a class="header-anchor" href="#类型安全的配置加载方式"><span>类型安全的配置加载方式</span></a></h3><p>上面这种方式在<code>Spring Framework</code>普遍使用, 但是 <code>Spring Boot</code>提供了更高级的使用配置的方式,类似于<code>Spring</code>中的<code>DataBinder</code>工具. 还是<code>db.properties</code>文件, 我们可以这样进行数据绑定:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Data</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">locations</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;classpath:db.properties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DBConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String driver;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String password;</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; tables;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最上面的<code>@Data</code>是<code>Lombok</code>包中用于生成<code>getter, setter</code>等的注解, pom依赖为:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.projectlombok&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;lombok&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.16.10&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不用这个包也可以, 那就需要自己写 <code>getter</code>和<code>setter</code>方法了</p><p>另外注意此时该类上是加了<code>@Component</code>注解的, 这样才会被当作Spring的Bean.</p><p>其实不在<code>DBConfig</code>上加<code>@Component</code>注解也有办法, 通常<code>@ConfigurationProperties</code>是和<code>@EnableConfigurationProperties</code>一起使用的, <code>@EnableConfigurationProperties</code>注解需要加到配置类上. 像下面这样使用:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableConfigurationProperties</span><span style="color:#E1E4E8;">({DBConfig.class})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Application</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 加载属性的类(主意这个类没有加 @Component 注解)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ConfigurationProperties</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">prefix</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;db&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">locations</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;classpath:db.properties&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> DBConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种形式, <code>@ConfigurationProperties</code>bean将会以名字<code>&lt;prefix&gt;-&lt;fqn&gt;</code>注册, <code>&lt;prefix&gt;</code>就是注解中指定的前缀, <code>&lt;fqn&gt;</code>是该类的全类名. 上面的<code>DBConfig</code>将会被注册成名字为<code>db-com.example.myproject.config.DBConfig</code>的bean</p><h3 id="configurationproperties的优缺点" tabindex="-1"><a class="header-anchor" href="#configurationproperties的优缺点"><span><code>@ConfigurationProperties</code>的优缺点</span></a></h3><p>优点:</p><ul><li>结构化, 对于结构化的配置, 优势明显</li><li>松散绑定, <code>Environment</code>属性名和<code>@ConfigurationProperties Beans</code>属性名不需要精确匹配, 比如驼峰<code>person.firstName</code>, 虚线<code>pserson.first-name</code>, 下划线<code>person.first_name</code>, 大写<code>PERSON_FIRST_NAME</code>都能正确区分绑定</li><li>可校验, 可以在属性上添加<code>@NotNull</code>, <code>@NotEmpty</code>等(JSR-303)注解进行校验</li><li>可生成<code>meta-data</code>文件(可被IDE使用)</li></ul><p>缺点:</p><ul><li>不支持<code>SpEL</code>表达式</li></ul><h2 id="使用yaml配置" tabindex="-1"><a class="header-anchor" href="#使用yaml配置"><span>使用YAML配置</span></a></h2><p><code>YAML</code>是<code>JSON</code>的超集, 有一定的结构, <code>SpringApplication</code>提供了对<code>YAML</code>的支持. 使用<code>YAML</code>配置文件需要确保在classpath中引入了<code>SnakeYAML</code>包, <code>spring-boot-starter</code>中已经包含了<code>SnakeYAML</code>包, 也可以主动显式地添加pom依赖:</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.yaml&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;snakeyaml&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.17&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载application-yml" tabindex="-1"><a class="header-anchor" href="#加载application-yml"><span>加载<code>application.yml</code></span></a></h3><p><code>Spring Boot</code>会自动加载这个配置, 因此效果跟<code>application.properties</code>一样。<br> Spring 提供了两个方便的类加载<code>YAML</code>, <code>YamlPropertiesFactoryBean</code>把<code>YAML</code>作为<code>Properties</code>加载, <code>YamlMapFactoryBean</code>把<code>YAML</code>作为<code>Map</code>加载;<br><code>YamlPropertySourceLoader</code>可以把<code>YAML</code>作为<code>PropertySource</code>加到Spring <code>Environment</code>中, 这样就可以用<code>@Value</code>的方式进行注入了.</p><p>比如下面的写法是一样的</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#9ECBFF;">// yml文件</span></span>
<span class="line"><span style="color:#85E89D;">environments</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    dev</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">        url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">http://dev.bar.com</span></span>
<span class="line"><span style="color:#85E89D;">        name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Developer Setup</span></span>
<span class="line"><span style="color:#85E89D;">    prod</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">        url</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">http://foo.bar.com</span></span>
<span class="line"><span style="color:#85E89D;">        name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">My Cool App</span></span>
<span class="line"><span style="color:#85E89D;">my</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#85E89D;">    servers</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">dev.bar.com</span></span>
<span class="line"><span style="color:#E1E4E8;">        - </span><span style="color:#9ECBFF;">foo.bar.com</span></span>
<span class="line"><span style="color:#9ECBFF;">// properties文件</span></span>
<span class="line"><span style="color:#9ECBFF;">environments.dev.url=http://dev.bar.com</span></span>
<span class="line"><span style="color:#9ECBFF;">environments.dev.name=Developer Setup</span></span>
<span class="line"><span style="color:#9ECBFF;">environments.prod.url=http://foo.bar.com</span></span>
<span class="line"><span style="color:#9ECBFF;">environments.prod.name=My Cool App</span></span>
<span class="line"><span style="color:#9ECBFF;">my.servers[0]=dev.bar.com</span></span>
<span class="line"><span style="color:#9ECBFF;">my.servers[1]=foo.bar.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="加载自定义yaml配置" tabindex="-1"><a class="header-anchor" href="#加载自定义yaml配置"><span>加载自定义<code>YAML</code>配置</span></a></h3><p>遗憾的是, <code>YAML</code>不能像<code>properties</code>文件一样使用<code>@PropertySource</code>注解的方式加载.<br> 加载自定义的<code>YAML</code>文件可以通过<code>@ConfigurationProperties</code>注解来加载, 如:<code>@ConfigurationProperties(prefix=&quot;db&quot;, locations = &quot;classpath:db.yml&quot;)</code></p>`,67),p=[l];function i(c,r){return n(),s("div",null,p)}const E=e(o,[["render",i],["__file","2016-11-02-SpringBoot中的配置.html.vue"]]),u=JSON.parse('{"path":"/program/backend/2016-11-02-SpringBoot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html","title":"SpringBoot中的配置","lang":"zh-CN","frontmatter":{"title":"SpringBoot中的配置","date":"2016-11-02T00:00:00.000Z","category":"Spring","tag":["SpringBoot"],"order":-20161102,"description":"这里所说的配置是指properties文件这样的配置 配置的方式及优先级 Spring Boot允许通过properties文件, YAML文件, Environment变量, 命令行参数等进行配置. 属性值可以通过@Value注入到bean中并通过Spring的Environment访问, 或通过@ConfigurationProperties直接绑...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-11-02-SpringBoot%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot中的配置"}],["meta",{"property":"og:description","content":"这里所说的配置是指properties文件这样的配置 配置的方式及优先级 Spring Boot允许通过properties文件, YAML文件, Environment变量, 命令行参数等进行配置. 属性值可以通过@Value注入到bean中并通过Spring的Environment访问, 或通过@ConfigurationProperties直接绑..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:05:57.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2016-11-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:05:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot中的配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:05:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"配置的方式及优先级","slug":"配置的方式及优先级","link":"#配置的方式及优先级","children":[{"level":3,"title":"优先级举例","slug":"优先级举例","link":"#优先级举例","children":[]},{"level":3,"title":"命令行参数","slug":"命令行参数","link":"#命令行参数","children":[]},{"level":3,"title":"SPRING_APPLICATION_JSON","slug":"spring-application-json","link":"#spring-application-json","children":[]}]},{"level":2,"title":"配置文件:application.properties","slug":"配置文件-application-properties","link":"#配置文件-application-properties","children":[{"level":3,"title":"随机变量","slug":"随机变量","link":"#随机变量","children":[]},{"level":3,"title":"变量引用","slug":"变量引用","link":"#变量引用","children":[]}]},{"level":2,"title":"多环境配置","slug":"多环境配置","link":"#多环境配置","children":[]},{"level":2,"title":"自定义配置","slug":"自定义配置","link":"#自定义配置","children":[{"level":3,"title":"传统的配置加载方式","slug":"传统的配置加载方式","link":"#传统的配置加载方式","children":[]},{"level":3,"title":"类型安全的配置加载方式","slug":"类型安全的配置加载方式","link":"#类型安全的配置加载方式","children":[]},{"level":3,"title":"@ConfigurationProperties的优缺点","slug":"configurationproperties的优缺点","link":"#configurationproperties的优缺点","children":[]}]},{"level":2,"title":"使用YAML配置","slug":"使用yaml配置","link":"#使用yaml配置","children":[{"level":3,"title":"加载application.yml","slug":"加载application-yml","link":"#加载application-yml","children":[]},{"level":3,"title":"加载自定义YAML配置","slug":"加载自定义yaml配置","link":"#加载自定义yaml配置","children":[]}]}],"git":{"createdTime":1719158757000,"updatedTime":1719158757000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-11-02-SpringBoot中的配置.md","localizedDate":"2016年11月2日","excerpt":"","autoDesc":true}');export{E as comp,u as data};
