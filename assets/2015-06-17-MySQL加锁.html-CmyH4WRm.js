import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,d as n}from"./app-Biz7QJq3.js";const l={},o=n(`<p>最近碰到了MySQL中的<code>for update</code>语法，这是用来加锁的，将学习的过程记录下来</p><h2 id="悲观锁" tabindex="-1"><a class="header-anchor" href="#悲观锁"><span>悲观锁</span></a></h2><p>悲观锁(Pessimistic Lock)认为每次读取数据都是不安全的，所以每次读取数据的时候都会加锁。<br> 比如mysql里的<code>for update</code>就属于这类，可以锁一行，也可锁住整个表，加锁之后别人就无法同时进行操作了。<br> 悲观锁一般用于写操作比较多的地方。</p><h2 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁</span></a></h2><p>乐观锁(Optimistic Lock)认为每次读取数据的时候是安全的，只有在更新操作的时候才会判断是否有别人修改过数据。<br> 这种锁一般通过其它方式来控制，比如通过版本号机制等。<br> 乐观锁一般用于读操作比较多的地方，这样可以提高吞吐量。</p><h2 id="for-update用法" tabindex="-1"><a class="header-anchor" href="#for-update用法"><span>for update用法</span></a></h2><p>先来一个测试用的表:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">CREATE</span><span style="color:#F97583;"> TABLE</span><span style="color:#E1E4E8;"> \`</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">\` (</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`id\`</span><span style="color:#F97583;"> bigint</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> AUTO_INCREMENT COMMENT </span><span style="color:#9ECBFF;">&#39;自增主键&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`user_name\`</span><span style="color:#F97583;"> varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> COMMENT </span><span style="color:#9ECBFF;">&#39;用户名&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#9ECBFF;">  \`remark\`</span><span style="color:#F97583;"> varchar</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">NOT NULL</span><span style="color:#E1E4E8;"> COMMENT </span><span style="color:#9ECBFF;">&#39;备注&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">  PRIMARY KEY</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">\`id\`</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#F97583;">  UNIQUE</span><span style="color:#F97583;"> KEY</span><span style="color:#9ECBFF;"> \`uniq_user_name\`</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">\`user_name\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">) ENGINE</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">InnoDB AUTO_INCREMENT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;"> DEFAULT</span><span style="color:#E1E4E8;"> CHARSET</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">utf8 COMMENT</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;用户表&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表中数据:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">+</span><span style="color:#6A737D;">----+-----------+---------+</span></span>
<span class="line"><span style="color:#E1E4E8;">| id | user_name | remark  |</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#6A737D;">----+-----------+---------+</span></span>
<span class="line"><span style="color:#E1E4E8;">|  </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> | user1     | remark1 |</span></span>
<span class="line"><span style="color:#E1E4E8;">|  </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> | user2     | remark2 |</span></span>
<span class="line"><span style="color:#E1E4E8;">|  </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> | user3     | remark3 |</span></span>
<span class="line"><span style="color:#F97583;">+</span><span style="color:#6A737D;">----+-----------+---------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样来使用for update</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">BEGIN</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">SELECT</span><span style="color:#F97583;"> *</span><span style="color:#E1E4E8;"> FORM user </span><span style="color:#F97583;">WHERE</span><span style="color:#E1E4E8;"> id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">COMMIT</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:</p><ol><li><code>for update</code>必须在<code>BEGIN/COMMIT</code>块中才会起作用</li><li>明确使用索引的，会使用行锁(Row Lock)，不使用索引或索引不明确(如id&gt;2)，会使用表锁(Table Lock)</li></ol><p>我们通过两个终端分别进行操作来测试一下。<br> 在第一个终端中开启事务使用行锁，但未<code>commit</code>，第二个终端中再查询该行则会被阻塞，处于等待状态。 直到第一个终端<code>commit</code>之后，第二个终端才会读取到被锁住的那一行的数据。 若等待时间过长(终端1迟迟未commit)，则终端2会产生超时错误。</p><h2 id="测试记录" tabindex="-1"><a class="header-anchor" href="#测试记录"><span>测试记录</span></a></h2><p>主要是测试下，什么情况下是 Row Lock，什么情况下是 Table Lock。</p><p>以下情况是 Row Lock</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">-- 使用了主键索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">-- 使用了其它索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;user1&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">-- 使用 like 但是可以唯一确定一行</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name </span><span style="color:#F97583;">like</span><span style="color:#9ECBFF;"> &#39;user1%&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下情况是 Table Lock</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">-- 主键不明确</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">-- 没有用上任何索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> remark</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;remark1&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name </span><span style="color:#F97583;">like</span><span style="color:#9ECBFF;"> &#39;%user1&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">-- 虽然能确定一行，但是没用上索引</span></span>
<span class="line"><span style="color:#6A737D;">-- 使用了 like 不能唯一确定一行</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name </span><span style="color:#F97583;">like</span><span style="color:#9ECBFF;"> &#39;user%&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;   </span><span style="color:#6A737D;">-- 这条用上了索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name </span><span style="color:#F97583;">like</span><span style="color:#9ECBFF;"> &#39;%user%&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">-- 这条没有用上索引</span></span>
<span class="line"><span style="color:#6A737D;">-- 未查到数据，但是未使用任何索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> remark</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下情况 无 Lock</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">-- 未查到数据，但是使用了索引</span></span>
<span class="line"><span style="color:#F97583;">select</span><span style="color:#F97583;"> *</span><span style="color:#F97583;"> from</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user_name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;user9&#39;</span><span style="color:#F97583;"> for</span><span style="color:#F97583;"> update</span><span style="color:#E1E4E8;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,23),p=[o];function r(t,c){return a(),e("div",null,p)}const y=s(l,[["render",r],["__file","2015-06-17-MySQL加锁.html.vue"]]),E=JSON.parse('{"path":"/program/ops/db/2015-06-17-MySQL%E5%8A%A0%E9%94%81.html","title":"MySQL加锁","lang":"zh-CN","frontmatter":{"title":"MySQL加锁","date":"2015-06-17T00:00:00.000Z","category":"MySQL","tag":["MySQL"],"order":-20150617,"description":"最近碰到了MySQL中的for update语法，这是用来加锁的，将学习的过程记录下来 悲观锁 悲观锁(Pessimistic Lock)认为每次读取数据都是不安全的，所以每次读取数据的时候都会加锁。 比如mysql里的for update就属于这类，可以锁一行，也可锁住整个表，加锁之后别人就无法同时进行操作了。 悲观锁一般用于写操作比较多的地方。 乐...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/ops/db/2015-06-17-MySQL%E5%8A%A0%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"MySQL加锁"}],["meta",{"property":"og:description","content":"最近碰到了MySQL中的for update语法，这是用来加锁的，将学习的过程记录下来 悲观锁 悲观锁(Pessimistic Lock)认为每次读取数据都是不安全的，所以每次读取数据的时候都会加锁。 比如mysql里的for update就属于这类，可以锁一行，也可锁住整个表，加锁之后别人就无法同时进行操作了。 悲观锁一般用于写操作比较多的地方。 乐..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T00:43:34.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2015-06-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T00:43:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL加锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-06-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T00:43:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[]},{"level":2,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[]},{"level":2,"title":"for update用法","slug":"for-update用法","link":"#for-update用法","children":[]},{"level":2,"title":"测试记录","slug":"测试记录","link":"#测试记录","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719189814000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/ops/db/2015-06-17-MySQL加锁.md","localizedDate":"2015年6月17日","excerpt":"","autoDesc":true}');export{y as comp,E as data};
