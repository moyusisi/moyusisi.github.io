import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as n,d as l}from"./app-C4fqlW-q.js";const a={},o=l(`<h2 id="servlet组件注册" tabindex="-1"><a class="header-anchor" href="#servlet组件注册"><span>Servlet组件注册</span></a></h2><p><code>Servlet</code>的组件包括<code>Filter</code>, <code>Listener</code>, <code>Servlet</code>, 具体详情可参考<a href="http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-11-16-Servlet%E8%AF%A6%E8%A7%A3.html" target="_blank" rel="noopener noreferrer">Servlet详解</a>.<br> 普通的web项目都是从<code>web.xml</code>中配置, <code>Spring boot</code>中为我们提供了很多注册的方式. 我们先以<code>Filter</code>举例, 然后再介绍<code>Listener</code>和<code>Servlet</code>的注册, 他们的注册方式基本一致.</p><h2 id="注册filter" tabindex="-1"><a class="header-anchor" href="#注册filter"><span>注册Filter</span></a></h2><h3 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一"><span>方式一</span></a></h3><p>直接作为一个<code>Bean</code>注册.<br> 自定义<code>Filter</code>通常可以实现<code>Filter</code>接口, 或者可以继承<code>Spring</code>提供的<code>GenericFilterBean</code>.<br> 当<code>SpringBoot</code>监测到有<code>javax.servlet.Filter</code>的<code>bean</code>时就会自动加入过滤器调用链.</p><ul><li>优点: 简单</li><li>缺点: 不可控(比如无法配置要过滤的URL等), 所以这种方式基本不用</li></ul><p>代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyFilter</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> GenericFilterBean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> doFilter</span><span style="color:#E1E4E8;">(ServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, ServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, FilterChain </span><span style="color:#FFAB70;">chain</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#6A737D;">        //  some code</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二"><span>方式二</span></a></h3><p>通过<code>FilterRegistrationBean</code>注册, 这个类实现了<code>ServletContextInitializer</code>接口</p><ul><li>优点: 简单, 可控</li></ul><p>比如还是注册上面写的那个<code>MyFilter</code>, 注册及配置的代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> WebMvcConfig</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> WebMvcConfigurerAdapter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> FilterRegistrationBean </span><span style="color:#B392F0;">registMyFilter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        FilterRegistrationBean registrationBean </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> FilterRegistrationBean</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrationBean.</span><span style="color:#B392F0;">setFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> MyFilter</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrationBean.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;myFilter&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrationBean.</span><span style="color:#B392F0;">setUrlPatterns</span><span style="color:#E1E4E8;">(Sets.</span><span style="color:#B392F0;">newHashSet</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/*&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        registrationBean.</span><span style="color:#B392F0;">setOrder</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> registrationBean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方式三" tabindex="-1"><a class="header-anchor" href="#方式三"><span>方式三</span></a></h3><p>使用<code>@ServletComponentScan</code>扫描<code>@WebFilter</code>注解自动注册</p><p>这种方式需要在 <strong>主配置类</strong> 上加<code>@ServletComponentScan</code>注解, 在我们的<code>MyFilter</code>类上加<code>@WebFilter</code>注解. 代码如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 主配置类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ServletComponentScan</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Application</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 自定义的过滤器类</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">WebFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">filterName</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;myFilter&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">urlPatterns</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;/*&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyFilter</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> GenericFilterBean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> doFilter</span><span style="color:#E1E4E8;">(ServletRequest </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, ServletResponse </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, FilterChain </span><span style="color:#FFAB70;">chain</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> IOException, ServletException {</span></span>
<span class="line"><span style="color:#6A737D;">        //  some code</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注册listener" tabindex="-1"><a class="header-anchor" href="#注册listener"><span>注册Listener</span></a></h2><p><code>Listener</code>的注册方式跟<code>Filter</code>一样, 只是继承或实现的接口, 添加的注解不一样.</p><ul><li>比如实现<code>ServletContextListener</code>接口</li><li>通过<code>ServletListenerRegistrationBean</code>注册</li><li>通过<code>@WebServlet</code>注解注册.</li></ul><h2 id="注册servlet" tabindex="-1"><a class="header-anchor" href="#注册servlet"><span>注册Servlet</span></a></h2><p>在<code>Spring</code>项目中, 都是通过<code>DispatcherServlet</code>分发, 基本不需要自定义<code>Servlet</code>. 下面仅介绍使用方式</p><ul><li>注意不要使用方式一, 一定要指定相应的URL</li><li>通过<code>ServletRegistrationBean</code>注册</li><li>通过<code>@WebServlet(name = &quot;myServlet&quot;, urlPatterns = &quot;/abc/*&quot;)</code>注解注册.</li></ul>`,23),t=[o];function r(p,i){return n(),s("div",null,t)}const E=e(a,[["render",r],["__file","2016-11-19-SpringBoot与Servlet组件.html.vue"]]),v=JSON.parse('{"path":"/program/backend/2016-11-19-SpringBoot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html","title":"SpringBoot与Servlet组件","lang":"zh-CN","frontmatter":{"title":"SpringBoot与Servlet组件","date":"2016-11-19T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20161119,"description":"Servlet组件注册 Servlet的组件包括Filter, Listener, Servlet, 具体详情可参考Servlet详解. 普通的web项目都是从web.xml中配置, Spring boot中为我们提供了很多注册的方式. 我们先以Filter举例, 然后再介绍Listener和Servlet的注册, 他们的注册方式基本一致. 注册Fil...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2016-11-19-SpringBoot%E4%B8%8EServlet%E7%BB%84%E4%BB%B6.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"SpringBoot与Servlet组件"}],["meta",{"property":"og:description","content":"Servlet组件注册 Servlet的组件包括Filter, Listener, Servlet, 具体详情可参考Servlet详解. 普通的web项目都是从web.xml中配置, Spring boot中为我们提供了很多注册的方式. 我们先以Filter举例, 然后再介绍Listener和Servlet的注册, 他们的注册方式基本一致. 注册Fil..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2016-11-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot与Servlet组件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2016-11-19T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Servlet组件注册","slug":"servlet组件注册","link":"#servlet组件注册","children":[]},{"level":2,"title":"注册Filter","slug":"注册filter","link":"#注册filter","children":[{"level":3,"title":"方式一","slug":"方式一","link":"#方式一","children":[]},{"level":3,"title":"方式二","slug":"方式二","link":"#方式二","children":[]},{"level":3,"title":"方式三","slug":"方式三","link":"#方式三","children":[]}]},{"level":2,"title":"注册Listener","slug":"注册listener","link":"#注册listener","children":[]},{"level":2,"title":"注册Servlet","slug":"注册servlet","link":"#注册servlet","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2016-11-19-SpringBoot与Servlet组件.md","localizedDate":"2016年11月19日","excerpt":"","autoDesc":true}');export{E as comp,v as data};
