import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,d as l}from"./app-4MUv-ZKY.js";const e="/assets/java_exception-CDBm_O3w.jpg",p={},o=l('<p>Java中的异常类都继承自<code>Throwable</code>类，<code>Throwable</code>有两个子类：<code>Exception(异常)</code>和<code>Error(错误)</code>， 二者都各自包含大量子类。</p><h2 id="异常的结构关系图" tabindex="-1"><a class="header-anchor" href="#异常的结构关系图"><span>异常的结构关系图</span></a></h2><figure><img src="'+e+`" alt="异常的继承结构关系图" tabindex="0" loading="lazy"><figcaption>异常的继承结构关系图</figcaption></figure><h2 id="异常的分类" tabindex="-1"><a class="header-anchor" href="#异常的分类"><span>异常的分类</span></a></h2><p>Java的异常可分为：错误、不受检查异常、受检查异常。</p><ul><li><code>Error(错误)</code>: 是程序无法处理的错误，一旦出现会导致严重后果，一般会停止运行。</li><li><code>Exception(异常)</code>: 是程序本身可以处理的异常，又分为不受检查异常和受检查异常。 <ul><li>不受检查异常: <code>RuntimeException</code>及其子类都是不检查异常，该类异常可以捕捉处理，也可以不捕捉处理。</li><li>受检查异常: 除了<code>Error</code>和<code>RuntimeException</code>之外的所有异常都是受检查的，要么使用<code>try...catch</code>捕捉，要么在方法上声明<code>throws</code>。</li></ul></li></ul><h2 id="finally中的return" tabindex="-1"><a class="header-anchor" href="#finally中的return"><span>finally中的return</span></a></h2><p>一般情况下<code>finally</code>总会被执行，即使前面执行到了<code>return</code>语句，在执行完之前也会执行<code>finally</code>，在<code>finally</code>中使用<code>return</code>语句是非常不好的习惯。</p><ul><li><code>finally</code>的<code>return</code>会覆盖其他<code>return</code>的值，如下标记B就吞掉了标记A的返回值；</li><li><code>finally</code>的<code>return</code>会吞掉<code>catch</code>块中抛出的异常，如下标记D就吞掉了标记C抛出的异常。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestException</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    boolean</span><span style="color:#B392F0;"> testEx</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        boolean</span><span style="color:#E1E4E8;"> ret </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">            testEx1</span><span style="color:#E1E4E8;">();          </span><span style="color:#6A737D;">/* 将不会抛出异常，因为testEx1中catch块抛出的异常被finally里的return吞掉了；</span></span>
<span class="line"><span style="color:#6A737D;">                                   若testEx1中的finally里无return，则会抛出异常</span></span>
<span class="line"><span style="color:#6A737D;">                                */</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> ret;        </span><span style="color:#6A737D;">/* 该语句正常执行，该语句标记为A */</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">/* 捕获不到异常 */</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;testEx, catch exception&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//不打印</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;testEx, finally&quot;</span><span style="color:#E1E4E8;">);         </span><span style="color:#6A737D;">//打印</span></span>
<span class="line"><span style="color:#E1E4E8;">            ret </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> ret;       </span><span style="color:#6A737D;">/* 该语句会吞掉之前标记A的return值，该语句标记为B */</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    boolean</span><span style="color:#B392F0;"> testEx1</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 9</span><span style="color:#F97583;"> /</span><span style="color:#79B8FF;"> 0</span><span style="color:#E1E4E8;">;       </span><span style="color:#6A737D;">/* 将抛出 ArithmeticException */</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#79B8FF;"> true</span><span style="color:#E1E4E8;">;         </span><span style="color:#6A737D;">/* 执行不到 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {  </span><span style="color:#6A737D;">/* 捕获异常 */</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;testEx1, catch exception&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 打印</span></span>
<span class="line"><span style="color:#F97583;">            throw</span><span style="color:#E1E4E8;"> e;             </span><span style="color:#6A737D;">/* 抛出异常 该语句标记为C */</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;testEx1, finally&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 打印</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#79B8FF;"> false</span><span style="color:#E1E4E8;">;        </span><span style="color:#6A737D;">/* 返回，并且catch中跑出的异常被忽略了 该语句标记为D */</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TestException testException </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TestException</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(testException.</span><span style="color:#B392F0;">testEx</span><span style="color:#E1E4E8;">());    </span><span style="color:#6A737D;">// 将输出标记B的返回值: false</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="在finally中修改返回值" tabindex="-1"><a class="header-anchor" href="#在finally中修改返回值"><span>在finally中修改返回值</span></a></h2><p>另外，由于<code>finally</code>块一定会执行，所以可以在函数返回结果之前修改返回值，但一定要小心，有些情况下能够修改返回值，有些情况下是无法修改的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// TestFinally.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestFinally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Man </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Man man1 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Man</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Man man2 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Man</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> man1;   </span><span style="color:#6A737D;">// 返回man1</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            man2.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            man1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> man2;   </span><span style="color:#6A737D;">// 修改man1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    Man </span><span style="color:#B392F0;">test2</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        Man man1 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Man</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Man man2 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Man</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">        try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">            return</span><span style="color:#E1E4E8;"> man1;   </span><span style="color:#6A737D;">// 返回man1</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            man1.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 修改man1</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        TestFinally testFinally </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TestFinally</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(testFinally.</span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">());    </span><span style="color:#6A737D;">// 输出 name:hello</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(testFinally.</span><span style="color:#B392F0;">test2</span><span style="color:#E1E4E8;">());    </span><span style="color:#6A737D;">// 输出 name:world</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// Man.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Man</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> String name </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;name:&quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>test1</code>中<code>man1 = man2;</code>确实执行了，但是在执行<code>finally</code>块之前，<code>return</code>的值就确定了，所以返回的<code>man1</code>仍是原来的;<br><code>test2</code>中<code>man1.setName(&quot;world&quot;);</code>也执行了，并且在此之前,<code>return</code>的值也确定了，但这句并未改变<code>man1</code>的值(引用地址)，而是改变了<code>name</code>属性的值。</p><hr>`,16),c=[o];function t(r,i){return a(),n("div",null,c)}const d=s(p,[["render",t],["__file","2015-02-14-Java中的异常.html.vue"]]),v=JSON.parse('{"path":"/program/backend/2015-02-14-Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8.html","title":"Java中的异常","lang":"zh-CN","frontmatter":{"title":"Java中的异常","date":"2015-02-14T00:00:00.000Z","category":"Java","tag":"Java","order":-20150214,"description":"Java中的异常类都继承自Throwable类，Throwable有两个子类：Exception(异常)和Error(错误)， 二者都各自包含大量子类。 异常的结构关系图 异常的继承结构关系图异常的继承结构关系图 异常的分类 Java的异常可分为：错误、不受检查异常、受检查异常。 Error(错误): 是程序无法处理的错误，一旦出现会导致严重后果，一般...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-02-14-Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Java中的异常"}],["meta",{"property":"og:description","content":"Java中的异常类都继承自Throwable类，Throwable有两个子类：Exception(异常)和Error(错误)， 二者都各自包含大量子类。 异常的结构关系图 异常的继承结构关系图异常的继承结构关系图 异常的分类 Java的异常可分为：错误、不受检查异常、受检查异常。 Error(错误): 是程序无法处理的错误，一旦出现会导致严重后果，一般..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2015-02-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的异常\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-02-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"异常的结构关系图","slug":"异常的结构关系图","link":"#异常的结构关系图","children":[]},{"level":2,"title":"异常的分类","slug":"异常的分类","link":"#异常的分类","children":[]},{"level":2,"title":"finally中的return","slug":"finally中的return","link":"#finally中的return","children":[]},{"level":2,"title":"在finally中修改返回值","slug":"在finally中修改返回值","link":"#在finally中修改返回值","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-02-14-Java中的异常.md","localizedDate":"2015年2月14日","excerpt":"","autoDesc":true}');export{d as comp,v as data};
