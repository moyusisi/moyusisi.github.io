import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,d as l}from"./app-CqEdGBmQ.js";const e={},o=l(`<p><code>String</code>几乎是平时最常用到的对象, 这里记录一下关于它的一些内容</p><h2 id="关于不可变" tabindex="-1"><a class="header-anchor" href="#关于不可变"><span>关于不可变</span></a></h2><ul><li><code>String</code>到底是如何不可变的?</li></ul><p>源码中<code>String</code>对象用于存储字符的属性是这样的<code>private final char value[]</code>, 它之所以不可变, 首先是因为<code>value</code>变量是<code>private</code>修饰的并且没有提供<code>get,set</code>方法, 因此外部无法修改; 其次<code>value</code>是被<code>final</code>修饰的, 表示它是一个常量, 无法修改</p><ul><li><code>String</code>真的不可变么?</li></ul><p><code>String</code>的值是存在<code>value</code>数组里的, 虽然<code>value</code>无法改变, 但是数组里的内容我们可以修改, 比如下面, 就把字符串<code>Hello World</code>变成了<code>Hello_World</code></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testString</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;Hello World&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Field field </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.class.</span><span style="color:#B392F0;">getDeclaredField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        field.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">        char</span><span style="color:#E1E4E8;">[] value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">[]) field.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">        value[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;_&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于编译优化" tabindex="-1"><a class="header-anchor" href="#关于编译优化"><span>关于编译优化</span></a></h2><ul><li>编译时能够确定的值(包括常量变量)会进行优化</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">        String a </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;a&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">        final</span><span style="color:#E1E4E8;"> String fa </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;a&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s1 </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;ab&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s2 </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;a&quot;</span><span style="color:#F97583;"> +</span><span style="color:#9ECBFF;"> &quot;b&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s3 </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ab&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;b&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        String s5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fa </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> &quot;b&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s2);  </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s3);  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> fa);   </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s4);  </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(s1 </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> s5);  </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>循环字符串拼接,要尽量在外层定义<code>StringBuilder</code></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">        // 好的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">        StringBuilder sb </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> StringBuilder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            sb.</span><span style="color:#B392F0;">append</span><span style="color:#E1E4E8;">(i);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sb.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">        // 坏的写法</span></span>
<span class="line"><span style="color:#E1E4E8;">        String str </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;a&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">        for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;"> 100</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于线程安全" tabindex="-1"><a class="header-anchor" href="#关于线程安全"><span>关于线程安全</span></a></h2><p><code>String</code>不可变, 一般不会有线程安全问题, 现实场景中经常对字符串进行一些操作, 一般是通过<code>StringBuilder</code>来进行的, 它是非线程安全的; 对应的线程安全版本为<code>StringBuffer</code>, 它相当于把<code>StringBuilder</code>的所有方法都加了锁(包括<code>toString</code>方法).</p>`,14),p=[o];function t(r,c){return n(),a("div",null,p)}const d=s(e,[["render",t],["__file","2017-04-06-String补充.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2017-04-06-String%E8%A1%A5%E5%85%85.html","title":"String补充","lang":"zh-CN","frontmatter":{"title":"String补充","date":"2017-04-06T00:00:00.000Z","category":"Java","tag":["Java"],"order":-20170406,"description":"String几乎是平时最常用到的对象, 这里记录一下关于它的一些内容 关于不可变 String到底是如何不可变的? 源码中String对象用于存储字符的属性是这样的private final char value[], 它之所以不可变, 首先是因为value变量是private修饰的并且没有提供get,set方法, 因此外部无法修改; 其次value是...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2017-04-06-String%E8%A1%A5%E5%85%85.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"String补充"}],["meta",{"property":"og:description","content":"String几乎是平时最常用到的对象, 这里记录一下关于它的一些内容 关于不可变 String到底是如何不可变的? 源码中String对象用于存储字符的属性是这样的private final char value[], 它之所以不可变, 首先是因为value变量是private修饰的并且没有提供get,set方法, 因此外部无法修改; 其次value是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2017-04-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"String补充\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-04-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"关于不可变","slug":"关于不可变","link":"#关于不可变","children":[]},{"level":2,"title":"关于编译优化","slug":"关于编译优化","link":"#关于编译优化","children":[]},{"level":2,"title":"关于线程安全","slug":"关于线程安全","link":"#关于线程安全","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2017-04-06-String补充.md","localizedDate":"2017年4月6日","excerpt":"","autoDesc":true}');export{d as comp,y as data};
