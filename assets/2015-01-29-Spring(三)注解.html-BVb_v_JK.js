import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,d as a}from"./app-DyxHq22R.js";const l={},o=a(`<h2 id="bean的注解" tabindex="-1"><a class="header-anchor" href="#bean的注解"><span>Bean的注解</span></a></h2><p>Spring提供了如下几个<code>Annotation</code>来标注<code>Spring Bean</code>:</p><ul><li><code>@Component</code>: 标注一个普通的<code>Spring Bean</code>；</li><li><code>@Controller</code>: 标注一个控制器组件类(控制层)；</li><li><code>@Service</code>: 标注一个业务逻辑组件类(业务层)；</li><li><code>@Repository</code>: 标注一个Dao组件(持久层)；</li></ul><p>然后在spring的配置文件中添加<code>&lt;context:component-scan base-package=&quot;&quot; /&gt;</code>，会自动搜索包下所有以<code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code>注释的java类，当作<code>Spring Bean</code>处理。</p><p><strong>注意</strong> 添加注解时如果不指定名字，则会默认生成一个与类同名但是第一个字母小写的名字， 如<code>HelloServiceImpl</code>会自动生成<code>helloServiceImpl</code>。<br> 当然可以自己指定名字，像下面这样：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HelloServiceImpl</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> HelloService</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Hello hello;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 如果有&lt;bean&gt;元素且使用了&lt;property&gt;子标签，setter必须有</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setHello</span><span style="color:#E1E4E8;">(Hello </span><span style="color:#FFAB70;">hello</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hello;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testHello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hello.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="scope作用域" tabindex="-1"><a class="header-anchor" href="#scope作用域"><span>Scope作用域</span></a></h2><p><code>@Scope</code>用于指定一个<code>Bean</code>产生的方式，默认为&#39;singleton&#39;，可以通过注解直接指定<code>Bean</code>的<code>scope</code>，例如:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Scope</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;prototype&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HelloServiceImpl</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> HelloService</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="resource依赖配置" tabindex="-1"><a class="header-anchor" href="#resource依赖配置"><span>Resource依赖配置</span></a></h2><p>像上面例子中的<code>private Hello hello;</code>加上了<code>@Resource</code>注解，这样就可以将相应的<code>Bean</code>注入到该属性中。<br><code>@Resource</code>有一个name属性，用于指定需要被注入的Bean的实例的标识(id)，也就是说，使用<code>@Resource</code>的<code>name属性</code>与<code>&lt;property../&gt;</code>元素的<code>ref属性</code>具有相同的效果。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">name</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Hello hello;</span></span>
<span class="line"><span style="color:#6A737D;">    //注解中的name作用与下面的ref作用相同</span></span>
<span class="line"><span style="color:#F97583;">    &lt;</span><span style="color:#E1E4E8;">property name</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;属性名&quot;</span><span style="color:#E1E4E8;"> ref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Bean的id&quot;</span><span style="color:#F97583;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>@Resource</code>可以标识属性、setter方法</p><ul><li>当使用<code>@Resource</code>修饰<code>setter</code>方法，若省略name属性，则name属性默认值是从该setter方法去掉set子串之后首字母小写的子串。</li><li>当使用<code>@Resource</code>修饰<code>Field</code>时，若省略name，则默认与Field的相同。</li></ul><hr><h2 id="autowired自动装配" tabindex="-1"><a class="header-anchor" href="#autowired自动装配"><span>Autowired自动装配</span></a></h2><p>像上面的<code>@Resource</code>是通过<code>byName</code>方式（通过id）进行注入，而<code>@Autowired</code>是通过<code>byType</code>策略进行注入，所以若有多个同类型的<code>Bean</code>就容易出问题，为了避免这种问题，一般与<code>Qualifier</code>精装配联合使用。</p><p>使用<code>@Autowired</code>可以标识属性、setter方法、普通方法、构造器（例子见@Qualifier中）</p><p><strong>注意</strong>:</p><ul><li>当<code>@Autowired</code>标注<code>Field</code>时，Spring会把容器中的与该<code>Field</code>类型匹配的<code>Bean</code>注入该属性，如果Spring容器中有多个同类型的<code>Bean</code>与<code>Field</code>类型匹配，则会出现异常。</li><li>当<code>@Autowired</code>标注数组或集合类的属性时，Spring会自动搜索Spring容器中所有与数组类型相匹配的类型的Bean，并把这些Bean当作数组的元素来创建数组。</li></ul><hr><h2 id="qualifier精装配" tabindex="-1"><a class="header-anchor" href="#qualifier精装配"><span>Qualifier精装配</span></a></h2><p>为了避免自动装配的问题，实现精确的配置，Spring提供<code>@Qualifier</code>，可以根据Bean标识(id)来指定自动装配。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">    // 标注属性</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Hello hello;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Autowired标注数组，则所有Hello类型的Bean都会放到数组里</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> Hello</span><span style="color:#E1E4E8;">[] hellos;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Autowired标注构造方法，Qualifier标注方法的形参</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Autowired</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#B392F0;"> HelloServiceImpl</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)Hello hello) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hello;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,27),p=[o];function c(i,r){return s(),n("div",null,p)}const u=e(l,[["render",c],["__file","2015-01-29-Spring(三)注解.html.vue"]]),E=JSON.parse('{"path":"/program/backend/2015-01-29-Spring(%E4%B8%89)%E6%B3%A8%E8%A7%A3.html","title":"Spring(三): 注解","lang":"zh-CN","frontmatter":{"title":"Spring(三): 注解","date":"2015-01-29T00:00:00.000Z","category":"Spring","tag":"Spring","order":-20150129,"description":"Bean的注解 Spring提供了如下几个Annotation来标注Spring Bean: @Component: 标注一个普通的Spring Bean； @Controller: 标注一个控制器组件类(控制层)； @Service: 标注一个业务逻辑组件类(业务层)； @Repository: 标注一个Dao组件(持久层)； 然后在spring的配...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-01-29-Spring(%E4%B8%89)%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring(三): 注解"}],["meta",{"property":"og:description","content":"Bean的注解 Spring提供了如下几个Annotation来标注Spring Bean: @Component: 标注一个普通的Spring Bean； @Controller: 标注一个控制器组件类(控制层)； @Service: 标注一个业务逻辑组件类(业务层)； @Repository: 标注一个Dao组件(持久层)； 然后在spring的配..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2015-01-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring(三): 注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-29T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Bean的注解","slug":"bean的注解","link":"#bean的注解","children":[]},{"level":2,"title":"Scope作用域","slug":"scope作用域","link":"#scope作用域","children":[]},{"level":2,"title":"Resource依赖配置","slug":"resource依赖配置","link":"#resource依赖配置","children":[]},{"level":2,"title":"Autowired自动装配","slug":"autowired自动装配","link":"#autowired自动装配","children":[]},{"level":2,"title":"Qualifier精装配","slug":"qualifier精装配","link":"#qualifier精装配","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-01-29-Spring(三)注解.md","localizedDate":"2015年1月29日","excerpt":"","autoDesc":true}');export{u as comp,E as data};
