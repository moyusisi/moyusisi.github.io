import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,d as e}from"./app-DQnd5bNn.js";const l={},o=e(`<h2 id="_1-帮助命令" tabindex="-1"><a class="header-anchor" href="#_1-帮助命令"><span>1. 帮助命令</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> version</span><span style="color:#6A737D;">              # 显示docker的版本信息</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> info</span><span style="color:#6A737D;">                 # 显示docker的系统信息</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> [命令] --help         </span><span style="color:#6A737D;"># 显示帮助信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-镜像命令" tabindex="-1"><a class="header-anchor" href="#_2-镜像命令"><span>2. 镜像命令</span></a></h2><h3 id="_2-1-登录镜像库" tabindex="-1"><a class="header-anchor" href="#_2-1-登录镜像库"><span>2.1 登录镜像库</span></a></h3><ul><li>命令格式：<code>docker login [选项] [镜像仓库URL]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#9ECBFF;"> docker</span><span style="color:#9ECBFF;"> login</span><span style="color:#79B8FF;"> --username=用户名</span><span style="color:#9ECBFF;"> registry.url.com/namespace/imagename</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-2-搜索镜像" tabindex="-1"><a class="header-anchor" href="#_2-2-搜索镜像"><span>2.2 搜索镜像</span></a></h3><ul><li>命令格式：<code>docker search [镜像名称] [选项]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 搜索镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> search</span><span style="color:#9ECBFF;"> mysql</span></span>
<span class="line"><span style="color:#6A737D;"># 搜索镜像，过滤收藏超过300的mysql镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> search</span><span style="color:#79B8FF;"> -f</span><span style="color:#9ECBFF;"> stars=</span><span style="color:#79B8FF;">300</span><span style="color:#9ECBFF;"> mysql</span></span>
<span class="line"><span style="color:#6A737D;"># 列出收藏不小于指定值的镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> search</span><span style="color:#9ECBFF;"> python</span><span style="color:#79B8FF;"> -s</span><span style="color:#79B8FF;"> 300</span></span>
<span class="line"><span style="color:#6A737D;"># 只列出 automated build 类型的镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> search</span><span style="color:#9ECBFF;"> python</span><span style="color:#79B8FF;"> --automated</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2-3-拉取镜像"><span>2.3 拉取镜像</span></a></h3><ul><li>命令格式：<code>docker pull [镜像仓库URL]/[命名空间]/[镜像仓库名称]:[镜像版本]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 默认拉取最新的镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> pull</span><span style="color:#9ECBFF;"> mysql</span></span>
<span class="line"><span style="color:#6A737D;"># 指定镜像版本</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> pull</span><span style="color:#9ECBFF;"> mysql:5.7</span></span>
<span class="line"><span style="color:#6A737D;"># 指定空间和镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> pull</span><span style="color:#9ECBFF;"> docker.io/library/busybox:latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-查看镜像" tabindex="-1"><a class="header-anchor" href="#_2-4-查看镜像"><span>2.4 查看镜像</span></a></h3><h4 id="查看基本信息" tabindex="-1"><a class="header-anchor" href="#查看基本信息"><span>查看基本信息</span></a></h4><ul><li>命令格式：<code>docker images [选项]</code> 或 <code>docker images ls [选项]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 查看镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> images</span></span>
<span class="line"><span style="color:#6A737D;"># 查看所有镜像信息</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> images</span><span style="color:#79B8FF;"> -a</span></span>
<span class="line"><span style="color:#6A737D;"># 查看所有的镜像id</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> images</span><span style="color:#79B8FF;"> -aq</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查看详细信息" tabindex="-1"><a class="header-anchor" href="#查看详细信息"><span>查看详细信息</span></a></h4><ul><li>命令格式：<code>docker inspect [镜像名称:版本号] / [镜像ID]</code></li></ul><h3 id="_2-5-镜像tag" tabindex="-1"><a class="header-anchor" href="#_2-5-镜像tag"><span>2.5 镜像TAG</span></a></h3><p>为镜像添加标签、修改镜像名称和版本号</p><ul><li>命令格式：<code>docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> tag</span><span style="color:#9ECBFF;"> nginx:latest</span><span style="color:#9ECBFF;"> registry.url.com/xxng/nginx:v1</span></span>
<span class="line"><span style="color:#6A737D;"># 修改镜像名与TAG</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> tag</span><span style="color:#9ECBFF;"> nginx:latest</span><span style="color:#9ECBFF;"> nginx_1:v1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改tag后，源镜像还会存在，ID则为同一个，<strong>在删除镜像时若指定的是ID则会删除所有匹配到ID的镜像</strong>，若指定的是<code>镜像名称：版本</code>则仅删除指定名称的单个镜像。</p><h3 id="_2-6-删除镜像" tabindex="-1"><a class="header-anchor" href="#_2-6-删除镜像"><span>2.6 删除镜像</span></a></h3><p>使用<code>docker rmi</code>命令，相当于<code>docker image rm</code>命令。</p><ul><li>命令格式：<code>docker rmi [镜像名称:版本号] / [镜像ID]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rmi</span><span style="color:#9ECBFF;"> nginx:v1</span></span>
<span class="line"><span style="color:#6A737D;"># -f : 强制删除。镜像已经运行为容器则无法删除，可以使用-f强制删除。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rmi</span><span style="color:#79B8FF;"> -f</span><span style="color:#9ECBFF;"> nginx:latest</span></span>
<span class="line"><span style="color:#6A737D;"># 删除多个</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rmi</span><span style="color:#79B8FF;"> -f</span><span style="color:#E1E4E8;"> [镜像名1:TAG] [镜像名2:TAG]...</span></span>
<span class="line"><span style="color:#6A737D;"># 删除全部</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rmi</span><span style="color:#79B8FF;"> -f</span><span style="color:#E1E4E8;"> $(</span><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> images</span><span style="color:#79B8FF;"> -qa</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-推送镜像" tabindex="-1"><a class="header-anchor" href="#_2-7-推送镜像"><span>2.7 推送镜像</span></a></h3><p>push将本地镜像推送到网上的个人的私有仓库中。</p><ul><li>命令格式：<code>docker push [镜像仓库URL]/[命名空间]/[镜像名称]:[版本号]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 先登录私有仓库</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> login</span><span style="color:#79B8FF;"> --username=“xxx”</span><span style="color:#9ECBFF;"> 仓库URL</span></span>
<span class="line"><span style="color:#6A737D;"># 推送镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> push</span><span style="color:#9ECBFF;"> registry.rul.com/xxng/mysql:v1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-构建镜像" tabindex="-1"><a class="header-anchor" href="#_2-8-构建镜像"><span>2.8 构建镜像</span></a></h3><p>构建镜像一般有三种情况，基于容器、基于本地镜像文件、基于<code>Dockerfile</code>创建，本节主讲基于容器提交镜像和本地镜像文件导入。<br> 基于Dockerfile构建镜像可参考<a href="./2024-07-07-Dockerfile%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F">《Dockerfile构建镜像》</a></p><h4 id="_2-8-1-容器提交为镜像" tabindex="-1"><a class="header-anchor" href="#_2-8-1-容器提交为镜像"><span>2.8.1 容器提交为镜像</span></a></h4><ul><li>格式: <code>docker commit [选项] [容器名称:版本号]/[容器ID]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># -a: 指定作者。 -m: 简介。 -p: 保存镜像时容器暂停运行。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> commit</span><span style="color:#79B8FF;"> -a</span><span style="color:#9ECBFF;"> &#39;moyusisi&#39;</span><span style="color:#79B8FF;"> -m</span><span style="color:#9ECBFF;"> &#39;nginx_demo&#39;</span><span style="color:#79B8FF;"> -p</span><span style="color:#9ECBFF;"> 50cf6c577510</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-8-2-容器的导出与导入" tabindex="-1"><a class="header-anchor" href="#_2-8-2-容器的导出与导入"><span>2.8.2 容器的导出与导入</span></a></h4><p>有时候需要将容器或镜像保存成文件，从一个系统迁移到另外一个系统，此时可以使用 Docker 的导入和导出功能，导出的文件是一个tar包，可以通过压缩命令进行压缩，然后进行传输。</p><p><strong>导出:export</strong></p><p>export将容器导出到标准输出，可以使用<code>输出重定向</code>或<code>-o选项</code>至tar文件中。</p><ul><li>格式: <code>docker export [容器名或ID] &gt; [文件名称]</code></li></ul><p><strong>导入:import</strong></p><p>import是将export导出的文件导入为<strong>镜像</strong>，可以自定义导入的镜像名称和版本号。</p><ul><li>格式: <code>docker import [文件名称] [自定义镜像名称]:[版本号]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 导出到文件</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> export</span><span style="color:#9ECBFF;"> nginx</span><span style="color:#F97583;"> &gt;</span><span style="color:#9ECBFF;"> export_nginx.tar</span></span>
<span class="line"><span style="color:#6A737D;"># 导入为镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> import</span><span style="color:#9ECBFF;"> export_nginx.tar</span><span style="color:#9ECBFF;"> import_nginx:v1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>export导出的是容器，并没有源镜像的全部内容，比如会丢失构建历史和元数据信息等文件，相当于仅保存容器当时的快照状态，这会导致export导出的文件无法直接通过run命令运行，解决方法：运行时通过-it选项，给容器分配一个伪终端。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -dit</span><span style="color:#9ECBFF;"> import_nginx:v1</span><span style="color:#9ECBFF;"> sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>推荐使用commit来提交容器，然后再使用save保存镜像，能避免上述问题。</p><h4 id="_2-8-3-镜像的保存和载入" tabindex="-1"><a class="header-anchor" href="#_2-8-3-镜像的保存和载入"><span>2.8.3 镜像的保存和载入</span></a></h4><p><strong>保存:save</strong></p><p>save能将镜像完整的保存下来，包括镜像ID和构建历史。可用<code>输出重定向</code>或<code>-o选项</code>保存至tar包中，并且save支持将多个镜像保存至一个tar包中。</p><ul><li>格式：<code>docker save -o [压缩包名称] [镜像名称或ID ...]</code></li></ul><p><strong>载入:load</strong></p><p>load是将save保存的镜像文件载入为镜像。save保存时若使用镜像ID保存镜像，导入时则没有镜像名称，load在导入时也不能自定义镜像名称，可以在导入后使用docker tag命令修改。</p><ul><li>格式：<code>docker load &lt; [压缩包名称]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 保存镜像到文件</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> save</span><span style="color:#9ECBFF;"> dc3bacd8b5ea</span><span style="color:#F97583;"> &gt;</span><span style="color:#9ECBFF;"> box_nginx.tar</span></span>
<span class="line"><span style="color:#6A737D;"># 将原镜像删除</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rmi</span><span style="color:#9ECBFF;"> dc3bacd8b5ea</span></span>
<span class="line"><span style="color:#6A737D;"># 载入镜像（导入后ID还是原来的，但tag信息都为none）</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> load</span><span style="color:#F97583;"> &lt;</span><span style="color:#9ECBFF;"> box_nginx.tar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-容器命令" tabindex="-1"><a class="header-anchor" href="#_3-容器命令"><span>3. 容器命令</span></a></h2><h3 id="_3-1-查看容器" tabindex="-1"><a class="header-anchor" href="#_3-1-查看容器"><span>3.1 查看容器</span></a></h3><p><code>docker ps</code>命令查看当前正在运行的容器</p><ul><li>命令格式：<code>docker ps [选项]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 查看正在运行中的容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span></span>
<span class="line"><span style="color:#6A737D;"># 查看所有容器(包括运行和停止)</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -a</span></span>
<span class="line"><span style="color:#6A737D;"># 查看停止的容器(-f过滤)</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -f</span><span style="color:#9ECBFF;"> status=exited</span></span>
<span class="line"><span style="color:#6A737D;"># -q: 静默模式，仅显示ID信息</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -aq</span></span>
<span class="line"><span style="color:#6A737D;"># -n: 列出最近创建的 n 个容器。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -n</span><span style="color:#79B8FF;"> 5</span></span>
<span class="line"><span style="color:#6A737D;"># -l: 查看最后一次运行的容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-运行容器" tabindex="-1"><a class="header-anchor" href="#_3-2-运行容器"><span>3.2 运行容器</span></a></h3><p><code>docker run</code>命令将一个镜像运行为容器。<br> 注意：Docker 容器运行必须有一个前台进程， 如果没有前台进程执行，容器认为是空闲状态，就会自动退出。</p><ul><li>命令格式：<code>docker run [选项] [镜像名称/镜像ID] [容器启动后内部执行的命令]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># -d : 以守护进程的方式运行。会创建一个守护式容器在后台运行，不会自动登录容器。(只加-it两个参数，创建容器后会自动进容器里)</span></span>
<span class="line"><span style="color:#6A737D;"># -p: 指定端口映射。格式: docker run -p 宿主机端口:容器对外暴露端口 [镜像名称:tag/镜像ID]</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> -p</span><span style="color:#9ECBFF;"> 8090:80</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span>
<span class="line"><span style="color:#6A737D;"># -P: 随机端口映射，随机使用宿主机的可用端口与容器内暴露的端口映射。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> -P</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span>
<span class="line"><span style="color:#6A737D;"># -i: 运行容器</span></span>
<span class="line"><span style="color:#6A737D;"># -t: 容器启动后会进入其命令行。加入这两个参数，容器创建就能登录进去。即分配一个伪终端，通常和-i连用</span></span>
<span class="line"><span style="color:#6A737D;"># 运行容器后执行bash命令。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -ditP</span><span style="color:#9ECBFF;"> nginx</span><span style="color:#9ECBFF;"> bash</span></span>
<span class="line"><span style="color:#6A737D;"># -e: 在容器内设置一个环境变量。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> -e</span><span style="color:#9ECBFF;"> NGINX_NAME=nginx</span><span style="color:#79B8FF;"> -e</span><span style="color:#9ECBFF;"> XX_NAME=xxx</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span>
<span class="line"><span style="color:#6A737D;"># -v: 映射存储卷，可以映射文件及目录。可以使用多个 -v 做多个文件映射。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> -v</span><span style="color:#9ECBFF;"> 宿主机文件路径:容器内文件路径</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># --name: 指定容器的名称（为创建的容器命名），同一台宿主主机上的容器名称不能重复。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> 自定义容器名</span><span style="color:#79B8FF;"> -P</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span>
<span class="line"><span style="color:#6A737D;"># --rm: 当一个容器停止后，就立即删除。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -d</span><span style="color:#79B8FF;"> --rm</span><span style="color:#9ECBFF;"> nginx:1.19.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-进入容器" tabindex="-1"><a class="header-anchor" href="#_3-3-进入容器"><span>3.3 进入容器</span></a></h3><p>在使用容器的过程中，我们难免需要进入容器进行排查问题。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 创建并进入容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -it</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> 容器名称</span><span style="color:#9ECBFF;"> 镜像名称:标签</span><span style="color:#9ECBFF;"> /bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 注意：Docker容器运行必须有一个前台进程，如果没有前台进程执行，容器认为是空闲状态，就会自动退出。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面来介绍进入正在运行的容器的四种方式。</p><h4 id="_3-3-1-attach" tabindex="-1"><a class="header-anchor" href="#_3-3-1-attach"><span>3.3.1 attach</span></a></h4><ul><li>格式: <code>docker attach [容器名或ID]</code></li></ul><p>通过管道，连接容器内PID=1的进程，容器至少有一个进程运行前台。attach 是最早 docker 官方推出的进入容器的命令了，使用该命令有一个问题，当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示，当所有窗口退出时，容器结束。</p><h4 id="_3-3-2-exec-官方推荐" tabindex="-1"><a class="header-anchor" href="#_3-3-2-exec-官方推荐"><span>3.3.2 <code>exec</code>(官方推荐)</span></a></h4><ul><li>格式: <code>docker exec [参数] [容器名或ID] [命令]</code></li></ul><p>exec 是官方推出的有一个新的进入容器的命令，这也是目前推荐使用的进入容器的方式。这个命令相当于在容器中执行一个命令。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 进入到指定容器内部并开启一个新的终端</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> exec</span><span style="color:#79B8FF;"> -it</span><span style="color:#9ECBFF;"> 0cd4d9d94de2</span><span style="color:#9ECBFF;"> sh</span></span>
<span class="line"><span style="color:#6A737D;"># 用这种方式相当于进入该容器，并且在退出时不会将容器停止。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 守护方式创建容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -di</span><span style="color:#79B8FF;"> --name</span><span style="color:#9ECBFF;"> 容器名称</span><span style="color:#9ECBFF;"> 镜像名称:标签</span></span>
<span class="line"><span style="color:#6A737D;"># 登录守护容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> exec</span><span style="color:#79B8FF;"> -it</span><span style="color:#9ECBFF;"> 容器名称</span><span style="color:#9ECBFF;"> /bin/bash</span></span>
<span class="line"><span style="color:#6A737D;"># 退出当前容器</span></span>
<span class="line"><span style="color:#79B8FF;">exit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-nsenter" tabindex="-1"><a class="header-anchor" href="#_3-3-3-nsenter"><span>3.3.3 nsenter</span></a></h4><ul><li>格式示例: <code>nsenter --target $( docker inspect -f {{.State.Pid}} nginxv1 ) --mount --uts --ipc --net --pid</code></li></ul><p>进入容器中，但不进入容器内的进程。<br> Nsenter 是 Linux 提供的命令，需要配合<code>docker inspect</code>来使用（早期没有<code>exec</code>命令时最常用的方式之一）,Docker 是用 golang 语言开发，所以它也支持 go 语言的模板语法。</p><h4 id="_3-3-4-ssh" tabindex="-1"><a class="header-anchor" href="#_3-3-4-ssh"><span>3.3.4 ssh</span></a></h4><p>在容器里面安装一个 sshd 服务</p><p>在镜像（或容器）中安装 SSH Server，这样就能保证多人进入容器且相互之间不受干扰，没有使用 Docker 的情况就是这样做的，但是使用了 Docker 容器之后不建议使用 ssh 进入到 Docker 容器内。</p><h3 id="_3-4-退出容器" tabindex="-1"><a class="header-anchor" href="#_3-4-退出容器"><span>3.4 退出容器</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#79B8FF;">exit</span><span style="color:#6A737D;">            # 容器停止退出</span></span>
<span class="line"><span style="color:#B392F0;">Ctrl</span><span style="color:#9ECBFF;"> +</span><span style="color:#9ECBFF;"> P</span><span style="color:#9ECBFF;"> +</span><span style="color:#9ECBFF;"> Q</span><span style="color:#6A737D;">    # 容器不停止退出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-容器的启动与停止" tabindex="-1"><a class="header-anchor" href="#_3-5-容器的启动与停止"><span>3.5 容器的启动与停止</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 启动容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> start</span><span style="color:#E1E4E8;"> [容器ID </span><span style="color:#9ECBFF;">/</span><span style="color:#9ECBFF;"> 容器名]</span></span>
<span class="line"><span style="color:#6A737D;"># 重启容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> restart</span><span style="color:#E1E4E8;"> [容器ID </span><span style="color:#9ECBFF;">/</span><span style="color:#9ECBFF;"> 容器名]</span></span>
<span class="line"><span style="color:#6A737D;"># 停止容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> stop</span><span style="color:#E1E4E8;"> [容器ID </span><span style="color:#9ECBFF;">/</span><span style="color:#9ECBFF;"> 容器名]</span></span>
<span class="line"><span style="color:#6A737D;"># 停止所有容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> stop</span><span style="color:#79B8FF;"> -f</span><span style="color:#E1E4E8;"> $(</span><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -qa</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;"># 强制停止容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> kill</span><span style="color:#E1E4E8;"> [容器ID </span><span style="color:#9ECBFF;">/</span><span style="color:#9ECBFF;"> 容器名]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-刪除容器" tabindex="-1"><a class="header-anchor" href="#_3-6-刪除容器"><span>3.6 刪除容器</span></a></h3><ul><li>命令: <code>docker rm [容器ID]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 删除指定容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rm</span><span style="color:#9ECBFF;"> bde00bc086cf</span></span>
<span class="line"><span style="color:#6A737D;"># 强制删除运行中的容器(使用SIGKILL信号)</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rm</span><span style="color:#79B8FF;"> -f</span><span style="color:#9ECBFF;"> bde00bc086cf</span></span>
<span class="line"><span style="color:#6A737D;"># 迭代删除所有容器</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> rm</span><span style="color:#79B8FF;"> -f</span><span style="color:#E1E4E8;"> $(</span><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> ps</span><span style="color:#79B8FF;"> -aq</span><span style="color:#E1E4E8;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-查看容器日志" tabindex="-1"><a class="header-anchor" href="#_3-7-查看容器日志"><span>3.7 查看容器日志</span></a></h3><ul><li>命令: <code>docker logs [option] [容器名称或ID]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># -t：显示时间戳。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> logs</span><span style="color:#79B8FF;"> -t</span><span style="color:#9ECBFF;"> b1a13dfe7105</span></span>
<span class="line"><span style="color:#6A737D;"># -f: 跟踪日志输出。类似tail -f命令。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> logs</span><span style="color:#79B8FF;"> -ft</span><span style="color:#9ECBFF;"> 容器id</span></span>
<span class="line"><span style="color:#6A737D;"># --tail N：仅列出最新N条容器日志。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> logs</span><span style="color:#79B8FF;"> --tail</span><span style="color:#79B8FF;"> 10</span><span style="color:#9ECBFF;"> b1a13dfe7105</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-容器文件拷贝" tabindex="-1"><a class="header-anchor" href="#_3-7-容器文件拷贝"><span>3.7 容器文件拷贝</span></a></h3><p>复制命令类似于 Linux 系统中的 scp 命令，是将宿主主机上的内容上传到容器中，也可能是将容器中的文件下载到宿主主机中。</p><ul><li>从容器复制到宿主机: <code>docker cp [容器ID:容器内文件路径] 宿主机路径</code></li><li>从宿主机复制到容器: <code>docker cp 宿主机路径 [容器ID:容器内文件路径]</code></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 容器/usr 到 宿主机当前目录</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> cp</span><span style="color:#9ECBFF;"> d78575358e04:/usr</span><span style="color:#9ECBFF;"> ./</span></span>
<span class="line"><span style="color:#6A737D;"># 宿主机 到 容器/home下</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> cp</span><span style="color:#9ECBFF;"> ./export_nginx.tar</span><span style="color:#9ECBFF;"> d78575358e04:/home</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-目录挂载-容器数据卷" tabindex="-1"><a class="header-anchor" href="#_3-8-目录挂载-容器数据卷"><span>3.8 目录挂载(容器数据卷)</span></a></h3><p>在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样我们就可以通过修改宿主机某个目录的文件从而去影响容器，而且这个操作是双向绑定的，也就是说容器内的操作也会影响到宿主机，实现备份功能。</p><p>容器被删除的时候，宿主机的内容并不会被删除。如果多个容器挂载同一个目录，其中一个容器被删除，其他容器的内容也不会受到影响。</p><p>可通过<code>docker volume</code>命令容器中挂载的数据卷信息</p><p>创建容器时添加 <code>-v</code> 参数，格式为<code>宿主机目录:容器目录</code>，这属于指定目录挂载，有几种不同的挂载形式:</p><ul><li>匿名挂载: 匿名挂载只需要写容器目录即可，容器外对应的目录会在 <code>/var/lib/docker/volume</code> 中生成。</li><li>具名挂载: 具名挂载就是给数据卷起了个名字，容器外对应的目录会在 <code>/var/lib/docker/volume</code> 中生成。</li><li>指定目录挂载: 上面示例的方式就属于指定目录挂载，这种方式的挂载不会在 <code>/var/lib/docker/volume</code> 目录生成内容。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;"># 匿名挂载</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -di</span><span style="color:#79B8FF;"> -v</span><span style="color:#9ECBFF;"> /usr/local/data</span><span style="color:#9ECBFF;"> centos:7</span></span>
<span class="line"><span style="color:#6A737D;"># 具名挂载</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -di</span><span style="color:#79B8FF;"> -v</span><span style="color:#9ECBFF;"> docker_centos_data:/usr/local/data</span><span style="color:#9ECBFF;"> centos:7</span></span>
<span class="line"><span style="color:#6A737D;"># 指定多目录挂载</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> run</span><span style="color:#79B8FF;"> -di</span><span style="color:#79B8FF;"> -v</span><span style="color:#9ECBFF;"> /宿主机目录:/容器目录</span><span style="color:#79B8FF;"> -v</span><span style="color:#9ECBFF;"> /宿主机目录2:/容器目录2</span><span style="color:#9ECBFF;"> 镜像名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 查看数据卷信息</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> volume</span><span style="color:#9ECBFF;"> ls</span></span>
<span class="line"><span style="color:#6A737D;"># 查看目录挂载关系: 通过 docker volume inspect 数据卷名称，可以查看该数据卷对应宿主机的目录地址。</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> volume</span><span style="color:#9ECBFF;"> inspect</span><span style="color:#9ECBFF;"> docker_centos_data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,104),p=[o];function c(i,r){return a(),n("div",null,p)}const F=s(l,[["render",c],["__file","2024-07-06-Docker常用命令.html.vue"]]),u=JSON.parse('{"path":"/program/linux/2024-07-06-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html","title":"Docker常用命令","lang":"zh-CN","frontmatter":{"title":"Docker常用命令","date":"2024-07-06T00:00:00.000Z","category":"Linux","tag":["Docker"],"order":-20240706,"description":"1. 帮助命令 2. 镜像命令 2.1 登录镜像库 命令格式：docker login [选项] [镜像仓库URL] 2.2 搜索镜像 命令格式：docker search [镜像名称] [选项] 2.3 拉取镜像 命令格式：docker pull [镜像仓库URL]/[命名空间]/[镜像仓库名称]:[镜像版本] 2.4 查看镜像 查看基本信息 命令格...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/linux/2024-07-06-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Docker常用命令"}],["meta",{"property":"og:description","content":"1. 帮助命令 2. 镜像命令 2.1 登录镜像库 命令格式：docker login [选项] [镜像仓库URL] 2.2 搜索镜像 命令格式：docker search [镜像名称] [选项] 2.3 拉取镜像 命令格式：docker pull [镜像仓库URL]/[命名空间]/[镜像仓库名称]:[镜像版本] 2.4 查看镜像 查看基本信息 命令格..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-09T08:17:39.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2024-07-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-09T08:17:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker常用命令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-09T08:17:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"1. 帮助命令","slug":"_1-帮助命令","link":"#_1-帮助命令","children":[]},{"level":2,"title":"2. 镜像命令","slug":"_2-镜像命令","link":"#_2-镜像命令","children":[{"level":3,"title":"2.1 登录镜像库","slug":"_2-1-登录镜像库","link":"#_2-1-登录镜像库","children":[]},{"level":3,"title":"2.2 搜索镜像","slug":"_2-2-搜索镜像","link":"#_2-2-搜索镜像","children":[]},{"level":3,"title":"2.3 拉取镜像","slug":"_2-3-拉取镜像","link":"#_2-3-拉取镜像","children":[]},{"level":3,"title":"2.4 查看镜像","slug":"_2-4-查看镜像","link":"#_2-4-查看镜像","children":[]},{"level":3,"title":"2.5 镜像TAG","slug":"_2-5-镜像tag","link":"#_2-5-镜像tag","children":[]},{"level":3,"title":"2.6 删除镜像","slug":"_2-6-删除镜像","link":"#_2-6-删除镜像","children":[]},{"level":3,"title":"2.7 推送镜像","slug":"_2-7-推送镜像","link":"#_2-7-推送镜像","children":[]},{"level":3,"title":"2.8 构建镜像","slug":"_2-8-构建镜像","link":"#_2-8-构建镜像","children":[]}]},{"level":2,"title":"3. 容器命令","slug":"_3-容器命令","link":"#_3-容器命令","children":[{"level":3,"title":"3.1 查看容器","slug":"_3-1-查看容器","link":"#_3-1-查看容器","children":[]},{"level":3,"title":"3.2 运行容器","slug":"_3-2-运行容器","link":"#_3-2-运行容器","children":[]},{"level":3,"title":"3.3 进入容器","slug":"_3-3-进入容器","link":"#_3-3-进入容器","children":[]},{"level":3,"title":"3.4 退出容器","slug":"_3-4-退出容器","link":"#_3-4-退出容器","children":[]},{"level":3,"title":"3.5 容器的启动与停止","slug":"_3-5-容器的启动与停止","link":"#_3-5-容器的启动与停止","children":[]},{"level":3,"title":"3.6 刪除容器","slug":"_3-6-刪除容器","link":"#_3-6-刪除容器","children":[]},{"level":3,"title":"3.7 查看容器日志","slug":"_3-7-查看容器日志","link":"#_3-7-查看容器日志","children":[]},{"level":3,"title":"3.7 容器文件拷贝","slug":"_3-7-容器文件拷贝","link":"#_3-7-容器文件拷贝","children":[]},{"level":3,"title":"3.8 目录挂载(容器数据卷)","slug":"_3-8-目录挂载-容器数据卷","link":"#_3-8-目录挂载-容器数据卷","children":[]}]}],"git":{"createdTime":1720263878000,"updatedTime":1725869859000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/linux/2024-07-06-Docker常用命令.md","localizedDate":"2024年7月6日","excerpt":"","autoDesc":true}');export{F as comp,u as data};
