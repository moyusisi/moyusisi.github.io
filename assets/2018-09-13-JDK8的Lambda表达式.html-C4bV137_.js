import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,d as e}from"./app-CN8sbHCb.js";const l={},o=e(`<h2 id="什么是λ表达式" tabindex="-1"><a class="header-anchor" href="#什么是λ表达式"><span>什么是λ表达式</span></a></h2><p>λ表达式本质上是一个匿名方法。让我们来看下面这个例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> int</span><span style="color:#B392F0;"> add</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转成λ表达式后是这个样子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>参数类型也可以省略，Java编译器会根据上下文推断出来：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//返回两数之和</span></span>
<span class="line"><span style="color:#E1E4E8;">(x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//显式指明返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">(x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y; }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可见λ表达式有三部分组成：参数列表，箭头(<code>-&gt;</code>)，以及一个表达式或语句块。</li></ul><p>下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回<code>void</code>，其实就是<code>Runnable</code>里<code>run</code>方法的一个实现）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello Lambda!&quot;</span><span style="color:#E1E4E8;">); }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果只有一个参数且可以被Java推断出类型，那么参数列表的括号也可以省略：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">c </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> c.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="λ表达式的类型-它是object吗" tabindex="-1"><a class="header-anchor" href="#λ表达式的类型-它是object吗"><span>λ表达式的类型（它是Object吗？）</span></a></h2><p>λ表达式可以被当做是一个<code>Object</code>(注意措辞)。λ表达式的类型，叫做&quot;目标类型(<code>target type</code>)&quot;。λ表达式的目标类型是&quot;函数接口(<code>functional interface</code>)&quot;，这是JDK8新引入的概念。 <strong>它的定义是：一个接口，如果只有一个显式声明的抽象方法，那么它就是一个函数接口。</strong> 一般用<code>@FunctionalInterface</code>标注出来(也可以不标)。举例如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Runnable</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">void</span><span style="color:#B392F0;"> run</span><span style="color:#E1E4E8;">(); }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Callable</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; { V </span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception; }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> ActionListener</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">void</span><span style="color:#B392F0;"> actionPerformed</span><span style="color:#E1E4E8;">(ActionEvent </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">); }</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Comparator</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; { </span><span style="color:#F97583;">int</span><span style="color:#B392F0;"> compare</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">o1</span><span style="color:#E1E4E8;">, T </span><span style="color:#FFAB70;">o2</span><span style="color:#E1E4E8;">); </span><span style="color:#F97583;">boolean</span><span style="color:#B392F0;"> equals</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">); }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意最后这个<code>Comparator</code>接口。它里面声明了两个方法，貌似不符合函数接口的定义，但它的确是函数接口。这是因为<code>equals</code>方法是<code>Object</code>的，所有的接口都会声明<code>Object</code>的<code>public</code>方法——虽然大多是隐式的。所以，<code>Comparator</code>显式的声明了<code>equals</code>不影响它依然是个函数接口。你可以用一个λ表达式为一个函数接口赋值：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Runnable r1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello Lambda!&quot;</span><span style="color:#E1E4E8;">);};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后再赋值给一个<code>Object</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> r1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但却不能这样干：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// ERROR! Object is not a functional interface!</span></span>
<span class="line"><span style="color:#E1E4E8;">Object obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello Lambda!&quot;</span><span style="color:#E1E4E8;">);};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>必须显式的转型成一个函数接口才可以：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// correct</span></span>
<span class="line"><span style="color:#E1E4E8;">Object o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (Runnable) () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hi&quot;</span><span style="color:#E1E4E8;">); };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个λ表达式只有在转型成一个函数接口后才能被当做<code>Object</code>使用。所以下面这句也不能编译：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//错误! 目标类型不明</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">( () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {} );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>必须先转型:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 正确</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">( (Runnable)() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {} );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设你自己写了一个函数接口，长的跟<code>Runnable</code>一模一样：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> MyRunnable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Runnable r1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">    () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello Lambda!&quot;</span><span style="color:#E1E4E8;">);};</span></span>
<span class="line"><span style="color:#E1E4E8;">MyRunnable2 r2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello Lambda!&quot;</span><span style="color:#E1E4E8;">);};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>都是正确的写法。这说明一个λ表达式可以有多个目标类型（函数接口），只要函数匹配成功即可。但需注意一个λ表达式必须至少有一个目标类型。JDK预定义了很多函数接口以避免用户重复定义。最典型的是<code>Function</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; {  </span></span>
<span class="line"><span style="color:#E1E4E8;">    R </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口代表一个函数，接受一个T类型的参数，并返回一个<code>R</code>类型的返回值。另一个预定义函数接口叫做<code>Consumer</code>，跟<code>Function</code>的唯一不同是它没有返回值。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Consumer</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">    void</span><span style="color:#B392F0;"> accept</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个<code>Predicate</code>，用来判断某项条件是否满足。经常用来进行筛滤操作：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Predicate</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#F97583;">    boolean</span><span style="color:#B392F0;"> test</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所述，一个λ表达式其实就是定义了一个匿名方法，只不过这个方法必须符合至少一个函数接口。</p><h2 id="λ表达式的使用" tabindex="-1"><a class="header-anchor" href="#λ表达式的使用"><span>λ表达式的使用</span></a></h2><h3 id="λ表达式用在何处" tabindex="-1"><a class="header-anchor" href="#λ表达式用在何处"><span>λ表达式用在何处</span></a></h3><p><strong>λ表达式主要用于替换以前广泛使用的内部匿名类，各种回调，比如事件响应器、传入<code>Thread</code>类的<code>Runnable</code>等。</strong> 看下面的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Thread oldSchool </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Thread</span><span style="color:#E1E4E8;">( </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Runnable</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> run</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is from an anonymous class.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">} );</span></span>
<span class="line"><span style="color:#E1E4E8;">Thread gaoDuanDaQiShangDangCi </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Thread</span><span style="color:#E1E4E8;">( () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This is from an anonymous method (lambda exp).&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意第二个线程里的λ表达式，你并不需要显式地把它转成一个<code>Runnable</code>，因为Java能根据上下文自动推断出来：一个<code>Thread</code>的构造函数接受一个<code>Runnable</code>参数，而传入的λ表达式正好符合其<code>run()</code>函数，所以Java编译器推断它为<code>Runnable</code>。</p><p>从形式上看，λ表达式只是为你节省了几行代码。但将λ表达式引入Java的动机并不仅仅为此。<code>Java8</code>有一个短期目标和一个长期目标。短期目标是：配合&quot;集合类批处理操作&quot;的内部迭代和并行处理(下面将要讲到); 长期目标是将<code>Java</code>向函数式编程语言这个方向引导(并不是要完全变成一门函数式编程语言，只是让它有更多的函数式编程语言的特性)，也正是由于这个原因，Oracle并没有简单地使用内部类去实现λ表达式，而是使用了一种更动态、更灵活、易于将来扩展和改变的策略(<code>invokedynamic</code>)。</p><h3 id="λ表达式与集合类批处理操作-或者叫块操作" tabindex="-1"><a class="header-anchor" href="#λ表达式与集合类批处理操作-或者叫块操作"><span>λ表达式与集合类批处理操作(或者叫块操作)</span></a></h3><p><strong>集合类的批处理操作是<code>Java8</code>的另一个重要特性，它与λ表达式的配合使用乃是<code>Java8</code>的最主要特性。集合类的批处理操作API的目的是实现集合类的&quot;内部迭代&quot;，并期望充分利用现代多核CPU进行并行计算。</strong></p><p><code>Java8</code>之前集合类的迭代(<code>Iteration</code>)都是外部的，即客户代码。而内部迭代意味着改由Java类库来进行迭代，而不是客户代码。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 外部迭代</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(Object o</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> list) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(o);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以写成：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//forEach函数实现内部迭代</span></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(o </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(o);});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>集合类(包括<code>List</code>)现在都有一个<code>forEach</code>方法，对元素进行迭代(遍历)，所以我们不需要再写<code>for</code>循环了。<code>forEach</code>方法接受一个函数接口<code>Consumer</code>做参数，所以可以使用λ表达式。</p><p>这种内部迭代方法广泛存在于各种语言，如C++的STL算法库、Python、ruby、Scala等。</p><p>Java8为集合类引入了另一个重要概念：流(<code>stream</code>)。一个流通常以一个集合类实例为其数据源，然后在其上定义各种操作。流的API设计使用了管道(<code>pipelines</code>)模式。对流的一次操作会返回另一个流。如同IO的API或者<code>StringBuffer</code>的<code>append</code>方法那样，从而多个不同的操作可以在一个语句里串起来。看下面的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">Shape</span><span style="color:#E1E4E8;">&gt; shapes </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...</span></span>
<span class="line"><span style="color:#E1E4E8;">shapes.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">getColor</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> BLUE)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">setColor</span><span style="color:#E1E4E8;">(RED));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先调用<code>stream</code>方法，以集合类对象shapes里面的元素为数据源，生成一个流。然后在这个流上调用<code>filter</code>方法，挑出蓝色的，返回另一个流。最后调用<code>forEach</code>方法将这些蓝色的物体喷成红色。(<code>forEach</code>方法不再返回流，而是一个终端方法，类似于<code>StringBuffer</code>在调用若干<code>append</code>之后的那个<code>toString</code>)</p><p><code>filter</code>方法的参数是<code>Predicate</code>类型，<code>forEach</code>方法的参数是<code>Consumer</code>类型，它们都是函数接口，所以可以使用λ表达式。</p><p>还有一个方法叫<code>parallelStream()</code>，顾名思义它和<code>stream()</code>一样，只不过指明要并行处理，以期充分利用现代CPU的多核特性。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 或shapes.stream().parallel()</span></span>
<span class="line"><span style="color:#E1E4E8;">shapes.</span><span style="color:#B392F0;">parallelStream</span><span style="color:#E1E4E8;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>来看更多的例子。下面是典型的大数据处理方法，<code>Filter-Map-Reduce</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//给出一个String类型的数组，找出其中所有不重复的素数</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> distinctPrimary</span><span style="color:#E1E4E8;">(String... numbers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(numbers);</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Integer</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Primes.</span><span style="color:#B392F0;">isPrime</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;distinctPrimary result is: &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> r);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一步: 传入一系列<code>String</code>(假设都是合法的数字)，转成一个<code>List</code>，然后调用<code>stream()</code>方法生成流。</li><li>第二步: 调用流的<code>map</code>方法把每个元素由<code>String</code>转成<code>Integer</code>，得到一个新的流。<code>map</code>方法接受一个<code>Function</code>类型的参数，上面介绍了，<code>Function</code>是个函数接口，所以这里用λ表达式。</li><li>第三步: 调用流的<code>filter</code>方法，过滤那些不是素数的数字，并得到一个新流。<code>filter</code>方法接受一个<code>Predicate</code>类型的参数，上面介绍了，<code>Predicate</code>是个函数接口，所以这里用λ表达式。</li><li>第四步: 调用流的<code>distinct</code>方法，去掉重复，并得到一个新流。这本质上是另一个<code>filter</code>操作。</li><li>第五步: 用<code>collect</code>方法将最终结果收集到一个<code>List</code>里面去。<code>collect</code>方法接受一个<code>Collector</code>类型的参数，这个参数指明如何收集最终结果。在这个例子中，结果简单地收集到一个<code>List</code>中。我们也可以用<code>Collectors.toMap(e-&gt;e, e-&gt;e)</code>把结果收集到一个<code>Map</code>中，它的意思是：把结果收到一个<code>Map</code>，用这些素数自身既作为键又作为值。<code>toMap</code>方法接受两个<code>Function</code>类型的参数，分别用以生成键和值，<code>Function</code>是个函数接口，所以这里都用λ表达式。</li></ul><p>你可能会觉得在这个例子里，<code>List l</code>被迭代了好多次，<code>map，filter，distinct</code>都分别是一次循环，效率会不好。实际并非如此。这些返回另一个<code>Stream</code>的方法都是&quot;<code>懒(lazy)</code>&quot;的，而最后返回最终结果的<code>collect</code>方法则是&quot;<code>急(eager)</code>&quot;的。在遇到<code>eager</code>方法之前，<code>lazy</code>的方法不会执行。</p><p>当遇到<code>eager</code>方法时，前面的<code>lazy</code>方法才会被依次执行。而且是管道贯通式执行。这意味着每一个元素依次通过这些管道。例如有个元素“3”，首先它被<code>map</code>成整数型3；然后通过<code>filter</code>，发现是素数，被保留下来；又通过<code>distinct</code>，如果已经有一个3了，那么就直接丢弃，如果还没有则保留。这样，3个操作其实只经过了一次循环。</p><p>除<code>collect</code>外其它的<code>eager</code>操作还有<code>forEach，toArray，reduce</code>等。</p><p>下面来看一下也许是最常用的收集器方法，<code>groupingBy</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//给出一个String类型的数组，找出其中各个素数，并统计其出现次数</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> primaryOccurrence</span><span style="color:#E1E4E8;">(String... numbers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(numbers);</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Integer</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Primes.</span><span style="color:#B392F0;">isPrime</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">( Collectors.</span><span style="color:#B392F0;">groupingBy</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">p, Collectors.</span><span style="color:#B392F0;">summingInt</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) );</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;primaryOccurrence result is: &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> r);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这一行：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Collectors.</span><span style="color:#B392F0;">groupingBy</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">p, Collectors.</span><span style="color:#B392F0;">summingInt</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它的意思是：把结果收集到一个<code>Map</code>中，用统计到的各个素数自身作为键，其出现次数作为值。</p><p>下面是一个<code>reduce</code>的例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//给出一个String类型的数组，求其中所有不重复素数的和</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> distinctPrimarySum</span><span style="color:#E1E4E8;">(String... numbers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(numbers);</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Integer</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Primes.</span><span style="color:#B392F0;">isPrime</span><span style="color:#E1E4E8;">(e))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, (x,y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">y); </span><span style="color:#6A737D;">// equivalent to .sum()</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;distinctPrimarySum result is: &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> sum);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reduce</code>方法用来产生单一的一个最终结果。</p><p>流有很多预定义的reduce操作，如<code>sum()，max()，min()</code>等。</p><p>再举个现实世界里的栗子比如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 统计年龄在25-35岁的男女人数、比例</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> boysAndGirls</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Person</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> persons) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Map&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> persons.</span><span style="color:#B392F0;">parallelStream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&gt;=</span><span style="color:#79B8FF;">25</span><span style="color:#F97583;"> &amp;&amp;</span><span style="color:#E1E4E8;"> p.</span><span style="color:#B392F0;">getAge</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">&lt;=</span><span style="color:#79B8FF;">35</span><span style="color:#E1E4E8;">).</span></span>
<span class="line"><span style="color:#B392F0;">        collect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            Collectors.</span><span style="color:#B392F0;">groupingBy</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">p.</span><span style="color:#B392F0;">getSex</span><span style="color:#E1E4E8;">(), Collectors.</span><span style="color:#B392F0;">summingInt</span><span style="color:#E1E4E8;">(p</span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;boysAndGirls result is &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;, ratio (male : female) is &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">float</span><span style="color:#E1E4E8;">)result.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Person.MALE)</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">result.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(Person.FEMALE));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="λ表达式的更多用法" tabindex="-1"><a class="header-anchor" href="#λ表达式的更多用法"><span>λ表达式的更多用法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 嵌套的λ表达式</span></span>
<span class="line"><span style="color:#E1E4E8;">Callable&lt;</span><span style="color:#F97583;">Runnable</span><span style="color:#E1E4E8;">&gt; c1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Nested lambda&quot;</span><span style="color:#E1E4E8;">); };</span></span>
<span class="line"><span style="color:#E1E4E8;">c1.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 用在条件表达式中</span></span>
<span class="line"><span style="color:#E1E4E8;">Callable&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; c2 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span><span style="color:#F97583;"> ?</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;"> 42</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (() </span><span style="color:#F97583;">-&gt;</span><span style="color:#79B8FF;"> 24</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(c2.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#6A737D;">// 定义一个递归函数，注意须用this限定</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> UnaryOperator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; factorial </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">==</span><span style="color:#79B8FF;"> 0</span><span style="color:#F97583;"> ?</span><span style="color:#79B8FF;"> 1</span><span style="color:#F97583;"> :</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.factorial.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">( i </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;"> );</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(factorial.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Java中，随声明随调用的方式是不行的，比如下面这样，声明了一个λ表达式<code>(x, y) -&gt; x + y</code>，同时企图通过传入实参<code>(2, 3)</code>来调用它：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> five </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ( (x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> y ) (</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// ERROR! try to call a lambda in-place</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这在C++中是可以的，但Java中不行。Java的λ表达式只能用作赋值、传参、返回值等。</p><h2 id="其它相关概念" tabindex="-1"><a class="header-anchor" href="#其它相关概念"><span>其它相关概念</span></a></h2><h3 id="捕获-capture" tabindex="-1"><a class="header-anchor" href="#捕获-capture"><span>捕获(<code>Capture</code>)</span></a></h3><p>捕获的概念在于解决在λ表达式中我们可以使用哪些外部变量(即除了它自己的参数和内部定义的本地变量)的问题。</p><p>与内部类非常相似，但有不同点。不同点在于内部类总是持有一个其外部类对象的引用。而λ表达式呢，除非在它内部用到了其外部类（包围类）对象的方法或者成员，否则它就不持有这个对象的引用。</p><p>在Java8以前，如果要在内部类访问外部对象的一个本地变量，那么这个变量必须声明为final才行。在Java8中，这种限制被去掉了，代之以一个新的概念，&quot;effectively final&quot;。它的意思是你可以声明为<code>final</code>，也可以不声明<code>final</code>但是按照<code>final</code>来用，也就是一次赋值永不改变。换句话说，保证它加上<code>final</code>前缀后不会出编译错误。</p><p>在Java8中，内部类和λ表达式都可以访问<code>effectively final</code>的本地变量。λ表达式的例子如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">//包围类的成员变量</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> tmp1 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//包围类的静态成员变量</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;"> tmp2 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testCapture</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 没有声明为final，但是effectively final的本地变量</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> tmp3 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">    // 声明为final的本地变量</span></span>
<span class="line"><span style="color:#F97583;">    final</span><span style="color:#F97583;"> int</span><span style="color:#E1E4E8;"> tmp4 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 4</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">    // 普通本地变量</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> tmp5 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; f1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tmp1;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; f2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tmp2;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; f3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tmp3;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; f4 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> tmp4;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; f5 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">        // 编译错！对tmp5赋值导致它不是effectively final的</span></span>
<span class="line"><span style="color:#E1E4E8;">        tmp5  </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> tmp5;</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#6A737D;">    // 编译错！对tmp5赋值导致它不是effectively final的</span></span>
<span class="line"><span style="color:#E1E4E8;">    tmp5 </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 9</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java要求本地变量<code>final</code>或者<code>effectively final</code>的原因是多线程并发问题。内部类、λ表达式都有可能在不同的线程中执行，允许多个线程同时修改一个本地变量不符合Java的设计理念。</p><h3 id="方法引用-method-reference" tabindex="-1"><a class="header-anchor" href="#方法引用-method-reference"><span>方法引用(<code>Method reference</code>)</span></a></h3><p><strong>任何一个λ表达式都可以代表某个函数接口的唯一方法的匿名描述符。我们也可以使用某个类的某个具体方法来代表这个描述符，叫做方法引用。</strong> 例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">parseInt </span><span style="color:#6A737D;">//静态方法引用</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">print </span><span style="color:#6A737D;">//实例方法引用</span></span>
<span class="line"><span style="color:#E1E4E8;">Person</span><span style="color:#F97583;">::new</span><span style="color:#6A737D;">       //构造器引用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一组例子，教你使用方法引用代替λ表达式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// c1 与 c2 是一样的（静态方法引用）</span></span>
<span class="line"><span style="color:#E1E4E8;">Comparator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; c2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (x, y) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Integer.</span><span style="color:#B392F0;">compare</span><span style="color:#E1E4E8;">(x, y);</span></span>
<span class="line"><span style="color:#E1E4E8;">Comparator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; c1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Integer</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">compare;</span></span>
<span class="line"><span style="color:#6A737D;">// 下面两句是一样的（实例方法引用1）</span></span>
<span class="line"><span style="color:#E1E4E8;">persons.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(e </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(e));</span></span>
<span class="line"><span style="color:#E1E4E8;">persons.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span>
<span class="line"><span style="color:#6A737D;">// 下面两句是一样的（实例方法引用2）</span></span>
<span class="line"><span style="color:#E1E4E8;">persons.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(person </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> person.</span><span style="color:#B392F0;">eat</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">persons.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(Person</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">eat);</span></span>
<span class="line"><span style="color:#6A737D;">// 下面两句是一样的（构造器引用）</span></span>
<span class="line"><span style="color:#E1E4E8;">strList.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Integer</span><span style="color:#E1E4E8;">(s));</span></span>
<span class="line"><span style="color:#E1E4E8;">strList.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Integer</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法引用，你的程序会变得更短些。现在<code>distinctPrimarySum</code>方法可以改写如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> distinctPrimarySum</span><span style="color:#E1E4E8;">(String... numbers) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(numbers);</span></span>
<span class="line"><span style="color:#F97583;">    int</span><span style="color:#E1E4E8;"> sum </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> l.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Integer</span><span style="color:#F97583;">::new</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(Primes</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">isPrime).</span><span style="color:#B392F0;">distinct</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;distinctPrimarySum result is: &quot;</span><span style="color:#F97583;"> +</span><span style="color:#E1E4E8;"> sum);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一些其它的方法引用:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#B392F0;">super</span><span style="color:#E1E4E8;">::toString </span><span style="color:#6A737D;">//引用某个对象的父类方法</span></span>
<span class="line"><span style="color:#E1E4E8;">String[]::</span><span style="color:#F97583;">new</span><span style="color:#6A737D;"> //引用一个数组的构造器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认方法-default-method" tabindex="-1"><a class="header-anchor" href="#默认方法-default-method"><span>默认方法(<code>Default method</code>)</span></a></h3><p>Java8中，接口声明里可以有方法实现了，叫做默认方法。在此之前，接口里的方法全部是抽象方法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> MyInterface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">m1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    default</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">m2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;Hello default method!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这实际上混淆了接口和抽象类，但一个类仍然可以实现多个接口，而只能继承一个抽象类。</p><p>这么做的原因是：由于<code>Collection</code>库需要为批处理操作添加新的方法，如<code>forEach()，stream()</code>等，但是不能修改现有的<code>Collection</code>接口——如果那样做的话所有的实现类都要进行修改，包括很多客户自制的实现类。所以只好使用这种妥协的办法。</p><p>如此一来，我们就面临一种类似多继承的问题。如果类<code>Sub</code>继承了两个接口，<code>Base1</code>和<code>Base2</code>，而这两个接口恰好具有完全相同的两个默认方法，那么就会产生冲突。这时<code>Sub</code>类就必须通过重载来显式指明自己要使用哪一个接口的实现（或者提供自己的实现）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> Sub</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> Base1</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Base2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Base1.super.</span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">//使用Base1的实现</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了默认方法，Java8的接口也可以有静态方法的实现：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> MyInterf</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">m1</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">    default</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">m2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;Hello default method!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#F97583;">    static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">m3</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#9ECBFF;"> &quot;Hello static method in Interface!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成器函数-generator-function" tabindex="-1"><a class="header-anchor" href="#生成器函数-generator-function"><span>生成器函数(<code>Generator function</code>)</span></a></h3><p>有时候一个流的数据源不一定是一个已存在的集合对象，也可能是个&quot;生成器函数&quot;。一个生成器函数会产生一系列元素，供给一个流。 <code>Stream.generate(Supplier s)</code>就是一个生成器函数。其中参数<code>Supplier</code>是一个函数接口，里面有唯一的抽象方法<code>get()</code>。</p><p>下面这个例子生成并打印5个随机数：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Stream.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(Math</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">random).</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(System.out</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">println);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意这个<code>limit(5)</code>，如果没有这个调用，那么这条语句会永远地执行下去。也就是说这个生成器是无穷的。这种调用叫做终结操作，或者短路(<code>short-circuiting</code>)操作。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li>OpenJdk: <a href="http://openjdk.java.net/projects/lambda/" target="_blank" rel="noopener noreferrer">http://openjdk.java.net/projects/lambda/</a></li><li>ORACLE: <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener noreferrer">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></li><li>原文转载自：<a href="http://blog.csdn.net/ioriogami/article/details/12782141/" target="_blank" rel="noopener noreferrer">http://blog.csdn.net/ioriogami/article/details/12782141/</a></li></ul>`,115),p=[o];function c(t,r){return n(),a("div",null,p)}const E=s(l,[["render",c],["__file","2018-09-13-JDK8的Lambda表达式.html.vue"]]),y=JSON.parse('{"path":"/program/backend/2018-09-13-JDK8%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"JDK8的Lambda表达式","lang":"zh-CN","frontmatter":{"title":"JDK8的Lambda表达式","date":"2018-09-13T00:00:00.000Z","category":"Java","tag":["Lambda"],"order":-20180913,"description":"什么是λ表达式 λ表达式本质上是一个匿名方法。让我们来看下面这个例子： 转成λ表达式后是这个样子： 参数类型也可以省略，Java编译器会根据上下文推断出来： 或者 可见λ表达式有三部分组成：参数列表，箭头(->)，以及一个表达式或语句块。 下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回void，其实就是Runnable...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2018-09-13-JDK8%E7%9A%84Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"JDK8的Lambda表达式"}],["meta",{"property":"og:description","content":"什么是λ表达式 λ表达式本质上是一个匿名方法。让我们来看下面这个例子： 转成λ表达式后是这个样子： 参数类型也可以省略，Java编译器会根据上下文推断出来： 或者 可见λ表达式有三部分组成：参数列表，箭头(->)，以及一个表达式或语句块。 下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回void，其实就是Runnable..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T16:41:59.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Lambda"}],["meta",{"property":"article:published_time","content":"2018-09-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T16:41:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JDK8的Lambda表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-09-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T16:41:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"什么是λ表达式","slug":"什么是λ表达式","link":"#什么是λ表达式","children":[]},{"level":2,"title":"λ表达式的类型（它是Object吗？）","slug":"λ表达式的类型-它是object吗","link":"#λ表达式的类型-它是object吗","children":[]},{"level":2,"title":"λ表达式的使用","slug":"λ表达式的使用","link":"#λ表达式的使用","children":[{"level":3,"title":"λ表达式用在何处","slug":"λ表达式用在何处","link":"#λ表达式用在何处","children":[]},{"level":3,"title":"λ表达式与集合类批处理操作(或者叫块操作)","slug":"λ表达式与集合类批处理操作-或者叫块操作","link":"#λ表达式与集合类批处理操作-或者叫块操作","children":[]},{"level":3,"title":"λ表达式的更多用法","slug":"λ表达式的更多用法","link":"#λ表达式的更多用法","children":[]}]},{"level":2,"title":"其它相关概念","slug":"其它相关概念","link":"#其它相关概念","children":[{"level":3,"title":"捕获(Capture)","slug":"捕获-capture","link":"#捕获-capture","children":[]},{"level":3,"title":"方法引用(Method reference)","slug":"方法引用-method-reference","link":"#方法引用-method-reference","children":[]},{"level":3,"title":"默认方法(Default method)","slug":"默认方法-default-method","link":"#默认方法-default-method","children":[]},{"level":3,"title":"生成器函数(Generator function)","slug":"生成器函数-generator-function","link":"#生成器函数-generator-function","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719160919000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2018-09-13-JDK8的Lambda表达式.md","localizedDate":"2018年9月13日","excerpt":"","autoDesc":true}');export{E as comp,y as data};
