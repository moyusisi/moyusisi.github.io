import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,d as a}from"./app-CpRHff6n.js";const l="/assets/spring_framework-W0CULK8U.png",p="/assets/spring_framework_jar-B0ySFlji.png",o={},i=a('<h2 id="spring框架简介" tabindex="-1"><a class="header-anchor" href="#spring框架简介"><span>Spring框架简介</span></a></h2><p>Spring 的源码及文档下载，点击<a href="http://repo.spring.io/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener noreferrer">这里</a><br> Spring 框架第一个版本发布于 2004 年，自发布以来已历经三个主要版本更新:<br> Spring 2.0 提供了 XML 命名空间和 AspectJ 支持;<br> Spring 2.5 增加了注释驱动（annotation-driven）的配置支持;<br> Spring 3.0增加了对 Java 5+ 版本的支持和 @Configuration 模型;<br> Spring 4.0 是最新的主要版本，并且首次完全支持 Java 8 的特性。 你仍然可以使用老版本的 Java，但是最低版本的要求已经提高到 Java SE 6<br> Spring Framework 的功能被组织成了20来个模块。<br> 以Spring4.x为例，官方的框架图如下:</p><figure><img src="'+l+'" alt="Spring框架" tabindex="0" loading="lazy"><figcaption>Spring框架</figcaption></figure><p>我画的模块之间的依赖关系如下(绿色为springframework的模块):</p><figure><img src="'+p+`" alt="Spring模块" tabindex="0" loading="lazy"><figcaption>Spring模块</figcaption></figure><h3 id="core-container" tabindex="-1"><a class="header-anchor" href="#core-container"><span>Core Container</span></a></h3><p><code>Core Container</code> 由 <code>spring-core, spring-beans, spring-context, spring-context-support</code> 和 <code>spring-expression (Spring Expression Language)</code> 模块组成</p><ul><li><code>spring-core</code> 和 <code>spring-beans</code> 提供框架的基础部分，包括 <code>IoC</code> 和 <code>Dependency Injection</code> 主要组件是<code>BeanFactory</code>,它 是一个复杂的工厂模式的实现。</li><li><code>Context(spring-context)</code> 模块建立在<code>Core</code> 和 <code>Beans</code> 模块的基础上，向 Spring 框架提供上下文信息。 <code>ApplicationContext</code> 是 Context 模块的焦点。<code>spring-context-support</code> 对常见第三方库集成进Spring应用上下文提供支持。</li><li><code>SpEL(spring-expression)</code> 模块提供了一个强大的 <code>Expression Language</code>(表达式语言)用来在运行时查询和操作对象映射。这是JSP2.1规范所指定的统一表达式语言(unified EL)的一种延续。</li></ul><h3 id="aop、aspects、instrumentation、messaging" tabindex="-1"><a class="header-anchor" href="#aop、aspects、instrumentation、messaging"><span>AOP、Aspects、Instrumentation、Messaging</span></a></h3><ul><li><code>spring-aop</code> 模块提供 <code>AOP Alliance-compliant</code>(AOP联盟)的面向切面编程实现，允许你自定义，比如，方法拦截器和切入点完全分离代码。</li><li><code>spring-aspects</code> 模块提供了集成使用 AspectJ。</li><li><code>spring-instrument</code> 模块提供了对某些应用程序服务器的代理接口。</li><li><code>spring-messaging</code> 模块从 Spring 集成项目中抽象出来，比如 Message, MessageChannel, MessageHandler 及其他用来提供基于消息的基础服务。该模块还包括一组消息映射方法的注解。</li></ul><h3 id="data-access-integration-数据访问-集成" tabindex="-1"><a class="header-anchor" href="#data-access-integration-数据访问-集成"><span>Data Access/Integration 数据访问/集成</span></a></h3><p><code>Data Access/Integration</code> 层由 <code>JDBC, ORM, OXM, JMS</code> 和 <code>Transaction</code> 模块组成。</p><ul><li><code>spring-jdbc</code> 模块提供了不需要编写冗长的JDBC代码和解析数据库厂商特有的错误代码的JDBC抽象层。</li><li><code>spring-tx</code> 模块支持可编程和声明式事务管理，用于实现特殊的接口和你所有的POJO类（Plain Old Java Objects）。</li><li><code>spring-orm</code> 模块提供了流行的 <code>object-relational mapping</code>(对象-关系映射)API，其包含<code>JPA，JDO，Hibernate</code>。</li><li><code>spring-oxm</code> 模块提供了抽象层用于支持<code>Object/XML mapping</code>(对象/XML映射)的实现,如<code>JAXB、Castor、XMLBeans、JiBX</code>和<code>XStream</code>等。</li><li><code>spring-jms</code> 模块(<code>Java Messaging Service</code>)包含生产和消费信息的功能。 从 Spring Framework 4.1 开始提供集成 spring-messaging 模块。</li></ul><h3 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>Web</span></a></h3><p><code>Web</code> 层由 <code>spring-web, spring-webmvc, spring-websocket</code>和<code>spring-webmvc-portlet</code>组成。</p><ul><li><code>spring-web</code> 模块提供了基本的面向web开发的集成功能，例如多方文件上传、使用<code>Servlet listeners</code>以及Web开发应用程序上下文初始化IoC容器等，也包含HTTP客户端以及Spring远程访问的web相关部分。</li><li><code>spring-webmvc</code> 模块(也被称为<code>Web Servlet</code>模块)包含Spring的<code>model-view-controller</code>(模型-视图-控制器(MVC))和<code>REST Web Services</code>实现的Web应用程序，并且集成了Spring Framework所有的其他功能。</li><li><code>spring-webmvc-portlet</code> 模块(也被称为<code>Web-Portlet</code>模块)使用一个Portlet的环境和spring-webmvc模块功能的镜像提供了MVC模式的实现。</li></ul><h3 id="test" tabindex="-1"><a class="header-anchor" href="#test"><span>Test</span></a></h3><ul><li><code>spring-test</code> 模块支持通过组合JUnit或TestNG来进行单元测试和集成测试。它提供了连续加载的ApplicationContext并且缓存这些上下文。它还提供了<code>mock object</code>(模仿对象)，可以隔离测试代码。</li></ul><h3 id="控制反转-ioc-和依赖注入" tabindex="-1"><a class="header-anchor" href="#控制反转-ioc-和依赖注入"><span>控制反转(IoC)和依赖注入</span></a></h3><p><strong>控制反转</strong>(Inversion of Control)和<strong>依赖注入</strong>(Dependency Injection)意思差不多。当某个实例(调用者)需要调用另一个实例(被调用者)时，之前是通过调用者来创建被调用者的实例(new一个实例)，现在创建被调用者的工作交给Spring的容器来完成，称为“控制反转”。 我们描述创建被调用者的方式，由IoC容器来创建管理对象，然后注入到调用者中去，这就是“依赖注入“。注入的方式有通过<code>JavaBean</code>属性(setter方法)注入和通过构造方法注入。</p><h3 id="面向方面编程-aop" tabindex="-1"><a class="header-anchor" href="#面向方面编程-aop"><span>面向方面编程(AOP)</span></a></h3><p>面向方面的编程，即 AOP(Aspect Oriented Programming)，是一种编程技术，它允许程序员对横切关注点或横切典型的职责分界线的行为进行模块化（例如日志和事务管理）。AOP 的核心构造是方面，它将那些影响多个类的行为封装到可重用的模块中。 AOP 和 IOC 是补充性的技术，它们都运用模块化方式解决企业应用程序开发中的复杂问题。在典型的面向对象开发方式中，可能要将日志记录语句放在所有方法和 Java 类中才能实现日志功能。在 AOP 方式中，可以反过来将日志服务模块化，并以声明的方式将它们应用到需要日志的组件上。当然，优势就是 Java 类不需要知道日志服务的存在，也不需要考虑相关的代码。所以，用 Spring AOP 编写的应用程序代码是松散耦合的。 AOP 的功能完全集成到了 Spring 事务管理、日志和其他各种特性的上下文中。</p><hr><h2 id="spring简单项目示例" tabindex="-1"><a class="header-anchor" href="#spring简单项目示例"><span>Spring简单项目示例</span></a></h2><p><code>BeanFactory</code>是 Spring 作为 IOC 容器核心接口，<code>ApplicationContext</code>是<code>BeanFactory</code>的扩展，功能得到了进一步增强。<br> 下面是一个简单的Spring的例子 目录结构如下:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span>    src</span></span>
<span class="line"><span>    |--com.test.spring</span></span>
<span class="line"><span>    |  |--dao</span></span>
<span class="line"><span>    |  |  |--impl</span></span>
<span class="line"><span>    |  |  |  |--HelloImpl.java</span></span>
<span class="line"><span>    |  |  |--Hello.java</span></span>
<span class="line"><span>    |  |--service</span></span>
<span class="line"><span>    |  |  |--impl</span></span>
<span class="line"><span>    |  |  |  |--HelloServiceImpl.java</span></span>
<span class="line"><span>    |  |  |--HelloService.java</span></span>
<span class="line"><span>    |  |--TestSpring.java</span></span>
<span class="line"><span>    resources</span></span>
<span class="line"><span>    |--spring.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>源文件内容如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// Hello.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> Hello</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> sayHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// HelloImpl.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HelloImpl</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> Hello</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> sayHello</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// HelloService.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> interface</span><span style="color:#B392F0;"> HelloService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// HelloServiceImpl.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> HelloServiceImpl</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> HelloService</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#E1E4E8;"> Hello hello;</span></span>
<span class="line"><span style="color:#6A737D;">    // setter 方法必须写，否则无法注入</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setHello</span><span style="color:#E1E4E8;">(Hello </span><span style="color:#FFAB70;">hello</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">        this</span><span style="color:#E1E4E8;">.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hello;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> testHello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        hello.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//TestSpring.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> TestSpring</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // 读取 classpath 下面的配置文件，实例化容器</span></span>
<span class="line"><span style="color:#E1E4E8;">        ApplicationContext context </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ClassPathXmlApplicationContext</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;spring.xml&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 这里的字符串是配置文件中通过id指定的</span></span>
<span class="line"><span style="color:#E1E4E8;">        Hello hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">context.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">, HelloImpl.class);</span></span>
<span class="line"><span style="color:#6A737D;">//        Hello hello = (Hello) context.getBean(&quot;helloImpl&quot;);</span></span>
<span class="line"><span style="color:#E1E4E8;">        hello.</span><span style="color:#B392F0;">sayHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // 注入到HelloServiceImpl 中的 hello 属性中</span></span>
<span class="line"><span style="color:#E1E4E8;">        HelloService helloService </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#B392F0;">getBean</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#E1E4E8;">, HelloService.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        helloService.</span><span style="color:#B392F0;">testHello</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件<code>spring.xml</code>内容如下</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">beans</span><span style="color:#B392F0;"> xmlns</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#B392F0;">       xmlns:xsi</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#B392F0;">       xmlns:tx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/tx&quot;</span></span>
<span class="line"><span style="color:#B392F0;">       xmlns:context</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#B392F0;">       xsi:schemaLocation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/tx</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#9ECBFF;">            http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.dao.impl.HelloImpl&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;helloService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;com.test.spring.service.impl.HelloServiceImpl&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">property</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">beans</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,31),c=[i];function r(t,d){return e(),n("div",null,c)}const g=s(o,[["render",r],["__file","2015-01-26-Spring(一)入门.html.vue"]]),m=JSON.parse('{"path":"/program/backend/2015-01-26-Spring(%E4%B8%80)%E5%85%A5%E9%97%A8.html","title":"Spring(一): 入门","lang":"zh-CN","frontmatter":{"title":"Spring(一): 入门","date":"2015-01-26T00:00:00.000Z","category":"Spring","tag":"Spring","order":-20150126,"description":"Spring框架简介 Spring 的源码及文档下载，点击这里 Spring 框架第一个版本发布于 2004 年，自发布以来已历经三个主要版本更新: Spring 2.0 提供了 XML 命名空间和 AspectJ 支持; Spring 2.5 增加了注释驱动（annotation-driven）的配置支持; Spring 3.0增加了对 Java 5...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-01-26-Spring(%E4%B8%80)%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring(一): 入门"}],["meta",{"property":"og:description","content":"Spring框架简介 Spring 的源码及文档下载，点击这里 Spring 框架第一个版本发布于 2004 年，自发布以来已历经三个主要版本更新: Spring 2.0 提供了 XML 命名空间和 AspectJ 支持; Spring 2.5 增加了注释驱动（annotation-driven）的配置支持; Spring 3.0增加了对 Java 5..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:41:23.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2015-01-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:41:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring(一): 入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T14:41:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"Spring框架简介","slug":"spring框架简介","link":"#spring框架简介","children":[{"level":3,"title":"Core Container","slug":"core-container","link":"#core-container","children":[]},{"level":3,"title":"AOP、Aspects、Instrumentation、Messaging","slug":"aop、aspects、instrumentation、messaging","link":"#aop、aspects、instrumentation、messaging","children":[]},{"level":3,"title":"Data Access/Integration 数据访问/集成","slug":"data-access-integration-数据访问-集成","link":"#data-access-integration-数据访问-集成","children":[]},{"level":3,"title":"Web","slug":"web","link":"#web","children":[]},{"level":3,"title":"Test","slug":"test","link":"#test","children":[]},{"level":3,"title":"控制反转(IoC)和依赖注入","slug":"控制反转-ioc-和依赖注入","link":"#控制反转-ioc-和依赖注入","children":[]},{"level":3,"title":"面向方面编程(AOP)","slug":"面向方面编程-aop","link":"#面向方面编程-aop","children":[]}]},{"level":2,"title":"Spring简单项目示例","slug":"spring简单项目示例","link":"#spring简单项目示例","children":[]}],"git":{"createdTime":1719153683000,"updatedTime":1719153683000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-01-26-Spring(一)入门.md","localizedDate":"2015年1月26日","excerpt":"","autoDesc":true}');export{g as comp,m as data};
