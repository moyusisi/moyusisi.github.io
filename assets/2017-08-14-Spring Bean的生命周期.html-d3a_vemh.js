import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,d as e}from"./app-4MUv-ZKY.js";const l="/assets/bean_lifecycle-DbDMO6Wp.png",o={},p=e('<h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期"><span>生命周期</span></a></h2><p>普通的<code>Java</code>程序中一个对象通过关键字<code>new</code>进行实例化, 而在<code>Spring</code>容器里, <code>Bean</code>的生命周期由<code>Spring</code>来控制, 而<code>Spring</code>中对<code>Bean</code>的生命周期的控制非常细致, 我们可以通过<code>Spring</code>提供的扩展点来自定义<code>Bean</code>的创建过程.</p><p>下图是一个典型的生命周期过程:</p><figure><img src="'+l+`" alt="Bean生命周期" tabindex="0" loading="lazy"><figcaption>Bean生命周期</figcaption></figure><ol><li>对<code>Bean</code>进行实例化, 相当于调用构造函数, <code>new</code>出一个对象</li><li>将<code>值</code>和<code>Bean的引用</code>注入到<code>Bean</code>对应的属性中</li><li>若<code>Bean</code>实现了<code>BeanNameAware</code>接口, Spring将Bean的ID传递给<code>setBeanName(String name)</code>方法. (实现<code>BeanNameAware</code>主要是为了通过Bean的引用来 <strong>获取</strong> Bean的ID)</li><li>若<code>Bean</code>实现了<code>BeanFactoryAware</code>接口, Spring将调用<code>setBeanFactory(BeanFactory beanFactory)</code>方法, 将<code>BeanFactory</code>容器实例传入. (实现<code>BeanFactoryAware</code>主要目的是为了获取Spring容器, 如Bean通过Spring容器发布事件等)</li><li>若<code>Bean</code>实现了<code>ApplicationContextAware</code>接口, Spring容器将调用<code>setApplicationContext(ApplicationContext applicationContext)</code>方法, 将应用上下文的引用传入. (作用与<code>BeanFactoryAware</code>类似都是为了获取Spring容器, 不同的是Spring容器在调用<code>setApplicationContext</code>方法时会把自己作为参数传入, 而Spring容器在调用<code>setBeanFactory</code>前需要程序员自己指定<code>setBeanFactory</code>里的参数<code>BeanFactory</code>)</li><li>若<code>Bean</code>实现了<code>BeanPostProcessor</code>接口, Spring将调用它们的<code>预初始化方法: postProcessBeforeInitialization(Object bean, String beanName)</code>方法. (作用是在Bean实例创建成功后对进行增强处理, 如对Bean进行修改, 增加某个功能)</li><li>调用<code>@PostConstruct</code>注解的方法, 该方法必须无参数, 不能抛受检查异常, 返回值必须为<code>void</code>.</li><li>若<code>Bean</code>实现了<code>InitializingBean</code>接口, Spring将调用它们的<code>afterPropertiesSet()</code>方法.</li><li>调用自定义初始化方法, 即<code>&lt;bean init-method=&quot;&quot; /&gt;</code>或<code>@Bean(initMethod = &quot;&quot;)</code>声明的方法.</li><li>若<code>Bean</code>实现了<code>BeanPostProcessor</code>接口的实现类, Spring将调用它们的<code>后初始化方法: postProcessAfterInitialization(Object bean, String beanName)</code>方法.</li><li>此时<code>Bean</code>已经准备就绪, 可以被应用程序使用了, 它将一直驻留在应用上下文中, 直到应用上下文被销毁</li><li>调用<code>@PreDestroy</code>注解的方法, 该方法必须无参数, 不能抛受检查异常, 返回值必须为<code>void</code>.</li><li>若<code>Bean</code>实现了<code>DisposableBean</code>接口, Spring将调用它的<code>destroy()</code>方法.</li><li>调用自定义销毁方法, 即<code>&lt;bean destroy-method=&quot;&quot; /&gt;</code>或<code>@Bean(destroyMethod = &quot;&quot;)</code>声明的方法.</li></ol><p><code>注意</code>: 黄色部分标识的<code>BeanPostProcessor</code>接口有点特殊, 如果我们定义了一个实现<code>BeanPostProcessor</code>接口的<code>Bean</code>(后处理器), 那么在这个<code>Bean</code>所在的容器中的 <strong>其他所有Bean</strong> 在初始化前后都会执行该后处理器的方法</p><h2 id="测试示例" tabindex="-1"><a class="header-anchor" href="#测试示例"><span>测试示例</span></a></h2><p>如果我们在xml文件中有这样的配置</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;lifecycleService&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;XXX.service.LifecycleService&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  init-method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;initMethod&quot;</span><span style="color:#B392F0;"> destroy-method</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;destroyMethod&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Bean的定义如下:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#6A737D;">// 后处理器</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Service</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> MyBeanPostProcessor</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> BeanPostProcessor</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(LifecycleService.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#6A737D;">        // 每一个没有实现BeanPostProcessor接口的Bean都会调用</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> LifecycleService) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BeanPostProcessor.postProcessBeforeInitialization()方法, beanName={}&quot;</span><span style="color:#E1E4E8;">, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">postProcessAfterInitialization</span><span style="color:#E1E4E8;">(Object </span><span style="color:#FFAB70;">bean</span><span style="color:#E1E4E8;">, String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#6A737D;">        // 每一个没有实现BeanPostProcessor接口的Bean都会调用</span></span>
<span class="line"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (bean </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> LifecycleService) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BeanPostProcessor.postProcessBeforeInitialization()方法, beanName={}&quot;</span><span style="color:#E1E4E8;">, beanName);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> bean;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 一个普通的Bean, 在上面的xml文件中声明</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> LifecycleService</span><span style="color:#F97583;"> implements</span><span style="color:#B392F0;"> BeanNameAware</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">BeanFactoryAware</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ApplicationContextAware</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">InitializingBean</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DisposableBean</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    private</span><span style="color:#F97583;"> static</span><span style="color:#F97583;"> final</span><span style="color:#E1E4E8;"> Logger logger </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(LifecycleService.class);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#B392F0;"> LifecycleService</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1. 构造方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setBeanName</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">beanName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2. BeanNameAware.setBeanName()方法, 用于获取Bean的ID&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setBeanFactory</span><span style="color:#E1E4E8;">(BeanFactory </span><span style="color:#FFAB70;">beanFactory</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3. BeanFactoryAware.setBeanFactory()方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> setApplicationContext</span><span style="color:#E1E4E8;">(ApplicationContext </span><span style="color:#FFAB70;">applicationContext</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> BeansException {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4. ApplicationContextAware.setApplicationContext()方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#F97583;">        private</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;5. @PostConstruct&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> afterPropertiesSet</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;6. InitializingBean.afterPropertiesSet()方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> initMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;7. initMethod&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">        // bean就绪</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">PreDestroy</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> preDestory</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;8. @PreDestroy&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> destroy</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;9. DisposableBean.destroy()方法&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">        public</span><span style="color:#F97583;"> void</span><span style="color:#B392F0;"> destroyMethod</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logger.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10. destroyMethod&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子的输出结果为:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#79B8FF;">1.</span><span style="color:#E1E4E8;"> 构造方法</span></span>
<span class="line"><span style="color:#79B8FF;">2.</span><span style="color:#E1E4E8;"> BeanNameAware.</span><span style="color:#B392F0;">setBeanName</span><span style="color:#E1E4E8;">()方法, 用于获取Bean的ID</span></span>
<span class="line"><span style="color:#79B8FF;">3.</span><span style="color:#E1E4E8;"> BeanFactoryAware.</span><span style="color:#B392F0;">setBeanFactory</span><span style="color:#E1E4E8;">()方法</span></span>
<span class="line"><span style="color:#79B8FF;">4.</span><span style="color:#E1E4E8;"> ApplicationContextAware.</span><span style="color:#B392F0;">setApplicationContext</span><span style="color:#E1E4E8;">()方法</span></span>
<span class="line"><span style="color:#E1E4E8;">BeanPostProcessor.</span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">()方法, beanName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">lifecycleService</span></span>
<span class="line"><span style="color:#79B8FF;">5.</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">PostConstruct</span></span>
<span class="line"><span style="color:#79B8FF;">6.</span><span style="color:#E1E4E8;"> InitializingBean.</span><span style="color:#B392F0;">afterPropertiesSet</span><span style="color:#E1E4E8;">()方法</span></span>
<span class="line"><span style="color:#79B8FF;">7.</span><span style="color:#E1E4E8;"> initMethod</span></span>
<span class="line"><span style="color:#E1E4E8;">BeanPostProcessor.</span><span style="color:#B392F0;">postProcessBeforeInitialization</span><span style="color:#E1E4E8;">()方法, beanName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">lifecycleService</span></span>
<span class="line"><span style="color:#79B8FF;">8.</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">PreDestroy</span></span>
<span class="line"><span style="color:#79B8FF;">9.</span><span style="color:#E1E4E8;"> DisposableBean.</span><span style="color:#B392F0;">destroy</span><span style="color:#E1E4E8;">()方法</span></span>
<span class="line"><span style="color:#79B8FF;">10.</span><span style="color:#E1E4E8;"> destroyMethod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),c=[p];function i(t,r){return a(),n("div",null,c)}const y=s(o,[["render",i],["__file","2017-08-14-Spring Bean的生命周期.html.vue"]]),v=JSON.parse('{"path":"/program/backend/2017-08-14-Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html","title":"Spring Bean的生命周期","lang":"zh-CN","frontmatter":{"title":"Spring Bean的生命周期","date":"2017-08-14T00:00:00.000Z","category":"Spring","tag":["Spring"],"order":-20170814,"description":"生命周期 普通的Java程序中一个对象通过关键字new进行实例化, 而在Spring容器里, Bean的生命周期由Spring来控制, 而Spring中对Bean的生命周期的控制非常细致, 我们可以通过Spring提供的扩展点来自定义Bean的创建过程. 下图是一个典型的生命周期过程: Bean生命周期Bean生命周期 对Bean进行实例化, 相当于调...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2017-08-14-Spring%20Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Spring Bean的生命周期"}],["meta",{"property":"og:description","content":"生命周期 普通的Java程序中一个对象通过关键字new进行实例化, 而在Spring容器里, Bean的生命周期由Spring来控制, 而Spring中对Bean的生命周期的控制非常细致, 我们可以通过Spring提供的扩展点来自定义Bean的创建过程. 下图是一个典型的生命周期过程: Bean生命周期Bean生命周期 对Bean进行实例化, 相当于调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T00:52:15.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2017-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-24T00:52:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Bean的生命周期\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2017-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-24T00:52:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"生命周期","slug":"生命周期","link":"#生命周期","children":[]},{"level":2,"title":"测试示例","slug":"测试示例","link":"#测试示例","children":[]}],"git":{"createdTime":1719160919000,"updatedTime":1719190335000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":2}]},"filePathRelative":"program/backend/2017-08-14-Spring Bean的生命周期.md","localizedDate":"2017年8月14日","excerpt":"","autoDesc":true}');export{y as comp,v as data};
