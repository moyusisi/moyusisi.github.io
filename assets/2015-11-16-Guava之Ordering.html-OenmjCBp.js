import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as l,d as o}from"./app-DJRQkAjL.js";const a={},r=o(`<p>guava的collection包里有个<code>Ordering</code>抽象类实现了<code>java.util.Comparator</code>接口<br><code>Comparator</code>就俩方法<code>int compare(T o1, T o2);</code>和<code>boolean equals(Object obj);</code><br><code>Ordering</code>提供了更多的方法来完成集合排序的功能</p><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法"><span>静态方法</span></a></h2><ul><li><code>Ordering&lt;C&gt; natural()</code>: 返回自然顺序的比较器, 如数字按大小，日期按先后</li><li><code>Ordering&lt;T&gt; from(Comparator&lt;T&gt; comparator)</code>: 把给定的Comparator转化为排序器</li><li><code>Ordering&lt;Object&gt; usingToString()</code>: 按对象的字符串形式做字典排序</li><li><code>Ordering&lt;T&gt; compound(Iterable comparators)</code>: 合成多个比较器, 类似于实例方法的那个</li><li><code>Ordering&lt;Object&gt; allEqual()</code>: 返回一个认为全都相等的比较器, 相当于没有排序. 它的意义在于返回一个比较器, 这样就可以使用一些实例方法了, 从而进行链式比较, 比如:<code>Ordering.allEqual().nullsLast().sortedCopy(asList(t, null, e, s, null, t, null))}</code></li></ul><h2 id="实例方法-链式调用" tabindex="-1"><a class="header-anchor" href="#实例方法-链式调用"><span>实例方法:链式调用</span></a></h2><ul><li><code>Ordering&lt;S&gt; reverse()</code>: 返回反序比较器</li><li><code>Ordering&lt;S&gt; nullsFirst()</code>: 使用当前排序器, 但额外把<code>null</code>放到最前面</li><li><code>Ordering&lt;S&gt; nullsLast()</code>: 使用当前排序器, 但额外把<code>null</code>放到最后面</li><li><code>Ordering&lt;U&gt; compound(Comparator second)</code>: 合成比较器, 先按原来排序，然后按second排序</li><li><code>Ordering&lt;F&gt; onResultOf(Function&lt;F, T&gt; function)</code>: 对集合中元素调用Function，再按返回值用当前排序器排序.</li></ul><p>看下面这个链式调用的例子, 应该从后往前读, 先调用apply方法获取Foo的name值, 在把null放前面, 再对剩下的按照name的自然顺序进行排序</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#24292e;color:#e1e4e8;"><pre class="shiki github-dark vp-code"><code><span class="line"><span style="color:#E1E4E8;">Ordering&lt;</span><span style="color:#F97583;">Foo</span><span style="color:#E1E4E8;">&gt; ordering </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Ordering.</span><span style="color:#B392F0;">natural</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">nullsFirst</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">onResultOf</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Function&lt;</span><span style="color:#F97583;">Foo</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#F97583;">    public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(Foo </span><span style="color:#FFAB70;">foo</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> foo.getName;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实例方法-操作集合元素的方法" tabindex="-1"><a class="header-anchor" href="#实例方法-操作集合元素的方法"><span>实例方法:操作集合元素的方法</span></a></h2><p>注:后面说的大小是指排序的前后</p><p><code>min()</code>: 返回最小的那个元素, 重载方法有</p><ul><li><code>E min(Iterator&lt;E&gt; iterator)</code>: 迭代器空则抛出<code>NoSuchElementException</code></li><li><code>E min(Iterable&lt;E&gt; iterable)</code></li><li><code>E min(E a, E b)</code>: 相等则返回第一个</li><li><code>E min(E a, E b, E c, E... rest)</code>: 多个最小则返回第一个最小的</li></ul><p><code>max()</code>: 返回最大的那个元素, 重载方法有</p><ul><li><code>E max(Iterator&lt;E&gt; iterator)</code></li><li><code>E max(Iterable&lt;E&gt; iterable)</code></li><li><code>E max(E a, E b)</code></li><li><code>E max(E a, E b, E c, E... rest)</code></li></ul><p><code>leastOf()</code>: 返回最小的k个元素的列表, 不足k个则都返回</p><ul><li><code>List&lt;E&gt; leastOf(Iterable&lt;E&gt; iterable, int k)</code></li><li><code>List&lt;E&gt; leastOf(Iterator&lt;E&gt; elements, int k)</code></li></ul><p><code>greatestOf()</code>: 返回最大的k个元素的列表, 不足k个则都返回</p><ul><li><code>List&lt;E&gt; greatestOf(Iterable&lt;E&gt; iterable, int k)</code></li><li><code>List&lt;E&gt; greatestOf(Iterator&lt;E&gt; elements, int k)</code></li></ul><p>判断是否已经按照排序器排过序</p><ul><li><code>boolean isOrdered(Iterable iterable)</code>: 允许有排序值相等的元素</li><li><code>boolean isStrictlyOrdered(Iterable iterable)</code>: 严格递增, 不允许有相等的</li></ul><p>返回排序好的list</p><ul><li><code>List&lt;E&gt; sortedCopy(Iterable&lt;E&gt; elements)</code>: 返回可变的已经排好序的list</li><li><code>ImmutableList&lt;E&gt; immutableSortedCopy(Iterable&lt;E&gt; elements)</code>: 返回不可变的已经排好序的list</li></ul>`,21),n=[r];function i(s,c){return t(),l("div",null,n)}const u=e(a,[["render",i],["__file","2015-11-16-Guava之Ordering.html.vue"]]),g=JSON.parse('{"path":"/program/backend/2015-11-16-Guava%E4%B9%8BOrdering.html","title":"Guava之Ordering","lang":"zh-CN","frontmatter":{"title":"Guava之Ordering","date":"2015-11-16T00:00:00.000Z","category":"Java","tag":["Guava"],"order":-20151116,"description":"guava的collection包里有个Ordering抽象类实现了java.util.Comparator接口 Comparator就俩方法int compare(T o1, T o2);和boolean equals(Object obj); Ordering提供了更多的方法来完成集合排序的功能 静态方法 Ordering<C> natural()...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/program/backend/2015-11-16-Guava%E4%B9%8BOrdering.html"}],["meta",{"property":"og:site_name","content":"魔芋丝丝"}],["meta",{"property":"og:title","content":"Guava之Ordering"}],["meta",{"property":"og:description","content":"guava的collection包里有个Ordering抽象类实现了java.util.Comparator接口 Comparator就俩方法int compare(T o1, T o2);和boolean equals(Object obj); Ordering提供了更多的方法来完成集合排序的功能 静态方法 Ordering<C> natural()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T15:13:58.000Z"}],["meta",{"property":"article:author","content":"moyusisi"}],["meta",{"property":"article:tag","content":"Guava"}],["meta",{"property":"article:published_time","content":"2015-11-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-23T15:13:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Guava之Ordering\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-11-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-23T15:13:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"moyusisi\\"}]}"]]},"headers":[{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[]},{"level":2,"title":"实例方法:链式调用","slug":"实例方法-链式调用","link":"#实例方法-链式调用","children":[]},{"level":2,"title":"实例方法:操作集合元素的方法","slug":"实例方法-操作集合元素的方法","link":"#实例方法-操作集合元素的方法","children":[]}],"git":{"createdTime":1719155638000,"updatedTime":1719155638000,"contributors":[{"name":"moyusisi","email":"moyusisi@126.com","commits":1}]},"filePathRelative":"program/backend/2015-11-16-Guava之Ordering.md","localizedDate":"2015年11月16日","excerpt":"","autoDesc":true}');export{u as comp,g as data};
